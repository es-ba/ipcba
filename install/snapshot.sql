--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: comun; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA comun;


--
-- Name: cvp; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA cvp;


--
-- Name: his; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA his;


--
-- Name: extpre; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.extpre AS (
	periodo character varying(11),
	producto character varying(8),
	nombreproducto character varying(250),
	precios text,
	informantes text
);


--
-- Name: extvar; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.extvar AS (
	periodo character varying(11),
	producto character varying(8),
	nombreproducto character varying(250),
	variaciones text,
	informantes text
);


--
-- Name: relatr_tipico_type; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.relatr_tipico_type AS (
	valor text,
	frecuencia bigint,
	frec_ant bigint,
	obs text
);


--
-- Name: res_col10; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.res_col10 AS (
	renglon bigint,
	formato_renglon text,
	columna1 text,
	columna2 text,
	columna3 text,
	columna4 text,
	columna5 text,
	columna6 text,
	columna7 text,
	columna8 text,
	columna9 text,
	columna10 text
);


--
-- Name: res_col3; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.res_col3 AS (
	renglon bigint,
	formato_renglon text,
	columna1 text,
	columna2 text,
	columna3 text
);


--
-- Name: res_col4; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.res_col4 AS (
	renglon bigint,
	formato_renglon text,
	columna1 text,
	columna2 text,
	columna3 text,
	columna4 text
);


--
-- Name: res_col6; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.res_col6 AS (
	renglon bigint,
	formato_renglon text,
	columna1 text,
	columna2 text,
	columna3 text,
	columna4 text,
	columna5 text,
	columna6 text
);


--
-- Name: res_col8; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.res_col8 AS (
	renglon bigint,
	formato_renglon text,
	columna1 text,
	columna2 text,
	columna3 text,
	columna4 text,
	columna5 text,
	columna6 text,
	columna7 text,
	columna8 text
);


--
-- Name: res_col9; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.res_col9 AS (
	renglon bigint,
	formato_renglon text,
	columna1 text,
	columna2 text,
	columna3 text,
	columna4 text,
	columna5 text,
	columna6 text,
	columna7 text,
	columna8 text,
	columna9 text
);


--
-- Name: res_mat; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.res_mat AS (
	formato_renglon text,
	lateral1 text,
	lateral2 text,
	cabezal1 text,
	celda text
);


--
-- Name: res_mat2; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.res_mat2 AS (
	formato_renglon text,
	lateral1 text,
	lateral2 text,
	lateral3 text,
	cabezal1 text,
	celda text
);


--
-- Name: sino_dom; Type: DOMAIN; Schema: cvp; Owner: -
--

CREATE DOMAIN cvp.sino_dom AS character varying(1)
	CONSTRAINT "Campo lógico debe poner 'S' o 'N'" CHECK (((VALUE)::text = ANY (ARRAY[('S'::character varying)::text, ('N'::character varying)::text])));


--
-- Name: DOMAIN sino_dom; Type: COMMENT; Schema: cvp; Owner: -
--

COMMENT ON DOMAIN cvp.sino_dom IS 'Dominio logico {S: Si; N: No}';


--
-- Name: tarea_puntos; Type: TYPE; Schema: cvp; Owner: -
--

CREATE TYPE cvp.tarea_puntos AS (
	tarea integer,
	puntos integer
);


--
-- Name: a_texto(boolean); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.a_texto(valor boolean) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  IF valor IS NULL THEN
    RETURN '';
  ELSIF valor=TRUE THEN
    RETURN 'TRUE';
  ELSE
    RETURN 'FALSE';
  END IF;
END;
$$;


--
-- Name: a_texto(double precision); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.a_texto(valor double precision) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  IF valor IS NULL THEN
    RETURN '';
  ELSE
    RETURN valor::TEXT;
  END IF;
END;
$$;


--
-- Name: a_texto(integer); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.a_texto(valor integer) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  IF valor IS NULL THEN
    RETURN '';
  ELSE
    RETURN valor::TEXT;
  END IF;
END;
$$;


--
-- Name: a_texto(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.a_texto(valor text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  IF valor IS NULL THEN
    RETURN '';
  ELSIF valor='' THEN
    RETURN '''''';
  ELSE
    RETURN valor;
  END IF;
END;
$$;


--
-- Name: a_texto(timestamp without time zone); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.a_texto(valor timestamp without time zone) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  IF valor IS NULL THEN
    RETURN '';
  ELSE
    RETURN TO_CHAR(valor,'dd/mm/yyyy');
  END IF;
END;
$$;


--
-- Name: cadena_normalizar(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.cadena_normalizar(p_cadena text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
/*
-- Pruebas:
select entrada, esperado, comun.cadena_normalizar(entrada)
    , esperado is distinct from comun.cadena_normalizar(entrada)
  from (
  select 'hola' as entrada, 'HOLA' as esperado
  union select 'Cañuelas', 'CAÑUELAS'
  union select 'ÁCÉNTÍTÓSÚCü','ACENTITOSUCU'
  union select 'CON.SIGNOS/DE-PUNTUACION    Y MUCHOS ESPACIOS','CON SIGNOS DE-PUNTUACION Y MUCHOS ESPACIOS'
) casos
  where esperado is distinct from comun.cadena_normalizar(entrada);
*/   largo integer;
   expresion_regular_a text;
   caracteres_nopermitidos text:='ÁÉÍÓÚÜáéíóòúüçÇ¿¡!:;,?¿"./,()_'; 
   --caracteres_nopermitidos text:='ÁÉÍÓÚÜáéíóúüçÇ¿¡!:;,?¿".';
   i integer;
BEGIN
  expresion_regular_a:='^['||caracteres_nopermitidos||']*$';
  if p_cadena IS NOT NULL then
    largo := char_length(p_cadena);
   -- for i IN 1..largo loop
     i:=1;
     while  i <=largo loop
      if (substr(p_cadena,i,1) ~ expresion_regular_a) then
      --  raise notice 'valor no permitido %', i;
      --  raise notice 'El caracter % es invalido (%)', substr(p_cadena,i,1), ascii(substr(p_cadena,i,1));
           case when (substr(p_cadena,i,1)='Á' or  substr(p_cadena,i,1)='á') then p_cadena:=replace(p_cadena, substr(p_cadena,i,1), 'a');
                           i:=i+1;
                when (substr(p_cadena,i,1)='É' or  substr(p_cadena,i,1)='é') then p_cadena:=replace(p_cadena, substr(p_cadena,i,1), 'e');
                          i:=i+1;
                when (substr(p_cadena,i,1)='Í' or  substr(p_cadena,i,1)='í') then p_cadena:=replace(p_cadena, substr(p_cadena,i,1), 'i');
                          i:=i+1; 
                when (substr(p_cadena,i,1)='Ó' or  substr(p_cadena,i,1)='ó' or  substr(p_cadena,i,1)='ò') then p_cadena:=replace(p_cadena, substr(p_cadena,i,1), 'o');
                          i:=i+1;  
                when (substr(p_cadena,i,1)='Ú' or  substr(p_cadena,i,1)='ú' or substr(p_cadena,i,1)='Ü' or  substr(p_cadena,i,1)='ü')
                    then p_cadena:=replace(p_cadena, substr(p_cadena,i,1), 'u');
                          i:=i+1;              
                else p_cadena:=replace(p_cadena, substr(p_cadena,i,1), ' ');
                         i:=i+1;       
           end case;
      else
       i:=i+1;
      -- raise notice 'i %', i;   
      end if;
    end loop;
  end if; 
  p_cadena:=regexp_replace(p_cadena, ' {2,}',' ','g');  
  return upper(trim(p_cadena));
END;
$_$;


--
-- Name: cadena_valida(text, text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.cadena_valida(p_cadena text, p_version text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
  /*
  select comun.cadena_valida(entrada, version)=resultado as ok, entrada, version, resultado as esperado, comun.cadena_valida(entrada, version) as recibido
    from (
	  select 'Mauro01' as entrada, 'codigo' as version, true as resultado
	  union select '/xñz1', 'codigo', false
	  union select '/xñz1', 'castellano', true
	  union select '/xñz1', 'formula', false
	  union select '{"pepe":"\\esto;",[]}', 'formula', false
	  union select '{"pepe":"\\esto;",[]}', 'json', true
	  union select 'a<99-', 'formula', true
	  union select 'a<99-', 'codigo', false) x
    where comun.cadena_valida(entrada, version) is distinct from resultado 
  
  */
  caracteres_permitidos_codigo text:='A-Za-z0-9_';
  caracteres_permitidos_extendido text:='-'||caracteres_permitidos_codigo||' ,/*+().$@!#:%';
  caracteres_permitidos_castellano text:=caracteres_permitidos_extendido||'ÁÉÍÓÚÜÑñáéíóúüçÇ¿¡?!';
  caracteres_permitidos_formula text:=caracteres_permitidos_extendido||'<>=';
  caracteres_permitidos_castellano_formula text:=caracteres_permitidos_castellano||'<>=';
  caracteres_permitidos_json text:=caracteres_permitidos_formula||'{}"\[\]\\|&^~'';';
  caracteres_permitidos_amplio text:=caracteres_permitidos_castellano_formula||'{}"\[\]\\|&^~'';º³';
  caracteres_permitidos text;
  explicar boolean:=false;
  largo integer;
  expresion_regular text;
  v_juego_caracteres text:=p_version;
BEGIN
  if p_version like 'explicar%' then
    explicar:=true;
    v_juego_caracteres:=substr(p_version,length('explicar ')+1);
  end if;
  if v_juego_caracteres='cualquiera' then
    return true;
  end if;
  caracteres_permitidos:=case v_juego_caracteres
    when 'codigo' then caracteres_permitidos_codigo
    when 'extendido' then caracteres_permitidos_extendido
    when 'castellano' then caracteres_permitidos_castellano
    when 'formula' then caracteres_permitidos_formula
    when 'json' then caracteres_permitidos_json
    when 'castellano y formula' then caracteres_permitidos_castellano_formula
    when 'amplio' then caracteres_permitidos_amplio
  end;
  if caracteres_permitidos is null then
    raise exception 'Parametro invalido para p_version "%"',p_version;
  end if;
  expresion_regular:='^['||caracteres_permitidos||']*$';
  if explicar then
    largo := char_length(p_cadena);
    for i IN 1..largo LOOP
      if not (substr(p_cadena,i,1) ~ expresion_regular) THEN
        raise exception 'El caracter % es invalido (%)', substr(p_cadena,i,1), ascii(substr(p_cadena,i,1));
      END IF;
    END LOOP;
  end if;
  return p_cadena ~ expresion_regular;
END;
$_$;


--
-- Name: caracteres_invalidos(text, text, text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.caracteres_invalidos(p_cadena text, p_version text DEFAULT NULL::text, p_forma text DEFAULT NULL::text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $_$DECLARE
  caracteres_invalidos text := '';
  caracteres_permitidos_codigo text:='A-Za-z0-9_';
  caracteres_permitidos_extendido text:='-'||caracteres_permitidos_codigo||' ,/*().+$@!#:%';
  caracteres_permitidos_castellano text:=caracteres_permitidos_extendido||'ÁÉÍÓÚÜÑñáéíóúüçÇ¿¡?!';
  caracteres_permitidos_formula text:=caracteres_permitidos_extendido||'<>=';
  caracteres_permitidos_castellano_formula text:=caracteres_permitidos_castellano||'<>=';
  caracteres_permitidos_json text:=caracteres_permitidos_formula||'{}"\[\]\\|&^~'';';
  caracteres_permitidos_amplio text:=caracteres_permitidos_castellano_formula||'{}"\[\]\\|&^~'';º';
  caracteres_permitidos text;
  expresion_regular text;
  expresion_regular_codigo text;
  expresion_regular_extendido text;
  expresion_regular_castellano text;
  expresion_regular_formula text;
  expresion_regular_castellano_formula text;
  expresion_regular_json text;
  expresion_regular_amplio text;
  caracter_ascii int;
  largo int;
BEGIN/*
-- Pruebas:
select version, entrada, comun.caracteres_invalidos(entrada,version,forma)
     from (
  select '+?af'::text as entrada, 'codigo'::text as version, null as forma, 1 as caso
  union select '+?af', 'codigo', 'esc', 2 
  union select '+af', 'codigo', null, 3
  union select '+af', 'codigo', 'esc', 4 
  union select '☻☺defg', 'codigo', null, 5 
  union select '☻☺defg', 'codigo', 'esc', 6 
  union select 'defg', 'codigo', null, 7   
  union select 'defg', 'codigo', 'esc', 8 
  union select 'asdjfhasd', 'cualquiera', null, 9 
  union select 'asdjfhasd', 'cualquiera', 'esc', 10 
  union select 'Áñ= u', 'castellano', null, 11 
  union select 'Áñ= u', 'castellano', 'esc', 12
  union select 'á><=¿', 'formula', null, 13 
  union select 'á><=¿', 'formula', 'esc', 14
  union select 'úÑ=☻', 'castellano y formula', null, 15
  union select 'úÑ=☻', 'castellano y formula', null, 16
  union select 'sdfasd☺>Ñ?¿asdfas', null, null, 17
  union select 'sdfasd☺>Ñ?¿asdfas', null, 'esc', 18) casos order by caso;
*/
if (p_version = 'cualquiera') then
   return caracteres_invalidos;
end if;
if (p_version ISNULL) then
   expresion_regular_codigo:='^['||caracteres_permitidos_codigo||']*$';
   expresion_regular_extendido:='^['||caracteres_permitidos_extendido||']*$';
   expresion_regular_castellano:='^['||caracteres_permitidos_castellano||']*$';
   expresion_regular_formula:='^['||caracteres_permitidos_formula||']*$';
   expresion_regular_castellano_formula:='^['||caracteres_permitidos_castellano_formula||']*$';
   expresion_regular_json:='^['||caracteres_permitidos_json||']*$';
   expresion_regular_amplio:='^['||caracteres_permitidos_amplio||']*$';
   largo := char_length(p_cadena);
   for i in 1..largo LOOP
       if ((substr(p_cadena,i,1) !~ expresion_regular_codigo) and (substr(p_cadena,i,1) !~ expresion_regular_extendido) and (substr(p_cadena,i,1) !~ expresion_regular_castellano) and (substr(p_cadena,i,1) !~ expresion_regular_formula) and (substr(p_cadena,i,1) !~ expresion_regular_castellano_formula)) then
          if (p_forma = 'esc') then 
             caracteres_invalidos := caracteres_invalidos||chr(92)||chr(92)||'u'||to_hex(ascii(substr(p_cadena,i,1)));
          else
             caracteres_invalidos := caracteres_invalidos||substr(p_cadena,i,1);
          end if;
       end if;
   end loop;
   return caracteres_invalidos;
else
    case p_version
       when 'codigo' then caracteres_permitidos := caracteres_permitidos_codigo;
       when 'extendido' then caracteres_permitidos :=caracteres_permitidos_extendido;
       when 'castellano' then caracteres_permitidos := caracteres_permitidos_castellano;
       when 'formula' then caracteres_permitidos := caracteres_permitidos_formula;
       when 'castellano y formula' then caracteres_permitidos := caracteres_permitidos_castellano_formula;
       when 'json' then caracteres_permitidos := caracteres_permitidos_json;
       when 'amplio' then caracteres_permitidos := caracteres_permitidos_amplio;
       else raise exception 'Parametro invalido para "version" "%"',"p_version";
    end case;
    expresion_regular:='^['||caracteres_permitidos||']*$';
    largo := char_length(p_cadena);
    for i in 1..largo LOOP
        if (substr(p_cadena,i,1) !~ expresion_regular) then
           if (p_forma = 'esc') then 
              caracteres_invalidos := caracteres_invalidos||chr(92)||chr(92)||'u'||to_hex(ascii(substr(p_cadena,i,1)));
           else
              caracteres_invalidos := caracteres_invalidos||substr(p_cadena,i,1);
           end if;
        end if;
    end loop;
    return caracteres_invalidos;
end if;
end;$_$;


--
-- Name: concato_add(text, text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.concato_add(p_uno text, p_dos text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  if p_uno IS NULL OR p_uno='' then
    if p_dos IS NULL OR p_dos='' then
	  RETURN '';
	else
	  RETURN p_dos;
	end if;
  else 
    if p_dos IS NULL OR p_dos='' then
	  RETURN p_uno;
	else
	  RETURN p_uno || ' ' || p_dos;
	end if;
  end if;  
END;
$$;


--
-- Name: concato_fin(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.concato_fin(p_uno text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  RETURN trim(p_uno);
END;
$$;


--
-- Name: crear_genericas_maxlen(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.crear_genericas_maxlen(tipo text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
BEGIN

EXECUTE replace(
$ESTO$
CREATE OR REPLACE FUNCTION comun.maxlen_unir(p_uno _TIPO_, p_dos _TIPO_) returns _TIPO_
as
$$
BEGIN
  if length(coalesce(p_uno::text,''))>length(coalesce(p_dos::text,'')) then
    RETURN p_uno;
  else 
    RETURN p_dos;
  end if;  
END;
$$
  LANGUAGE 'plpgsql' IMMUTABLE;

CREATE OR REPLACE FUNCTION comun.maxlen_fin(p_uno _TIPO_) returns _TIPO_
as
$$
BEGIN
  RETURN p_uno;
END;
$$
  LANGUAGE 'plpgsql' IMMUTABLE;

DROP AGGREGATE IF EXISTS comun.maxlen (_TIPO_);
CREATE AGGREGATE comun.maxlen (_TIPO_)
(
    sfunc = comun.maxlen_unir,
    stype = _TIPO_,
    finalfunc = comun.maxlen_fin
);

GRANT EXECUTE ON FUNCTION comun.maxlen(_TIPO_) TO public; 
GRANT EXECUTE ON FUNCTION comun.maxlen_unir(_TIPO_, _TIPO_) TO public; 
GRANT EXECUTE ON FUNCTION comun.maxlen_fin(_TIPO_) TO public; 

$ESTO$, '_TIPO_', tipo);

END;
$_$;


--
-- Name: cuantos_dias_mes(text, text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.cuantos_dias_mes(pperiodo text, pdia text) RETURNS integer
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
  SELECT count(*)::integer
    FROM (SELECT generate_series(0,30) + DATE_TRUNC('month', (substr(pperiodo,2,4)||'-'||substr(pperiodo,7,2)||'-01')::date)::date as date) d
    WHERE EXTRACT('month' from d.date) = EXTRACT('month' from DATE_TRUNC('month', (substr(pperiodo,2,4)||'-'||substr(pperiodo,7,2)||'-01')::date))
          AND EXTRACT('dow' from d.date)::integer = (CASE WHEN pdia in ('Lunes','LUNES','lunes') THEN '1'
                                                WHEN pdia in ('Martes','MARTES','martes') THEN '2'
                                                WHEN pdia in ('Miercoles','MIERCOLES','miercoles') THEN '3'
                                                WHEN pdia in ('Jueves','JUEVES','jueves') THEN '4'
                                                WHEN pdia in ('Viernes','VIERNES','viernes') THEN '5'
                                                WHEN pdia in ('Sabado','SABADO','sabado') THEN '6'
                                                WHEN pdia in ('Domingo','DOMINGO','domingo') THEN '0'
                                                ELSE NULL
                                                end)::integer;
$$;


--
-- Name: date_from_epoch(integer); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.date_from_epoch(p_epoch integer) RETURNS timestamp with time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  return TIMESTAMP WITH TIME ZONE 'epoch' + p_epoch * INTERVAL '1 second';
END;
$$;


--
-- Name: es_numero(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.es_numero(valor text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  valor_numerico double precision;
BEGIN
  valor_numerico:=valor::double precision;
  RETURN true;
EXCEPTION
  WHEN invalid_text_representation THEN
    RETURN false;  
  WHEN numeric_value_out_of_range THEN     
    return false;
END;
$$;


--
-- Name: lanza(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.lanza(p_mensaje text) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
  raise exception 'lanza %',p_mensaje;
end;
$$;


--
-- Name: maxlen_fin(boolean); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_fin(p_uno boolean) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  RETURN p_uno;
END;
$$;


--
-- Name: maxlen_fin(date); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_fin(p_uno date) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  RETURN p_uno;
END;
$$;


--
-- Name: maxlen_fin(double precision); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_fin(p_uno double precision) RETURNS double precision
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  RETURN p_uno;
END;
$$;


--
-- Name: maxlen_fin(integer); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_fin(p_uno integer) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  RETURN p_uno;
END;
$$;


--
-- Name: maxlen_fin(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_fin(p_uno text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  RETURN p_uno;
END;
$$;


--
-- Name: maxlen_unir(boolean, boolean); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_unir(p_uno boolean, p_dos boolean) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  if length(coalesce(p_uno::text,''))>length(coalesce(p_dos::text,'')) then
    RETURN p_uno;
  else 
    RETURN p_dos;
  end if;  
END;
$$;


--
-- Name: maxlen_unir(date, date); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_unir(p_uno date, p_dos date) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  if length(coalesce(p_uno::text,''))>length(coalesce(p_dos::text,'')) then
    RETURN p_uno;
  else 
    RETURN p_dos;
  end if;  
END;
$$;


--
-- Name: maxlen_unir(double precision, double precision); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_unir(p_uno double precision, p_dos double precision) RETURNS double precision
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  if length(coalesce(p_uno::text,''))>length(coalesce(p_dos::text,'')) then
    RETURN p_uno;
  else 
    RETURN p_dos;
  end if;  
END;
$$;


--
-- Name: maxlen_unir(integer, integer); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_unir(p_uno integer, p_dos integer) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  if length(coalesce(p_uno::text,''))>length(coalesce(p_dos::text,'')) then
    RETURN p_uno;
  else 
    RETURN p_dos;
  end if;  
END;
$$;


--
-- Name: maxlen_unir(text, text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.maxlen_unir(p_uno text, p_dos text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  if length(coalesce(p_uno::text,''))>length(coalesce(p_dos::text,'')) then
    RETURN p_uno;
  else 
    RETURN p_dos;
  end if;  
END;
$$;


--
-- Name: para_ordenar_numeros(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.para_ordenar_numeros(texto_con_numeros text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
declare
  rta text='';
  vPar record;
begin
  for vPar in 
      select regexp_matches(texto_con_numeros, E'([^0-9.]*|\\.)([0-9]*)', 'g') as conjunto
  loop
      rta=rta||vPar.conjunto[1];
      if vPar.conjunto[1]='.' then
          rta=rta||vPar.conjunto[2];
      elsif(length(vPar.conjunto[2])>0) then
          rta=rta||lpad(vPar.conjunto[2],9);
      end if;
  end loop;
  return rta;
end;
$$;


--
-- Name: probar(text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.probar(p_sentencia text) RETURNS text
    LANGUAGE plpgsql
    AS $$
begin
  execute p_sentencia;
  return 'Ejecuto sin excepciones';
exception
  when others then
    return sqlstate || ': ' || sqlerrm;
end;
  $$;


--
-- Name: rstrpos(text, text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.rstrpos(pfrase text, pparte text) RETURNS integer
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
  select length($1)-nullif(strpos(reverse($1),$2),0)+1-length($2);
$_$;


--
-- Name: sin_el_ultimo(text, text); Type: FUNCTION; Schema: comun; Owner: -
--

CREATE FUNCTION comun.sin_el_ultimo(pfrase text, pparte text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
  select substr($1,1,comun.rstrpos($1,$2));
$_$;


--
-- Name: actualizacion_precionormalizado(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.actualizacion_precionormalizado(pperiodo text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
vprecios RECORD;
vprecioatr RECORD;
vpnormalizado cvp.relpre.precionormalizado%TYPE;
cantnormalizados integer:=0;
vcant INTEGER;
BEGIN
 cantnormalizados=0;
 FOR vprecios IN
  SELECT informante, visita, producto, observacion, precio
    FROM  cvp.relpre 
    WHERE periodo=pperiodo
    ORDER BY informante,visita,producto,observacion 
 LOOP
   vpnormalizado=null;
   SELECT count(*) into vcant --utilizo count porque hay productos con dos atributos normalizables
     FROM  cvp.prodatr pa 
     WHERE pa.producto=vprecios.producto 
       AND pa.normalizable='S';
   --raise notice 'Primer cursor Inf % Vis % Producto % Obs % precio % atributonormalizable % ', vprecios.informante, vprecios.visita, vprecios.producto, vprecios.observacion, vprecios.precio, vcant;    
   IF vcant =0 THEN 
     vpnormalizado=vprecios.precio;
   ELSE
     FOR vprecioatr IN
       SELECT a.atributo,a.valor, pa.valornormal,pa.prioridad,pa.normalizable
         FROM  cvp.prodatr pa, cvp.relatr a 
         WHERE a.producto=pa.producto AND pa.atributo=a.atributo
           AND a.periodo=pperiodo AND vprecios.informante=a.informante AND vprecios.visita=a.visita AND vprecios.producto=a.producto AND vprecios.observacion=a.observacion 
           AND pa.normalizable='S'
         ORDER BY pa.prioridad
     LOOP
     --  raise notice 'Segundo cursor Inf % Vis % Producto % Obs % precio % valoratr % valornormal % ', vprecios.informante, vprecios.visita, vprecios.producto, vprecios.observacion, vprecios.precio, vprecioatr.valor, vprecioatr.valornormal;
       IF  vprecioatr.valor is not null THEN
         IF vprecioatr.prioridad=1 THEN
           vpnormalizado=vprecios.precio/vprecioatr.valor::double precision*vprecioatr.ValorNormal;
         ELSE 
           vpnormalizado=vpnormalizado/vprecioatr.valor::double precision*vprecioatr.ValorNormal;
         END IF;
       ELSE 
         vpnormalizado=null;
       END IF;
     END LOOP;
     
  END IF;
     UPDATE cvp.relpre  SET precionormalizado=vpnormalizado
       WHERE periodo=pperiodo AND informante=vprecios.informante AND visita=vprecios.visita 
         AND producto=vprecios.producto 
         AND observacion=vprecios.observacion ;
     --raise notice 'Al actualizar Inf % Vis % Producto % Obs % precio %  precionormalizado % ', vprecios.informante, vprecios.visita, vprecios.producto, vprecios.observacion, vprecios.precio, vpnormalizado;     
     cantnormalizados=cantnormalizados +1;
 END LOOP;    
RETURN cantnormalizados;
END;
$$;


--
-- Name: actualizacion_precionormalizado_ph(text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.actualizacion_precionormalizado_ph(pperiodo text, pproducto text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
vprecios RECORD;
vprecioatr RECORD;
vpnormalizado cvp.relpre.precionormalizado%TYPE;
cantnormalizados integer:=0;
vcant INTEGER;
BEGIN
 cantnormalizados=0;
 FOR vprecios IN
  SELECT informante, visita, producto, observacion, precio
    FROM  cvp.relpre 
    WHERE periodo=pperiodo AND producto=pProducto
    ORDER BY informante,visita,producto,observacion 
 LOOP
   vpnormalizado=null;
   SELECT count(*) into vcant --utilizo count porque hay productos con dos atributos normalizables
     FROM  cvp.prodatr pa 
     WHERE pa.producto=vprecios.producto 
       AND pa.normalizable='S';
   --raise notice 'Primer cursor Inf % Vis % Producto % Obs % precio % atributonormalizable % ', vprecios.informante, vprecios.visita, vprecios.producto, vprecios.observacion, vprecios.precio, vcant;    
   IF vcant =0 THEN 
     vpnormalizado=vprecios.precio;
   ELSE
     FOR vprecioatr IN
       SELECT a.atributo,a.valor, pa.valornormal,pa.prioridad,pa.normalizable
         FROM  cvp.prodatr pa, cvp.relatr a 
         WHERE a.producto=pa.producto AND pa.atributo=a.atributo
           AND a.periodo=pperiodo AND vprecios.informante=a.informante AND vprecios.visita=a.visita AND vprecios.producto=a.producto AND vprecios.observacion=a.observacion 
           AND pa.normalizable='S'
         ORDER BY pa.prioridad
     LOOP
     --  raise notice 'Segundo cursor Inf % Vis % Producto % Obs % precio % valoratr % valornormal % ', vprecios.informante, vprecios.visita, vprecios.producto, vprecios.observacion, vprecios.precio, vprecioatr.valor, vprecioatr.valornormal;
       IF  vprecioatr.valor is not null THEN
         IF vprecioatr.prioridad=1 THEN
           vpnormalizado=vprecios.precio/vprecioatr.valor::double precision*vprecioatr.ValorNormal;
         ELSE 
           vpnormalizado=vpnormalizado/vprecioatr.valor::double precision*vprecioatr.ValorNormal;
         END IF;
       ELSE 
         vpnormalizado=null;
       END IF;
     END LOOP;
     
  END IF;
     UPDATE cvp.relpre  SET precionormalizado=vpnormalizado
       WHERE periodo=pperiodo AND informante=vprecios.informante AND visita=vprecios.visita 
         AND producto=vprecios.producto 
         AND observacion=vprecios.observacion ;
     --raise notice 'Al actualizar Inf % Vis % Producto % Obs % precio %  precionormalizado % ', vprecios.informante, vprecios.visita, vprecios.producto, vprecios.observacion, vprecios.precio, vpnormalizado;     
     cantnormalizados=cantnormalizados +1;
 END LOOP;    
RETURN cantnormalizados;
END;
$$;


--
-- Name: actualizar_enc_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.actualizar_enc_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
vencuestador character varying(10);
BEGIN
if TG_OP='UPDATE' then
  vencuestador := old.encuestador;
else
  vencuestador := null;
end if;
if vencuestador is distinct from new.encuestador then
   UPDATE cvp.relvis set encuestador = new.encuestador WHERE periodo = new.periodo and panel = new.panel and tarea = new.tarea;
end if;
RETURN NEW;
END;
$$;


--
-- Name: actualizar_estado_informante_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.actualizar_estado_informante_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

DECLARE
 vescierredefinitivoinf cvp.razones.escierredefinitivoinf%type;
 vcierre text;
 vestado text;
 vexiste integer;

BEGIN
IF OLD.razon IS DISTINCT FROM NEW.razon THEN
    SELECT escierredefinitivoinf INTO vescierredefinitivoinf
      FROM  cvp.razones 
      WHERE razon=NEW.razon;
      
    SELECT 1, string_agg(distinct coalesce(escierredefinitivoinf,'N'),'|') INTO vexiste, vcierre
      FROM cvp.relvis r left join cvp.razones z using(razon)
      WHERE periodo = NEW.periodo AND informante = NEW.informante AND formulario <> NEW.formulario and ultima_visita
      GROUP BY informante;

    IF vescierredefinitivoinf='S' THEN
       IF vexiste = 1 THEN
         IF vcierre IS DISTINCT FROM 'S' THEN
           vestado = 'Activo';
         ELSE
           vestado = 'Inactivo';
         END IF;
       ELSE
         vestado = 'Inactivo';
       END IF;
    ELSE
       vestado = 'Activo';
    END IF;
    UPDATE cvp.informantes SET estado = vestado WHERE informante = new.informante and estado is distinct from vestado;
END IF;
RETURN NEW;

END;
$$;


--
-- Name: actualizar_periodo_panelrotativo_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.actualizar_periodo_panelrotativo_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
   vposinf cvp.razones.espositivoinformante%type;
   vposform cvp.razones.espositivoformulario%type;
BEGIN
  SELECT espositivoinformante, espositivoformulario INTO vposinf, vposform
    FROM  cvp.razones 
    WHERE razon=NEW.razon;   
    IF (vposinf='S' AND vposform='S') THEN
      UPDATE cvp.relpan SET periodoparapanelrotativo=new.periodo
      WHERE  panel=new.panel AND periodo=new.periodo ;
    END IF;
  RETURN NEW;
END;
$$;


--
-- Name: actualizar_tarea_encuestador_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.actualizar_tarea_encuestador_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
venc character varying(10);

BEGIN
  
 IF new.tarea is distinct from old.tarea  THEN
   SELECT encuestador INTO venc
      FROM cvp.tareas
      WHERE tarea=new.tarea;
   IF venc is not null and venc is distinct from old.encuestador and new.razon is null and new.ingresador is null and new.fechaingreso is null THEN
         new.encuestador= venc;
   END IF;
 END IF;
 RETURN NEW;

END;
$$;


--
-- Name: actualizarrubforprod(integer, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.actualizarrubforprod(mesperiododesde integer, mesperiodohasta integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
rrelvis record;
rrrelvis record;
Crelvis record;
nuevoformualrio integer;
listaprecios character varying;
mrazon integer;
Drelvis record;
cantreg integer;
maxmes integer;


BEGIN
IF cvp.ControlarRubForProd() = 0 THEN
	--Paso -1 Inhabilitar el trigger de relvis
	ALTER TABLE cvp.relvis DISABLE TRIGGER relvis_gen_trg;
  
	--Paso 0: Borrar los casos de formularios caducos con razon nula de periodos anteriores al 'a2011m04'
	--casos encontrados en testeo del 18/04/2011
	--DELETE FROM cvp.relvis 
	--  WHERE formulario in (SELECT formulario FROM cvp.tempformularioscaducos) and periodo < 'a2011m04' and razon is null;
	--no borro en forma global por el problema de mutacion
	DELETE FROM cvp.relvis WHERE periodo ='a2010m04' and informante = 271    and formulario= 87 and visita = 1 and razon is null ;
	DELETE FROM cvp.relvis WHERE periodo ='a2010m08' and informante = 760404 and formulario= 87 and visita = 1 and razon is null;
	DELETE FROM cvp.relvis WHERE periodo ='a2010m08' and informante = 760404 and formulario= 86 and visita = 1 and razon is null;
	DELETE FROM cvp.relvis WHERE periodo ='a2010m08' and informante = 760404 and formulario= 85 and visita = 1 and razon is null;
	DELETE FROM cvp.relvis WHERE periodo ='a2010m08' and informante = 760404 and formulario= 48 and visita = 1 and razon is null;

	 --Para control del paso 4 
	 DROP TABLE IF EXISTS cvp.tmprelvisconrazon_1;
	 CREATE TABLE cvp.tmprelvisconrazon_1 (
		periodo character varying(11) NOT NULL,
		informante integer NOT NULL,
		formulario integer NOT NULL,
		visita integer DEFAULT 1 NOT NULL,
		razon integer,
		CONSTRAINT "Visita mayor o igual que 1" CHECK ((visita >= 1))
	);
	ALTER TABLE cvp.tmprelvisconrazon_1 OWNER TO cvpowner;

	--Paso 1: Identificar los registros a borrar en relvis, los que tienen formularios caducos
	DROP TABLE IF EXISTS cvp.tmprelvis;
	CREATE TABLE cvp.tmprelvis (
		periodo character varying(11) NOT NULL,
		informante integer NOT NULL,
		formulario integer NOT NULL,
		panel integer NOT NULL,
		tarea integer NOT NULL,
		fechasalida date,
		fechaingreso date,
		ingresador character varying(250),
		razon integer,
		fechageneracion timestamp without time zone,
		visita integer DEFAULT 1 NOT NULL,
		ultimavisita integer DEFAULT 1 NOT NULL,
		modi_usu character varying(30),
		modi_fec timestamp without time zone,
		modi_ope character varying(1),
		comentarios character varying(1000),
		encuestador character varying(10),
		supervisor character varying(10),
		recepcionista character varying(10),
		periodo_1 character varying(11),
		visita_1 integer,
		informantereemplazante integer,
		PRIMARY KEY (periodo, informante, visita, formulario),
		CONSTRAINT "Visita mayor o igual que 1" CHECK ((visita >= 1))
	);
	ALTER TABLE cvp.tmprelvis OWNER TO cvpowner;
	INSERT INTO cvp.tmprelvis 
		SELECT v.* FROM cvp.relvis v inner join cvp.tempformularioscaducos c on v.formulario = c.formulario
		WHERE periodo >= 'a2011m04';

	--Paso 2: Insertar en relvis los registros correspondientes a los formularios nuevos, con razon -1 provisoriamente

	--por la FK de relvis a razones
	INSERT INTO cvp.razones (razon,nombrerazon,espositivoinformante,espositivoformulario,escierredefinitivoinf,escierredefinitivofor)
	VALUES (-1,'Razon ficticia para cambio For Rub Prod','N','N','N','N');
	--por la FK de relvis a formularios
	if MesPeriodoDesde = 4 THEN
		INSERT INTO cvp.formularios (formulario, nombreformulario, operativo, activo) 
		SELECT formulario, nombreformulario, 'C', 'S' FROM cvp.tempformularios;
    end if;
	--hay un ciclo por periodo (NO CICLO BASADO EN CURSOR) por el problema con la tabla mutante
	FOR v_mes in MesPeriodoDesde..MesPeriodoHasta
	  LOOP
			FOR rrelvis IN
				SELECT A.* 
				FROM			
				(SELECT v.periodo as periodo, v.informante as informante, r.formulario as formulario, max(v.panel) as panel,
				max(v.tarea) as tarea, max(v.fechasalida) as fechasalida, max(v.fechaingreso) as fechaingreso, max(v.ingresador) as ingresador,
				-1 as razon, max(v.fechageneracion) as fechageneracion, v.visita as visita, max(v.ultimavisita) as ultimavisita,
				-- los pone el trigger relvis_modi_trg
				--modi_usu character varying(30),
				--modi_fec timestamp without time zone,
				--modi_ope character varying(1),
				max(v.comentarios) as comentarios, max(v.encuestador) as encuestador, max(v.supervisor) as supervisor,
				max(v.recepcionista) as recepcionista
				-- los pone el trigger relvis_visita_anterior_trg
				--,periodo_1 character varying(11),
				--visita_1 integer, 
				  FROM cvp.tmprelvis v inner join cvp.informantes i on v.informante = i.informante 
									   inner join cvp.temprubforcompleta r on i.rubro = r.rubro
				  WHERE v.periodo = 'a2011m0'||comun.a_texto(v_mes)
				  GROUP BY v.periodo, v.informante, r.formulario, v.visita) as A
				  left join cvp.relvis s on A.periodo = s.periodo and A.informante = s.informante and
											A.visita = s.visita and A.formulario = s.formulario
				  WHERE s.periodo is null and s.informante is null and s.visita is null and s.formulario is null
				  ORDER BY A.periodo, A.informante, A.formulario, A.visita
				  --left join con relvis para que no intente insertar los que ya están
			LOOP
			  INSERT INTO cvp.relvis (periodo, informante, formulario, panel, tarea, fechasalida, fechaingreso, ingresador, razon,
									  fechageneracion, visita, ultimavisita, comentarios, encuestador, supervisor, recepcionista)
					VALUES (rrelvis.periodo, rrelvis.informante, rrelvis.formulario, rrelvis.panel, rrelvis.tarea, rrelvis.fechasalida,
					rrelvis.fechaingreso, rrelvis.ingresador, rrelvis.razon, rrelvis.fechageneracion, rrelvis.visita, 
					rrelvis.ultimavisita, rrelvis.comentarios, rrelvis.encuestador, rrelvis.supervisor, rrelvis.recepcionista);

			--Paso 3: Updatear el campo formulario de relpre
			   UPDATE cvp.relpre SET formulario = rrelvis.formulario 
				 WHERE periodo=rrelvis.periodo and informante = rrelvis.informante and visita = rrelvis.visita and 
				   (producto in (SELECT producto FROM cvp.tempforprod WHERE formulario = rrelvis.formulario)
					or producto in (SELECT producto FROM cvp.forprod WHERE formulario = rrelvis.formulario));
			   
			END LOOP;
	  END LOOP;

	 --Para correr el paso 4 
	  INSERT INTO cvp.tmprelvisconrazon_1 
	  SELECT periodo, informante, formulario, visita, razon
	  FROM cvp.relvis
	  WHERE razon = -1;
	  
	--Paso 4: Corregir relvis.razon insertada provisoriamente como -1 a valores que correspondan de acuerdo a los precios
	FOR v_mes in MesPeriodoDesde..MesPeriodoHasta
	  LOOP
			FOR Crelvis IN 
				SELECT v.periodo, v.informante, v.visita, v.formulario
				FROM cvp.tmprelvisconrazon_1 v
				WHERE --razon = -1 and 
				v.periodo = 'a2011m0'||comun.a_texto(v_mes)
			LOOP
			   --para poder setear la razon real, veo que pasa con los precios
			   SELECT count(*) INTO cantreg
			   FROM cvp.relpre
			   WHERE periodo = Crelvis.periodo and informante = Crelvis.informante and visita = Crelvis.visita
				  and formulario = Crelvis.formulario;
			   IF cantreg = 0 THEN --no hay registros de precios asociados
				   mrazon = null;
			   ELSE 
				   SELECT comun.concato(comun.a_texto(precio)) INTO listaprecios
					 FROM cvp.relpre p
					 WHERE p.periodo = Crelvis.periodo and p.informante = Crelvis.informante and p.visita = Crelvis.visita
						   and p.formulario = Crelvis.formulario;
					IF listaprecios = '' THEN  --todos los precios son null 
					   SELECT max(razon) INTO mrazon
						 FROM cvp.tmprelvis
						 WHERE periodo = Crelvis.periodo and informante = Crelvis.informante and visita = Crelvis.visita
							--el max seleccionará la razon negativa o positiva si hay alguna, si no seleccionará null
							   --and razon is not null
							   ;
					ELSE
					   mrazon = 1;
					END IF;
				END IF;
				UPDATE cvp.relvis SET razon = mrazon 
				  WHERE periodo= Crelvis.periodo and informante= Crelvis.informante and visita=Crelvis.visita and
						formulario = Crelvis.formulario;
			END LOOP;
	  END LOOP;
	--elimino la razón ficticia
	DELETE FROM cvp.razones WHERE razon = -1;

	--Paso 5: Eliminar en relvis los registros de los formularios que caducan
	FOR v_mes in MesPeriodoDesde..MesPeriodoHasta
	  LOOP
			FOR Drelvis IN
			  SELECT periodo, informante, visita, formulario
			  FROM cvp.tmprelvis
			  WHERE periodo = 'a2011m0'||comun.a_texto(v_mes)
			LOOP
			  --RAISE notice 'Borro periodo "%" informante "%" visita "%" formulario "%"', Drelvis.periodo, Drelvis.informante,Drelvis.visita, Drelvis.formulario;
			  DELETE FROM cvp.relvis 
			  WHERE informante = Drelvis.informante and visita = Drelvis.visita and
					formulario = Drelvis.formulario and periodo = 'a2011m0'||comun.a_texto(v_mes);
			END LOOP;
	  END LOOP;
    
	--select substr(max(periodo),7,2) into maxmes from cvp.relvis;
	
	maxmes = 7;
	IF MesPeriodoHasta = maxmes THEN --Si ejecuté el último periodo
		--raise notice 'Max Mes% MesPeriodoHasta %',maxmes,mesperiodohasta;
		--Paso 6:Copiar las nuevas relaciones Rubfor,forprod (hasta ahora en las correspondientes tablas temp) y forinf a las tablas "definitivas".
		INSERT INTO cvp.rubfor
		SELECT c.formulario, c.rubro 
		FROM cvp.temprubforcompleta c left join cvp.rubfor r on c.rubro=r.rubro and c.formulario = r.formulario
		WHERE r.formulario is null and r.rubro is null;

		INSERT INTO cvp.forprod
		SELECT formulario, producto
		FROM cvp.tempforprod;

		INSERT INTO cvp.forinf
		SELECT distinct r.formulario, r.informante
		FROM cvp.relvis r left join cvp.forinf f on r.formulario = f.formulario and r.informante = f.informante
		WHERE f.informante is null and f.formulario is null;
        
		--Paso 7: Eliminar de Formularios (y de sus asociados ForProd,RubFor y forinf) los formularios que caducan.
		DELETE FROM cvp.forprod 
		WHERE formulario IN (SELECT formulario FROM cvp.tempformularioscaducos);
		DELETE FROM cvp.rubfor 
		WHERE formulario IN (SELECT formulario FROM cvp.tempformularioscaducos);
		DELETE FROM cvp.forinf 
		WHERE formulario IN (SELECT formulario FROM cvp.tempformularioscaducos);
		ALTER TABLE cvp.tempformularioscaducos DROP CONSTRAINT tempformularioscaducos_formulario_fkey;
		DELETE FROM cvp.formularios 
		WHERE formulario IN (SELECT formulario FROM cvp.tempformularioscaducos);
		
    END IF;
	DROP TABLE IF EXISTS cvp.tmprelvis;
	DROP TABLE IF EXISTS cvp.tmprelvisconrazon_1;
  
	--PASO 8: Agregado despúes de haber visto el problema con los informantes de tipo Carrefour
	--Asignar formularios nuevos a informantes que no tienen asignado ningún formulario que cambie
	IF MesPeriodoHasta = maxmes THEN  --Si ejecuté el último periodo
		FOR rrrelvis IN
			SELECT A.* 
			FROM			
			(SELECT v.periodo as periodo, v.informante as informante, r.formulario as formulario, max(v.panel) as panel,
					max(v.tarea) as tarea, max(v.fechasalida) as fechasalida, max(v.fechaingreso) as fechaingreso, max(v.ingresador) as ingresador,
					--null as razon, en lugar de -1 as razon dejo que la razon se inserte como nulo, 
					max(v.fechageneracion) as fechageneracion, v.visita as visita, max(v.ultimavisita) as ultimavisita,
					-- los pone el trigger relvis_modi_trg
					--modi_usu character varying(30),
					--modi_fec timestamp without time zone,
					--modi_ope character varying(1),
					max(v.comentarios) as comentarios, max(v.encuestador) as encuestador, max(v.supervisor) as supervisor,
					max(v.recepcionista) as recepcionista
					-- los pone el trigger relvis_visita_anterior_trg
					--,periodo_1 character varying(11),
					--visita_1 integer, 
			  FROM cvp.relvis v -- en lugar de cvp.tmprelvis v   
						 inner join cvp.informantes i on v.informante = i.informante 
								   inner join cvp.temprubforcompleta r on i.rubro = r.rubro
								   inner join cvp.tmp_v_rubrosquecambian c on i.rubro = c.rubro
			  WHERE v.periodo = 'a2011m0'||comun.a_texto(MesPeriodoHasta)
			  GROUP BY v.periodo, v.informante, r.formulario, v.visita) as A
			  left join cvp.relvis s on A.periodo = s.periodo and A.informante = s.informante and
										A.visita = s.visita and A.formulario = s.formulario
			 WHERE s.periodo is null and s.informante is null and s.visita is null and s.formulario is null
			  ORDER BY A.periodo, A.informante, A.formulario, A.visita
			  --left join con relvis para que no intente insertar los que ya están
		LOOP
			INSERT INTO cvp.relvis (periodo, informante, formulario, panel, tarea, fechasalida, fechaingreso, ingresador, 
			--razon, 
			fechageneracion, visita, ultimavisita, comentarios, encuestador, supervisor, recepcionista)
			VALUES (rrrelvis.periodo, rrrelvis.informante, rrrelvis.formulario, rrrelvis.panel, rrrelvis.tarea, rrrelvis.fechasalida,
			rrrelvis.fechaingreso, rrrelvis.ingresador, --rrrelvis.razon, 
			rrrelvis.fechageneracion, rrrelvis.visita, 
			rrrelvis.ultimavisita, rrrelvis.comentarios, rrrelvis.encuestador, rrrelvis.supervisor, rrrelvis.recepcionista);
		END LOOP;
		
		--actualizo forinf por las recien incorporadas a relvis
		INSERT INTO cvp.forinf
		SELECT distinct r.formulario, r.informante
		FROM cvp.relvis r left join cvp.forinf f on r.formulario = f.formulario and r.informante = f.informante
		WHERE f.informante is null and f.formulario is null;

    END IF;
		
	--Paso 9: Habilitar el trigger de relvis que llama a generar_formulario
	ALTER TABLE cvp.relvis ENABLE TRIGGER relvis_gen_trg;
else
  raise exception 'El estado actual de la base no pasa los controles previos';
end if;

END;
$$;


--
-- Name: adaptarestructura(numeric, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.adaptarestructura(p_version_commit_desde numeric, p_sentencias text) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare 
  vVersionActual numeric;
begin
  if p_sentencias='primera_vez' then
    begin
      alter table parametros add column estructuraVersionCommit numeric;
      update parametros set estructuraVersionCommit=506 where unicoregistro;
    exception
      when duplicate_column then
        raise notice 'La columna estructuraVersionCommit ya habia sido creada con anterioridad';
    end;
  else
    select estructuraVersionCommit
      into vVersionActual
      from parametros
      where unicoRegistro;
    if p_version_commit_desde>vVersionActual then
      execute p_sentencias;
      update parametros set estructuraVersionCommit=p_version_commit_desde where unicoregistro;
    end if;
  end if;
end;
$$;


--
-- Name: agregar_atributos(text, integer, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.agregar_atributos(pproducto text, patributo integer, pvalor text, pperiododesde text, pperiodohasta text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vEmpezo  time:=clock_timestamp();
  vTermino time; 
  vnormalizable varchar(1);
BEGIN
perform VoyPor('Agregar_Atributos');
raise notice 'Atributos a agregar de producto % ', pProducto;

     INSERT INTO cvp.relatr (periodo, informante, visita, producto, observacion,  atributo, valor)
     SELECT                  p.periodo,p.informante,p.visita,p.producto,p.observacion,pAtributo, pValor
       FROM cvp.relpre p
       LEFT JOIN  cvp.relatr a ON  p.periodo=a.periodo AND p.informante=a.informante 
                            AND p.visita=a.visita AND p.producto=a.producto 
                            AND p.observacion=a.observacion 
                            AND a.atributo=pAtributo  
       WHERE a.periodo IS NULL AND p.producto=pProducto AND p.periodo BETWEEN pPeriododesde AND pPeriodohasta
       ORDER BY p.periodo, p.informante, p.visita, p.producto, p.observacion;
 
 
perform VoyPor('Agregar_Atributos');

vTermino:=clock_timestamp();
raise notice '%','Agregar_Atributos: Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
END;
$$;


--
-- Name: agrupaciones_fijas_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.agrupaciones_fijas_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare 
  v_agrupacion text;
  v_tipo text;
begin
  if tg_op='UPDATE' OR tg_op='DELETE' then
    v_agrupacion:=old.agrupacion;
    SELECT tipo_agrupacion INTO v_tipo
      FROM cvp.agrupaciones
      WHERE agrupacion=v_agrupacion;
    if v_tipo = 'GENERAL' then
      -- ok;
    else
        raise 'La agrupación % no puede recibir un % en la tabla %', v_agrupacion, tg_op, tg_table_name;
    end if;
  end if;
  if tg_op='UPDATE' OR tg_op='INSERT' then
    v_agrupacion:=new.agrupacion;
    if TG_TABLE_NAME='agrupaciones' then
      if new.tipo_agrupacion = 'GENERAL' then
        -- ok;
      else
        raise 'La agrupación % no puede recibir un % en la tabla %', v_agrupacion, tg_op, tg_table_name;
      end if;
    else
    SELECT tipo_agrupacion INTO v_tipo
      FROM cvp.agrupaciones
      WHERE agrupacion=v_agrupacion;
    if v_tipo = 'GENERAL' then
      -- ok;
    else
      raise 'La agrupación % no puede recibir un % en la tabla %', v_agrupacion, tg_op, tg_table_name;
    end if;
  end if;
  end if;
  if TG_OP='DELETE' then
     RETURN OLD;
  ELSE   
     RETURN NEW;
  END IF;
end;
$$;


--
-- Name: altamanualdeinformantes_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.altamanualdeinformantes_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
  IF NEW.AltaManualConfirmar is distinct from OLD.AltaManualConfirmar then
    DELETE FROM cvp.relvis rd USING
    (SELECT r.periodo, r.informante, r.formulario, r.visita
      FROM cvp.relvis r
         LEFT JOIN cvp.informantes i ON r.informante = i.informante
         LEFT JOIN cvp.periodos p ON r.periodo=p.periodo 
         LEFT JOIN (SELECT periodo, informante, formulario, max(visita) AS maxvisita
                    FROM cvp.relvis
                    WHERE panel = NEW.AltaManualPanel --Parámetro
                    GROUP BY  periodo, informante, formulario) v ON v.periodo=p.periodoanterior 
                                                                   AND v.informante = r.informante 
                                                                   AND v.formulario = r.formulario
         LEFT JOIN cvp.relvis r_1 ON r_1.periodo = p.periodoanterior
                                    AND r_1.informante = r.informante 
                                    AND r_1.formulario = r.formulario
                                    AND r_1.visita = maxvisita          
         LEFT JOIN cvp.razones z ON r_1.razon = z.razon
         LEFT JOIN (SELECT distinct periodo, informante, visita, formulario, 'S' hayprecios 
                      FROM cvp.relpre) pr ON pr.periodo = r.periodo
                        AND pr.informante = r.informante
                        AND pr.visita = r.visita 
                        AND pr.formulario = r.formulario 
       WHERE r.periodo = NEW.AltaManualPeriodo --Parámetro
         AND r.informante = NEW.informante --Parámetro 
         AND r.panel= NEW.AltaManualPanel --Parámetro
         AND r.tarea= NEW.AltaManualTarea --Parámetro
         --AltaManualPeriodo es el periodo actual
         AND coalesce(i.AltaManualPeriodo,'a0000m00') = NEW.AltaManualPeriodo --Parámetro
         --periodo anterior sin visita en relvis o visita anterior con cierre definitivo  
         AND (maxvisita IS NULL OR COALESCE(z.escierredefinitivoinf,'N')='S' OR COALESCE(z.escierredefinitivofor,'N')='S')
         -- periodo actual sin razon ingresada y sin precios
         AND r.razon IS NULL AND COALESCE(hayprecios,'N') = 'N') d
     WHERE rd.periodo = d.periodo and rd.informante = d.informante and rd.formulario = d.formulario and rd.visita = d.visita;

    insert into cvp.relvis (periodo, visita, informante, formulario, 
                            panel, tarea, FechaSalida, Encuestador, ultima_visita)
      select new.altamanualperiodo, 1, new.informante, fi.formulario, new.altamanualPanel, new.AltaManualTarea, 
             (select p.FechaSalida 
                from cvp.RelPan p
                where p.periodo=new.AltaManualPeriodo and p.panel=new.AltaManualPanel) as fecha,
             (select t.Encuestador
                from cvp.Tareas t
                where t.tarea=new.AltaManualTarea) as encuestador, true
                from cvp.ForInf fi
                where fi.informante=new.informante and fi.altamanualperiodo = new.altamanualperiodo
                AND NOT EXISTS (SELECT * FROM cvp.relvis v
                                 WHERE v.periodo = new.altamanualperiodo AND v.visita = 1 AND v.informante= new.informante 
                                 AND v.formulario=fi.formulario);
    IF NEW.estado = 'No usado' 
      THEN NEW.estado = 'Nuevo';
    END IF;
  end if;
  return new;
end;
$$;


--
-- Name: analyse_schema(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.analyse_schema(pschemaname text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vtab RECORD;
BEGIN
/*
select cvp.analyse_schema('comun');
select cvp.analyse_schema('cvp');
select cvp.analyse_schema('his');
select cvp.analyse_schema('ipcba');
*/
  for vtab in (select t.relname::varchar AS table_name
                FROM pg_class t
                JOIN pg_namespace n ON n.oid = t.relnamespace
                WHERE t.relkind = 'r' and n.nspname::varchar = pschemaName
                order by 1)
  LOOP
    RAISE NOTICE 'ANALYZE verbose %.%', pschemaName, vtab.table_name;
    EXECUTE 'ANALYZE verbose '||pschemaName||'.'||vtab.table_name;
  end loop;
end;
$$;


--
-- Name: aux_caldiv_corregir_cantincluidos(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.aux_caldiv_corregir_cantincluidos(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vr RECORD; 
BEGIN  
execute Cal_Mensajes(pPeriodo, pCalculo,'aux_CalDiv_corregir_cantIncuidos','comenzo');
  UPDATE cvp.caldiv a
    SET cantincluidos= b.incluidos
    FROM (select periodo, calculo, producto, division, COUNT(CASE WHEN antiguedadIncluido>0 THEN 1 ELSE NULL END) incluidos
            FROM cvp.calobs 
            WHERE periodo= pperiodo and calculo=pcalculo
               AND promobs>0
            GROUP BY periodo, calculo, producto, division
          ) as b
    WHERE a.periodo=pperiodo
        and a.calculo=pcalculo
        and a.periodo= b.periodo
        and a.calculo=b.calculo
        and a.producto=b.producto
        and a.division=b.division
        and a.cantincluidos is distinct from b.incluidos;

for vr in
  SELECT DISTINCT d.periodo, d.calculo, d.producto, d.profundidad, d.division
      FROM  CalDiv c join  CalDiv d ON c.periodo=d.periodo AND c.calculo=d.calculo AND c.producto=d.producto AND c.divisionpadre=d.division
      WHERE c.periodo=pperiodo 
        AND c.calculo=pcalculo
      ORDER BY d.periodo, d.calculo, d.producto, d.profundidad DESC, d.division
Loop
    UPDATE CalDiv t
        SET CantIncluidos= n_incluidos
        FROM ( SELECT SUM(a.CantIncluidos) n_incluidos
                 FROM  caldiv a  
                 WHERE a.periodo=pperiodo AND a.calculo=pcalculo AND a.producto=vr.producto AND a.divisionpadre=vr.division
              ) as p           
        WHERE t.periodo=pperiodo AND t.calculo=pcalculo AND t.producto=vr.producto AND t.division=vr.division 
             and t.cantincluidos is distinct from p.n_incluidos;
end loop;
execute Cal_Mensajes(pPeriodo, pCalculo,'aux_CalDiv_corregir_cantIncluidos','finalizo');   
END;
$$;


--
-- Name: blanquear_precios_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.blanquear_precios_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_precio double precision;
  v_cambio character varying(1);
BEGIN
if new.confirma is distinct from old.confirma then
    if new.confirma then 
        SELECT precio, cambio INTO v_precio, v_cambio
        FROM cvp.relpre
        WHERE periodo = new.periodo and producto = new.producto and observacion = new.observacion and informante = new.informante and visita = new.visita;
        UPDATE cvp.relpre SET 
        precio     = CASE WHEN v_precio is not null then null else v_precio END, 
        tipoprecio = 'M', 
        cambio     = CASE WHEN v_cambio is not null then null else v_cambio END
        WHERE periodo = new.periodo and producto = new.producto and observacion = new.observacion and informante = new.informante and visita = new.visita;
    else
        UPDATE cvp.relpre SET precio = precioblanqueado, tipoprecio = tipoprecioblanqueado, cambio = cambioblanqueado,
               comentariosrelpre = comentariosrelpreblanqueado
        FROM (SELECT precio precioblanqueado, tipoprecio tipoprecioblanqueado, cambio cambioblanqueado, comentariosrelpre comentariosrelpreblanqueado
              FROM cvp.blapre
              WHERE periodo=new.periodo AND producto=new.producto AND observacion=new.observacion AND informante=new.informante AND visita=new.visita) b 
        WHERE periodo=new.periodo AND producto=new.producto AND observacion=new.observacion AND informante=new.informante AND visita=new.visita;
    end if;
end if;
RETURN NEW;
END;
$$;


--
-- Name: borrar_precios_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.borrar_precios_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
vesultimavisita INTEGER;
BEGIN
if new.confirma is distinct from old.confirma AND new.confirma then
  --No tiene que haber otra visita mayor con la misma observacion
  SELECT 1 INTO vesultimavisita
   FROM cvp.relpre a
     WHERE  a.periodo=NEW.periodo AND a.informante=NEW.informante AND a.visita=NEW.visita 
       AND a.producto=NEW.producto AND a.observacion=NEW.observacion and a.ultima_visita; 
  IF vesultimavisita = 1 THEN
    DELETE FROM cvp.relatr
        WHERE periodo = new.periodo and producto = new.producto and observacion = new.observacion and informante = new.informante and visita = new.visita;
    DELETE FROM cvp.relpre
        WHERE periodo = new.periodo and producto = new.producto and observacion = new.observacion and informante = new.informante and visita = new.visita;
    UPDATE cvp.relpre set ultima_visita = true
        WHERE periodo = new.periodo and producto = new.producto and observacion = new.observacion and informante = new.informante and visita = new.visita-1;
  ELSE
    RAISE EXCEPTION 'Se quiere borrar una observación que no corresponde a la última visita: % per % inf % prod % obs %'
          ,new.visita,new.periodo,new.informante,new.producto,new.observacion;
  END IF;
end if;
RETURN NEW;
END;
$$;


--
-- Name: borrar_visita_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.borrar_visita_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
vhaymasvisitas INTEGER;
BEGIN
if new.confirma is distinct from old.confirma AND new.confirma then
  --No tiene que haber otra visita mayor
  SELECT distinct 1 INTO vhaymasvisitas
   FROM cvp.relvis a
     WHERE  a.periodo=NEW.periodo AND a.informante=NEW.informante AND a.visita>NEW.visita AND a.formulario=NEW.formulario; 
  IF vhaymasvisitas = 1 THEN
    RAISE EXCEPTION 'Se quiere borrar una visita que no es la última: per % inf % for % vis %',new.periodo,new.informante,new.formulario,new.visita;
  ELSE
    DELETE FROM cvp.relatr
        WHERE periodo = new.periodo and informante = new.informante and visita = new.visita and producto in 
        (SELECT producto FROM cvp.relpre WHERE periodo = new.periodo and informante = new.informante and visita = new.visita and formulario = new.formulario);
    DELETE FROM cvp.relpre
        WHERE periodo = new.periodo and informante = new.informante and visita = new.visita and formulario = new.formulario;
    UPDATE cvp.relpre set ultima_visita = true
        WHERE periodo = new.periodo and informante = new.informante and visita = new.visita-1 and formulario = new.formulario;
    DELETE FROM cvp.relvis
        WHERE periodo = new.periodo and informante = new.informante and visita = new.visita and formulario = new.formulario;
    UPDATE cvp.relvis set ultima_visita = true
        WHERE periodo = new.periodo and informante = new.informante and visita = new.visita-1 and formulario = new.formulario;
  END IF;
end if;
RETURN NEW;
END;
$$;


--
-- Name: cal_canasta_borrar(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_canasta_borrar(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
  vparavariosHogares BOOLEAN;
BEGIN 
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_canasta_borrar', pTipo:='comenzo');
DELETE FROM calGru
    WHERE periodo=pPeriodo AND calculo=pCalculo AND agrupacion=pAgrupacion;
    
SELECT paravarioshogares INTO vparavariosHogares
  FROM agrupaciones
  WHERE agrupacion=pAgrupacion  ;
IF vparaVariosHogares THEN  
    DELETE FROM calHogGru
      WHERE periodo=pPeriodo AND calculo=pCalculo AND agrupacion=pAgrupacion;
    DELETE FROM CalHogSubtotales
      WHERE periodo=pPeriodo AND calculo=pCalculo AND agrupacion=pAgrupacion;
END IF;
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_canasta_borrar', pTipo:='finalizo');

END;
$$;


--
-- Name: cal_canasta_valorizar(text, integer, text, boolean); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_canasta_valorizar(pperiodo text, pcalculo integer, pagrupacion text, pactualizarcalprod boolean) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
vindice double precision;
vparavariosHogares BOOLEAN;
BEGIN
SET search_path = cvp, comun, public;  --porque se corre suelto  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo,'Cal_Canasta_Valorizar', pTipo:='comenzo');  
SELECT indice INTO vindice
  FROM CalGru
  WHERE periodo=pPeriodo AND calculo=pCalculo AND agrupacion='Z' and nivel=0 ;
IF vindice is null THEN
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo,'Cal_Canasta_Valorizar', pTipo:='error', pMensaje:='No está calculado el Indice para el nivel Z0', pAgrupacion:=pAgrupacion);  
ELSE 
  SELECT paravarioshogares INTO vparavariosHogares
    FROM agrupaciones
    WHERE agrupacion=pAgrupacion; 
  EXECUTE Cal_Canasta_Borrar(pPeriodo, pCalculo, pAgrupacion); 
  IF pActualizarCalProd THEN
    EXECUTE CalProd_Valorizar(pPeriodo, pCalculo);
  END IF;  
  EXECUTE CalGru_Valorizar(pPeriodo, pCalculo, pAgrupacion);
  EXECUTE CalGru_Canasta_Variacion(pPeriodo, pCalculo, pAgrupacion);
  IF vparavariosHogares THEN
    EXECUTE CalHog_Valorizar(pPeriodo, pCalculo, pAgrupacion); 
    EXECUTE CalHog_Subtotalizar(pPeriodo, pCalculo, pAgrupacion); 
  END IF;
END IF;
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Canasta_Valorizar', pTipo:='finalizo');
END;
$$;


--
-- Name: cal_control(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_control(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
--  vEmpezo  time:=clock_timestamp();
--  vTermino time; 
  vPeriodo_1 Text;
  vCalculo_1 integer;
  vPeriodoexiste Text;
  vrecactual record;
  vrecanterior record;
  vreccampos record;
  vnivelant integer;
  vsumanivelant double precision;
  vEsPeriodobase Text;
  vgrupo_raiz Text;
BEGIN
--perform VoyPor('Cal_Control');
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='comenzo');

  SELECT c.periodoanterior, c.calculoanterior, c.EsPeriodobase, cd.grupo_raiz  
    INTO vPeriodo_1, vCalculo_1, vEsPeriodobase,  vgrupo_raiz
    FROM Calculos c, Calculos_def cd    
    WHERE c.periodo=pPeriodo AND c.calculo=pCalculo AND c.calculo= cd.calculo;
    
  IF vEsPeriodobase='N' THEN 
   --Debe existir el cálculo del periodo anterior
    SELECT periodo INTO vPeriodoexiste
      FROM Calculos
      WHERE periodo=vPeriodo_1 AND calculo=vCalculo_1;
    IF vPeriodoexiste IS NULL THEN
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', pmensaje:='No existe el calculo anterior ('||vPeriodo_1||', '|| vCalculo_1|| ')');
    END IF;
     --La canasta actual debe ser la misma que la usada en el cálculo anterior
    FOR vrecactual IN
      SELECT p.periodo,p.calculo,p.producto
        FROM CalProd p                               
        LEFT JOIN CalProd p0 ON p.producto=p0.producto AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1 
        JOIN Gru_Prod gp ON gp.grupo_padre=vgrupo_raiz AND p.producto=gp.producto
        WHERE p0.producto IS NULL  AND p.periodo=pPeriodo AND p.calculo=pCalculo
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. Hay un producto sobrante "%"',vrecactual.producto;        
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', pmensaje:='ERROR en el calculo. Hay un producto sobrante "'|| vrecactual.producto|| '"', 
                           pProducto:=vrecactual.producto);
    END LOOP;
    FOR vrecanterior IN
      SELECT p0.periodo,p0.calculo,p0.producto
        FROM CalProd p0 
        LEFT JOIN CalProd p ON p.producto=p0.producto  AND p.periodo=pPeriodo AND p.calculo=pCalculo 
        JOIN Gru_Prod gp ON gp.grupo_padre=vgrupo_raiz AND p0.producto=gp.producto
        WHERE p.producto IS NULL AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. Hay un producto faltante "%"',vrecanterior.producto;        
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', pmensaje:='ERROR en el calculo. Hay un producto faltante "'|| vrecanterior.producto|| '"', 
                           pProducto:=vrecanterior.producto);
    END LOOP;
    --Cal_Control existen registros y campos del t-1
    --Campos que difieren de un mes a otro
    FOR vreccampos IN
      SELECT p.periodo,p.calculo,p.producto,p.agrupacion,
             p.CantPorUnidCons,p0.CantPorUnidCons as CantPorUnidConsant
        FROM CalProdAgr p 
        JOIN CalProdAgr p0 ON p.producto=p0.producto AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1 AND p.agrupacion = p0.agrupacion      
        WHERE p.periodo=pPeriodo AND p.calculo=pCalculo
          AND p.CantPorUnidCons is distinct from p0.CantPorUnidCons

    LOOP
      IF vreccampos.CantPorUnidCons is distinct from vreccampos.CantPorUnidConsant THEN
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "cantporunidcons" en el producto "%"', vreccampos.producto;
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "cantporunidcons" en el producto "'||vreccampos.producto||'" y agrupacion "'||vreccampos.agrupacion||'"', 
            pProducto:=vreccampos.producto,pAgrupacion:=vreccampos.agrupacion);
      END IF;
    END LOOP;
    FOR vreccampos IN
      SELECT p.periodo,p.calculo,p.producto,
             p.UnidadMedidaPorUnidCons,p0.UnidadMedidaPorUnidCons as UnidadMedidaPorUnidConsant,
             p.PesoVolumenPorUnidad,p0.PesoVolumenPorUnidad as PesoVolumenPorUnidadant ,
             p.Cantidad,p0.Cantidad as Cantidadant, p.UnidadDeMedida,p0.UnidadDeMedida as UnidadDeMedidaant
        FROM CalProdAgr p 
        JOIN CalProdAgr p0 ON p.producto=p0.producto AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1 AND p0.agrupacion=p.agrupacion      
        WHERE p.periodo=pPeriodo AND p.calculo=pCalculo
          AND ( p.UnidadMedidaPorUnidCons is distinct from p0.UnidadMedidaPorUnidCons
          OR    p.PesoVolumenPorUnidad is distinct from p0.PesoVolumenPorUnidad
          OR    p.Cantidad is distinct from p0.Cantidad
          OR    p.UnidadDeMedida is distinct from p0.UnidadDeMedida)

    LOOP
      IF vreccampos.UnidadMedidaPorUnidCons is distinct from vreccampos.UnidadMedidaPorUnidConsant THEN
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "unidadmedidaporunidcons" en el producto "%"', vreccampos.producto;        
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "unidadmedidaporunidcons" en el producto "'||vreccampos.producto||'"', 
            pProducto:=vreccampos.producto);
      END IF;
      IF vreccampos.PesoVolumenPorUnidad is distinct from vreccampos.PesoVolumenPorUnidadant THEN
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "pesovolumenporunidad" en el producto "%"', vreccampos.producto;        
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "pesovolumenporunidad" en el producto "'||vreccampos.producto||'"', 
            pProducto:=vreccampos.producto);
      END IF;
      --van instrucciones que siguen faltarian casos de prueba 
      IF vreccampos.Cantidad  is distinct from vreccampos.Cantidadant THEN
        --Raise Notice 'Diferencia % y %',vreccampos.Cantidad,vreccampos.Cantidadant;
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "cantidad" en el producto "%", %, actual "%" anterior "%"', vreccampos.producto, pperiodo, vreccampos.Cantidad, vreccampos.Cantidadant;    
      END IF;
      IF vreccampos.UnidadDeMedida  is distinct from vreccampos.UnidadDeMedidaant THEN
        --Raise Notice 'Diferencia % y %',vreccampos.UnidadDeMedida,vreccampos.UnidadDeMedidaant;
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='log', 
            pmensaje:='Diferencia '||vreccampos.UnidadDeMedida||' y '||vreccampos.UnidadDeMedidaant);
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "unidadDeMedida" en el producto "%"', vreccampos.producto;
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "unidadDeMedida" en el producto "'||vreccampos.producto||'"', 
            pProducto:=vreccampos.producto);
      END IF; 
    END LOOP;
      --    
    FOR vreccampos IN 
      SELECT p.periodo,p.calculo,p.producto,p.PonderadorDiv,p.division,p0.ponderadorDiv as ponderadorDiv_ant
        FROM CalDiv p 
        FULL OUTER JOIN CalDiv p0 ON p.producto=p0.producto AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1 
                                  AND p.division=p0.division
        JOIN Gru_Prod gp ON gp.grupo_padre=vgrupo_raiz AND p.producto=gp.producto                          
        WHERE p.periodo=pPeriodo AND p.calculo=pCalculo
          AND ( p.ponderadorDiv is distinct from p0.ponderadorDiv)
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "ponderadordiv" en el producto "%" division "%" antes % ahora %', vreccampos.producto, vreccampos.division, vreccampos.ponderadorDiv_ant,vreccampos.ponderadorDiv;
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "ponderadordiv" en el producto "'||vreccampos.producto||'" division "'||vreccampos.division||'" antes '||vreccampos.ponderadorDiv_ant||' ahora '||vreccampos.ponderadorDiv, 
            pProducto:=vreccampos.producto, pDivision:=vreccampos.division);
    END LOOP;  
    --Campos que difieren de un mes a otro: tablas CalGru, CalHogGru
    --van instrucciones que siguen faltarian casos de prueba

    FOR vreccampos IN 
      SELECT p.periodo,p.calculo,p.grupo,p.GrupoPadre, p0.GrupoPadre as GrupoPadreant,
             p.Nivel, p0.Nivel as Nivelant,
             p.EsProducto, p0.EsProducto as EsProductoant,
             p.agrupacion
        FROM CalGru p 
        JOIN Agrupaciones a ON  a.agrupacion=p.agrupacion  --pk verificada
        JOIN Calculos_def cd ON p.calculo=cd.calculo       --pk verificada
        JOIN Calculos c ON p.periodo=c.periodo AND p.calculo=c.calculo   --pk verificada
        JOIN CalGru p0 ON p.agrupacion=p0.agrupacion AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1 
                          AND p.grupo=p0.grupo   --pk verificada                     
        WHERE p.periodo=pPeriodo AND p.calculo=pCalculo
          AND (p.agrupacion=cd.agrupacionprincipal or a.calcular_junto_grupo= cd.agrupacionPrincipal)
          AND ( p.Grupopadre is distinct from p0.GrupoPadre
          OR    p.Nivel is distinct from p0.Nivel
          OR    p.EsProducto is distinct from p0.EsProducto )
    LOOP
      IF vreccampos.GrupoPadre is distinct from vreccampos.GrupoPadreant THEN
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "GrupoPadre" en el grupo "%"', vreccampos.grupo;        
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "GrupoPadre" en el grupo "'||vreccampos.grupo||'"', 
            pGrupo:=vreccampos.grupo, pAgrupacion:=vreccampos.agrupacion);
      END IF;
      IF vreccampos.Nivel is distinct from vreccampos.Nivelant THEN
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "Nivel" en el grupo "%"', vreccampos.grupo;
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "Nivel" en el grupo "'||vreccampos.grupo||'"', 
            pGrupo:=vreccampos.grupo, pAgrupacion:=vreccampos.agrupacion);

      END IF;
      IF vreccampos.EsProducto is distinct from vreccampos.EsProductoant THEN
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "EsProducto" en el grupo "%"', vreccampos.grupo;
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "EsProducto" en el grupo "'||vreccampos.grupo||'"', 
            pGrupo:=vreccampos.grupo, pAgrupacion:=vreccampos.agrupacion);
      END IF;
    END LOOP;  
    FOR vreccampos IN 
      SELECT p.periodo,p.calculo,p.grupo,p.CoefHogGru, p.agrupacion, p.hogar
        FROM CalHogGru p 
        JOIN Agrupaciones a ON  a.agrupacion=p.agrupacion  --pk verificada
        JOIN Calculos_def cd ON p.calculo=cd.calculo --pk verificada
        JOIN Calculos c ON p.periodo=c.periodo AND p.calculo=c.calculo  --pk verificada
        JOIN CalHogGru p0 ON p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1 
                          AND p.hogar=p0.hogar AND p.agrupacion=p0.agrupacion 
                          AND p.grupo=p0.grupo --pk verificada
        WHERE p.periodo=pPeriodo AND p.calculo=pCalculo
          AND a.calcular_junto_grupo=cd.agrupacionprincipal
          AND ( p.coefhoggru is distinct from p0.coefhoggru)
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. No coincide el parametro "coefhoggru" en el grupo "%"', vreccampos.grupo;
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. No coincide el parametro "coefhoggru" en el grupo "'||vreccampos.grupo||'"  Hogar '|| vreccampos.hogar, 
            pGrupo:=vreccampos.grupo, pAgrupacion:=vreccampos.agrupacion);
    END LOOP; 

    --Cal_Control estructura mes actual Grupos 
    --Falta el grupo padre --cambiado
    FOR vreccampos IN 
      SELECT ca.grupo, ca.grupopadre, ca.agrupacion
        FROM CalGru ca
        WHERE ca.periodo=pPeriodo AND ca.calculo=pCalculo AND ca.nivel is distinct from 0 
          AND ca.grupopadre NOT IN ( SELECT cb.grupo
                                       FROM CalGru cb    -- pk verificada
                                       WHERE ca.grupopadre=cb.grupo AND ca.agrupacion=cb.agrupacion
                                         AND ca.periodo=cb.periodo AND ca.calculo=cb.calculo)
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. Falta el grupo "%" padre de  "%"', vreccampos.grupopadre, vreccampos.grupo;
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. Falta el grupo "'||vreccampos.grupopadre||'" padre de "'||vreccampos.grupo||'"', 
            pGrupo:=vreccampos.grupo, pAgrupacion:=vreccampos.agrupacion);
      
    END LOOP;
    --Los campos grupopadre deben ser prefijos de grupo
    FOR vreccampos IN 
      SELECT g.grupo, g.grupopadre
        FROM CalGru g, Calculos c, Calculos_def cd 
        WHERE ( (SUBSTR(g.grupo, 1, NIVEL+1) is distinct from g.grupopadre AND g.esproducto='N' AND g.nivel is distinct from 0 AND g.nivel is distinct from 1) 
           OR   (g.nivel =1 and SUBSTR(g.grupo,1,NIVEL) is distinct from g.grupopadre) )
          AND g.periodo=pPeriodo AND g.calculo=pCalculo AND g.periodo=c.periodo AND g.calculo=c.calculo
          AND g.calculo=cd.calculo AND g.agrupacion=cd.agrupacionprincipal
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. El campo grupopadre "%" no es prefijo del grupo "%"', vreccampos.grupopadre, vreccampos.grupo;
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. El campo grupopadre "'||vreccampos.grupopadre||'" no es prefijo del grupo "'||vreccampos.grupo||'"', 
            pGrupo:=vreccampos.grupo);
    END LOOP;
    --len(GrupoPadre)=len(Grupo) -1
    FOR vreccampos IN 
      SELECT g.grupo,g.grupopadre
        FROM CalGru g, Calculos c, Calculos_def cd 
        WHERE ( (length(g.grupopadre) is distinct from length(g.grupo)-1 AND g.esproducto='N'  AND g.nivel >1)
           OR   (length(g.grupopadre) is distinct from length(g.grupo)-2 AND g.esproducto='N'  AND g.nivel =1 ) )
          AND g.periodo=pPeriodo AND g.calculo=pCalculo AND g.periodo=c.periodo AND g.calculo=c.calculo 
          AND g.calculo=cd.calculo AND g.agrupacion=cd.agrupacionprincipal      
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. La longitud del campo grupopadre "%" debe ser igual a la longitud del grupo -1 "%"', vreccampos.grupopadre, vreccampos.grupo;
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. La longitud del campo grupopadre "'||vreccampos.grupopadre||'" debe ser igual a la longitud del grupo -1 "'||vreccampos.grupo||'"', 
            pGrupo:=vreccampos.grupo);
    END LOOP;
    --Nivel=len(grupo)-2
    FOR vreccampos IN 
      SELECT g.grupo,g.nivel
        FROM CalGru g, Calculos c, Calculos_def cd 
        WHERE g.nivel is distinct from length(g.grupo)-2  AND g.esproducto='N' AND g.nivel >0
          AND g.periodo=pPeriodo AND g.calculo=pCalculo AND g.periodo=c.periodo AND g.calculo=c.calculo 
          AND g.calculo=cd.calculo AND g.agrupacion=cd.agrupacionprincipal      
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. La longitud del campo nivel "%" debe ser igual a la longitud del grupo -2 "%"', vreccampos.nivel, vreccampos.grupo;
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. La longitud del campo nivel "'||vreccampos.nivel||'" debe ser igual a la longitud del grupo -1 "'||vreccampos.grupo||'"', 
            pGrupo:=vreccampos.grupo);
    END LOOP;
    --El ValorGru de Calgru del grupo padre debe ser mayor o igual a cada uno de sus hijos
    FOR vreccampos IN 
      SELECT ca.valorgru, ca.grupo,cb.grupo as grupohijo, cb.valorgru as valorgruhijo, cb.agrupacion
        FROM CalGru ca, Calculos c, CalGru cb, Calculos_def cd , Agrupaciones a
        WHERE ca.periodo=pPeriodo AND ca.calculo=pCalculo AND  ca.periodo=c.periodo AND ca.calculo=c.calculo --pk de c verificada
          AND cb.grupopadre=ca.grupo  AND ca.periodo=cb.periodo AND ca.calculo=cb.calculo AND ca.agrupacion=cb.agrupacion ----pk de ca verificada
          AND ca.valorgru < cb.valorgru
          AND ca.calculo=cd.calculo  -- pk verificada cd
          AND a.agrupacion= cb.agrupacion --pk verificada
          AND a.calcular_junto_grupo=cd.agrupacionPrincipal AND a.valoriza
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. El Valorgru(Calgru) del grupo padre "%"  Valorgru "%" debe ser mayor o igual a cada uno de sus hijos "%" valorgruhijo "%"', vreccampos.grupo, vreccampos.valorgru, vreccampos.grupohijo, vreccampos.valorgruhijo;
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. El Valorgru(Calgru) del grupo padre "'||vreccampos.grupo||'"  Valorgru "'||vreccampos.valorgru||'" debe ser mayor o igual a cada uno de sus hijos "'||vreccampos.grupohijo||'" valorgruhijo "'||vreccampos.valorgruhijo||'"', 
            pGrupo:=vreccampos.grupo, pAgrupacion:=vreccampos.agrupacion);
    END LOOP; 
  /*    
    --La suma de los valores agrupados por nivel debe ser igual 
    --Comentado porque no se cumple para la agrupación B
    FOR vreccampos IN 
      SELECT ca.nivel, sum(valorgru) as sumanivel, ca.agrupacion
        FROM CalGru ca,  Calculos c, Calculos_def cd , Agrupaciones a
        WHERE ca.periodo=pPeriodo AND ca.calculo=pCalculo AND  ca.periodo=c.periodo AND ca.calculo=c.calculo   --pk verificada de c                    
          AND ca.calculo=cd.calculo  --pk verificada cd
          AND a.agrupacion= ca.agrupacion --pk verificada
          AND a.calcular_junto_grupo=cd.agrupacionPrincipal and a.valoriza 
        GROUP BY ca.nivel, ca.agrupacion
        ORDER BY ca.agrupacion, ca.nivel    
    LOOP
      IF vreccampos.nivel= 0 THEN --inicializo
        vnivelant=vreccampos.nivel;
        vsumanivelant=vreccampos.sumanivel;
      END IF;
      IF round(vsumanivelant::numeric,9)=round(vreccampos.sumanivel::numeric,9) THEN
        vnivelant=vreccampos.nivel;  
        vsumanivelant=vreccampos.sumanivel;
      ELSE 
        --RAISE EXCEPTION 'ERROR en el calculo. La suma de los valores agrupados "%" del nivel "%" debe ser igual a la suma de los valores agrupados "%" del nivel ant "%"', vreccampos.sumanivel, vreccampos.nivel, vsumanivelant, vnivelant;
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pMensaje:='ERROR en el calculo. La suma de los valores agrupados "'||vreccampos.sumanivel||'" del nivel "'||vreccampos.nivel||'" debe ser igual a la suma de los valores agrupados "'||vsumanivelant||'" del nivel ant "'||vnivelant||'"',
            pAgrupacion:=vreccampos.agrupacion);
      END IF;  
    END LOOP;   
  */    
    --Completitud    
    --CalProdAgr 
    FOR vreccampos IN 
      SELECT p.periodo,p.calculo,p.producto, p.valorprod, p0.valorprod as valorprodant
        FROM CalProdAgr p 
          JOIN CalProdAgr p0 ON p.agrupacion = p0.agrupacion and p.producto=p0.producto AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1  --PK verificada
        WHERE p.periodo=pPeriodo AND p.calculo=pCalculo 
          AND ((p0.valorprod is null AND p.valorprod is not null) OR (p0.valorprod is not null AND p.valorprod is null)) 
    LOOP
      IF (vreccampos.valorprodant is null AND vreccampos.valorprod is not null) OR (vreccampos.valorprodant is not null AND vreccampos.valorprod is null) THEN
       -- RAISE EXCEPTION 'ERROR en el calculo. No coincide el valor de valorprod, en cuanto a nulidad: "%" en el producto "%"', vreccampos.valorprod, --vreccampos.producto; 
          EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
              pmensaje:='ERROR en el calculo. No coincide el valor de valorprod, en cuanto a nulidad: "' ||coalesce(vreccampos.valorprod::text,'nulo')|| '" en el producto "'|| vreccampos.producto ||'"', 
              pProducto:=vreccampos.producto);       
      END IF;
    END LOOP;
    --CalProd 
    FOR vreccampos IN 
      SELECT p.periodo, p.calculo, p.producto, p.promprod, p0.promprod as promprodant
        FROM CalProd p 
          JOIN CalProd p0 ON p.producto=p0.producto AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1  --PK verificada
        WHERE p.periodo=pPeriodo AND p.calculo=pCalculo 
          AND ((p0.promprod is null AND p.promprod is not null)  OR (p0.promprod is not null AND p.promprod is null))
    LOOP
      IF (vreccampos.promprodant is null AND vreccampos.promprod is not null)  OR (vreccampos.promprodant is not null AND vreccampos.promprod is null) THEN
        --RAISE EXCEPTION 'ERROR en el calculo. No coincide el valor de promprod, en cuanto a nulidad: "%" en el producto "%"', vreccampos.promprod , --vreccampos.producto; 
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
              pmensaje:='ERROR en el calculo. No coincide el valor de promprod, en cuanto a nulidad: "' ||coalesce(vreccampos.promprod::text,'nulo')|| '" en el producto "'|| vreccampos.producto ||'"', 
              pProducto:=vreccampos.producto);               
      END IF;
    END LOOP;
    --CalGru 
    FOR vreccampos IN 
    SELECT p.periodo,p.calculo,p.grupo, p.valorgru, p0.valorgru as valorgruant, a.agrupacion
      FROM CalGru p 
        JOIN Agrupaciones a ON  a.agrupacion=p.agrupacion  --pk verificada
        JOIN Calculos_def cd ON  cd.calculo=p.calculo  --pk verificada
        JOIN Calculos c ON p.periodo=c.periodo AND p.calculo=c.calculo    --pk verificada
        JOIN CalGru p0 ON p.grupo=p0.grupo AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1 AND p.agrupacion=p0.agrupacion  --pk verificada
      WHERE p.periodo=pPeriodo AND p.calculo=pCalculo 
           AND a.calcular_junto_grupo=cd.agrupacionprincipal AND a.valoriza
           AND ( (p0.valorGru is null AND p.valorGru is not null) OR (p0.valorGru is not null AND p.valorGru is null) ) 
    LOOP
      IF (vreccampos.valorgruant is null AND vreccampos.valorgru is not null) OR (vreccampos.valorgruant is not null AND vreccampos.valorgru is null) THEN
      --  RAISE EXCEPTION 'ERROR en el calculo. No coincide el valor de valorgru:, en cuanto a nulidad: "%" en el grupo "%"', vreccampos.valorgru, vreccampos.grupo;   
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
             pmensaje:='ERROR en el calculo. No coincide el valor de valorgru:, en cuanto a nulidad: "' ||coalesce(vreccampos.valorgru::text,'nulo')|| '" en el grupo "' || vreccampos.grupo||'"', 
             pGrupo:=vreccampos.grupo, pAgrupacion:=vreccampos.agrupacion);        
      END IF;
    END LOOP; 
                 
    --Cal_Control estructura mes actual Atributos

    FOR vreccampos IN 
    SELECT p.producto, p.atributo, p.valornormal, a.tipodato, a.escantidad, a.unidaddemedida 
      FROM Prodatr p, Atributos a, Calculos c, Gru_Prod gp
      WHERE p.atributo=a.atributo AND p.normalizable='S' AND c.periodo=pPeriodo AND c.calculo=pCalculo 
        AND ( tiponormalizacion='Normal' AND (p.valornormal IS NULL OR a.tipodato is distinct from 'N' OR a.escantidad is distinct from 'S' 
             OR unidaddemedida IS NULL) )
        AND gp.grupo_padre=vgrupo_raiz AND p.producto=gp.producto
    LOOP 
      IF vreccampos.tipodato is distinct from 'N' THEN
        --RAISE EXCEPTION 'ERROR en el calculo. El producto "%" normaliza con el atributo  "%" que no es numerico ', vreccampos.producto, vreccampos.atributo;        
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. El producto "'||vreccampos.producto||'" normaliza con el atributo  "'||vreccampos.atributo||'" que no es numerico ', 
            pProducto:=vreccampos.producto);
      END IF;         
      IF vreccampos.escantidad is distinct from 'S' THEN
        --RAISE EXCEPTION 'ERROR en el calculo. El producto "%" normaliza con el atributo  "%" que no es cantidad ', vreccampos.producto, vreccampos.atributo;            
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. El producto "'||vreccampos.producto||'" normaliza con el atributo  "'||vreccampos.atributo||'" que no es cantidad ', 
            pProducto:=vreccampos.producto);
      END IF;
      IF vreccampos.unidaddemedida IS NULL THEN
        --RAISE EXCEPTION 'ERROR en el calculo. El producto "%" normaliza con el atributo  "%" que no tiene unidad de medida especificada ', vreccampos.producto, vreccampos.atributo;        
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. El producto "'||vreccampos.producto||'" normaliza con el atributo  "'||vreccampos.atributo||'" que no tiene unidad de medida especificada ', 
            pProducto:=vreccampos.producto);
      END IF;
      IF vreccampos.valornormal IS NULL  THEN
        --RAISE EXCEPTION 'ERROR en el calculo. El producto "%" normaliza con el atributo  "%" que no tiene valor normal ', vreccampos.producto, vreccampos.atributo;            
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. El producto "'||vreccampos.producto||'" normaliza con el atributo  "'||vreccampos.atributo||'" que no tiene valor normal ', 
            pProducto:=vreccampos.producto);
      END IF;            
    END LOOP;

    --Cal_Control estructura mes actual Cal vs Fijas                

    DECLARE
      vProductoNoEsta text;
    BEGIN
      SELECT p.producto INTO vProductoNoEsta
        FROM Productos p LEFT JOIN CalProd c ON c.producto=p.producto AND c.Periodo=pPeriodo AND c.Calculo=pCalculo
        JOIN Gru_Prod gp ON gp.grupo_padre=vgrupo_raiz AND p.producto=gp.producto
        WHERE c.producto IS NULL
          AND pPeriodo >'a2012m06'
        ORDER BY p.producto
        LIMIT 1;
      IF vProductoNoEsta IS NOT NULL THEN
        --RAISE EXCEPTION 'ERROR en el calculo. El producto "%" no figura en los resultados', vProductoNoEsta;
        EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. El producto "'||vProductoNoEsta||'" no figura en los resultados', pProducto:=vProductoNoEsta);
      END IF;
    END;
  END IF;

    --Cal_Control control en CalObs

    FOR vrecactual IN
      SELECT distinct p.informante, p0.muestra as muestra_anterior, p.muestra as muestra_actual
        FROM CalObs p 
        JOIN CalObs p0 ON p.producto=p0.producto AND p0.periodo=vPeriodo_1 AND p0.calculo=vCalculo_1 AND p0.informante=p.informante AND p0.observacion=p.observacion         
        WHERE p0.muestra<>p.muestra AND p.periodo=pPeriodo AND p.calculo=pCalculo
    LOOP
      --RAISE EXCEPTION 'ERROR en el calculo. El informante "%" cambio de muestra (estaba en %, esta en %)',
      --       vrecactual.informante, vrecactual.muestra_anterior, vrecactual.muestra_actual;
      EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='error', 
            pmensaje:='ERROR en el calculo. El informante "'||vrecactual.informante||'" cambio de muestra (estaba en '||vrecactual.muestra_anterior||', esta en '||vrecactual.muestra_actual||')');
    END LOOP;
--perform VoyPor('Cal_Control');

--vTermino:=clock_timestamp();
--RAISE NOTICE '%','Cal_Control: Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Control', pTipo:='finalizo');

END;
$$;


--
-- Name: cal_copiar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_copiar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
  vAgrupPrincipal character varying(10) ;
  vParaVariosHogares boolean;
  vmaxnivel integer;
  pGrupo text; 
  
BEGIN 

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Copiar', pTipo:='comenzo');
--CalProdResp
INSERT INTO CalProdResp 
SELECT pperiodo, pcalculo, p.producto, gpr.responsable, 'N' as revisado
  FROM Productos p CROSS JOIN calculos c 
  --los responsables de cada producto
  LEFT JOIN grupos ghr ON ghr.agrupacion = 'F' and ghr.grupo = p.Producto
  LEFT JOIN grupos gpr ON ghr.agrupacion = gpr.agrupacion and ghr.grupopadre = gpr.grupo
  LEFT JOIN CalProdResp pe ON c.calculo = pe.calculo AND c.periodo = pe.periodo AND p.producto = pe.producto
WHERE c.periodo=pPeriodo AND c.calculo=pCalculo AND pe.periodo IS NULL AND p.nombreproducto NOT LIKE '%orrar%';

--CalProd
INSERT INTO CalProd(periodo, calculo, producto, 
                    CantPerAltaAuto, CantPerBajaAuto,
                    esExternoHabitual,ImputaCon)
  (SELECT           pPeriodo, pCalculo, p.producto, 
                    CantPerAltaAuto, CantPerBajaAuto,
                    esExternoHabitual, COALESCE(ImputaCon,g.GrupoPadre)                     
     FROM Productos p INNER JOIN Especificaciones e ON p.producto=e.producto AND e.especificacion=1
        INNER JOIN Calculos c ON pCalculo=c.calculo AND pPeriodo=c.Periodo
        INNER JOIN Calculos_def d ON pCalculo = d.calculo  
        INNER JOIN Grupos g ON g.Agrupacion=d.AgrupacionPrincipal AND g.Grupo=p.Producto
        INNER JOIN Gru_Prod gp ON g.agrupacion = gp.agrupacion AND d.grupo_raiz = gp.grupo_padre AND p.producto = gp.producto
  ); 
--CalProdAgr
EXECUTE cal_copiar_CalProdAgr(pPeriodo, pCalculo, null);
/*  
SELECT AgrupacionPrincipal INTO vAgrupPrincipal
  FROM calculos c inner join agrupaciones a on c.agrupacionprincipal=a.agrupacion
  WHERE periodo=pPeriodo AND calculo=pCalculo;  
*/
SELECT AgrupacionPrincipal, grupo_raiz INTO vAgrupPrincipal, pGrupo
  FROM calculos_def
  WHERE calculo=pCalculo;  

-- Para los comunes pone sus divisiones declaradas en ProdDiv  
INSERT INTO CalDiv(periodo , calculo , producto, Division, 
                   PonderadorDiv, UmbralPriImp, UmbralDescarte, UmbralBajaAuto,
                   profundidad, DivisionPadre, 
                   tipo_Promedio, raiz)
  (SELECT          pPeriodo, pCalculo, p.producto, CASE WHEN d.sindividir THEN '0' ELSE p.division END as Division, 
                   CASE WHEN d.sindividir THEN null ELSE p.PonderadorDiv END, 
                   CASE WHEN c.estimacion = 0 THEN p.UmbralPriImp ELSE e.UmbralPriImp END, 
                   CASE WHEN c.estimacion = 0 THEN p.UmbralDescarte ELSE e.UmbralDescarte END, 
                   CASE WHEN c.estimacion = 0 THEN p.UmbralBajaAuto ELSE e.UmbralBajaAuto END,
                   CASE WHEN d.sindividir THEN 0 ELSE 1 END, CASE WHEN d.sindividir THEN null ELSE '0' END AS DivisionPadre, 
                   null AS tipo_Promedio, d.sindividir
     FROM ProdDiv p
     JOIN Calculos c ON c.periodo = pPeriodo AND c.calculo = pCalculo --pk verificada
     JOIN Gru_Prod g ON p.producto = g.producto AND g.agrupacion = vAgrupPrincipal AND g.grupo_padre = pGrupo
     JOIN Divisiones d ON d.division=p.division
     LEFT JOIN ProdAtr pa ON pa.producto=p.producto AND pa.orden_calculo_especial is not null
     LEFT JOIN ProdDivEstimac e ON p.producto = e.producto and p.division = e.division and c.estimacion = e.estimacion --pk verificada
     WHERE pa.producto IS NULL
  ); 

  -- Para los comunes divididos pone la división 0 
INSERT INTO CalDiv(periodo , calculo , producto, Division, 
                   PonderadorDiv, UmbralPriImp, UmbralDescarte, UmbralBajaAuto,
                   profundidad, DivisionPadre, 
                   tipo_Promedio, raiz)
  (SELECT          pPeriodo, pCalculo, p.producto, '0', 
                   sum(PonderadorDiv), null, null, null,
                   0 , null AS DivisionPadre, 
                   'GeoPond', true
     FROM ProdDiv p
     JOIN Gru_Prod g ON p.producto = g.producto AND g.agrupacion = vAgrupPrincipal AND g.grupo_padre = pGrupo
     JOIN Divisiones d ON d.division=p.division
     LEFT JOIN ProdAtr pa ON pa.producto=p.producto AND pa.orden_calculo_especial is not null
     WHERE pa.producto IS NULL 
       AND d.sindividir IS NOT TRUE
     GROUP BY p.producto
  ); 

--CalGru
INSERT INTO CalGru(periodo, calculo, agrupacion, grupo, grupopadre, nivel, esproducto, ponderador)
  (SELECT         pPeriodo, pCalculo, g.agrupacion, g.grupo, g.grupoPadre, g.nivel, g.esProducto, g.ponderador
     FROM Grupos g
     JOIN Gru_Grupos gg ON g.grupo = gg.grupo AND g.agrupacion = gg.agrupacion AND g.agrupacion = vAgrupPrincipal AND gg.grupo_padre = pGrupo
--     WHERE agrupacion=vAgrupPrincipal
  );

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Copiar', pTipo:='finalizo');

 END;
$$;


--
-- Name: cal_copiar_calprodagr(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_copiar_calprodagr(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vr_prod RECORD; 
  vr_prodAtr RECORD;
  vvalor DOUBLE PRECISION;
  vunidad CHARACTER VARYING(41); 
BEGIN
  INSERT INTO CalProdAgr(periodo, calculo, producto, agrupacion, CantPorUnidCons,
                       Cantidad, UnidadDeMedida, PesoVolumenPorUnidad, UnidadMedidaPorUnidCons)
  (SELECT           pPeriodo, pCalculo, pa.producto, pa.agrupacion, pa.CantPorUnidCons,
                    e.Cantidad, e.UnidadDeMedida, PesoVolumenPorUnidad, UnidadMedidaPorUnidCons                     
     FROM Productos p INNER JOIN Especificaciones e ON p.producto=e.producto AND e.especificacion=1                    
        INNER JOIN ProdAgr pa on p.producto = pa.producto
        INNER JOIN agrupaciones a ON pa.agrupacion = a.agrupacion 
        INNER JOIN Calculos c ON pCalculo=c.calculo AND pPeriodo=c.Periodo
        INNER JOIN Calculos_def d ON pCalculo = d.calculo  
        INNER JOIN Grupos g ON g.Agrupacion=d.AgrupacionPrincipal AND g.Grupo=pa.Producto 
        INNER JOIN Gru_Prod gp ON g.agrupacion = gp.agrupacion AND d.grupo_raiz = gp.grupo_padre AND pa.producto = gp.producto
     WHERE a.valoriza
       AND (pAgrupacion is null or pAgrupacion=pa.agrupacion)
  ); 
  FOR vr_prod IN
    SELECT g.agrupacion, p.producto, count(pa.producto) AS cantnormalizables,
           min(a.unidaddemedida) AS minUnidad,max(a.unidaddemedida) as MaxUnidad, sum(pa.valorNormal) as sumValorNormal
      FROM Productos p 
         JOIN ProdAtr pa ON  pa.producto=p.producto and pa.normalizable='S' and pa.tiponormalizacion in ('Normal')
         JOIN atributos a ON a.atributo=pa.atributo
         INNER JOIN Calculos c ON pCalculo=c.calculo AND pPeriodo=c.Periodo
         INNER JOIN Calculos_def d ON pCalculo = d.calculo  
         INNER JOIN Grupos g ON g.Grupo=p.Producto
         INNER JOIN Gru_Prod gp ON g.agrupacion = gp.agrupacion AND coalesce(pAgrupacion, d.agrupacionprincipal)= gp.grupo_padre AND p.producto = gp.producto 
      WHERE (pAgrupacion is null or pAgrupacion=g.agrupacion)
      GROUP BY g.agrupacion, p.producto
  LOOP 
    IF vr_prod.cantNormalizables=1 THEN 
        UPDATE calprodAgr
           set Cantidad= vr_prod.sumValorNormal, UnidaddeMedida= vr_prod.minUnidad
           WHERE periodo=pPeriodo AND calculo= pCalculo AND producto= vr_prod.producto AND (pAgrupacion is null or pAgrupacion=agrupacion);     
    ELSE
        vvalor=1;
        vUnidad:=NULL;
        FOR vr_prodatr IN 
          SELECT pa.valorNormal, a.UnidadDeMedida
            FROM ProdAtr pa INNER JOIN Atributos a ON pa.atributo=a.atributo
            WHERE pa.producto= vr_prod.producto and pa.normalizable='S' and pa.tiponormalizacion in ('Normal')
        ORDER BY a.UnidadDeMedida, pa.prioridad, pa.atributo
        LOOP  
          vvalor:=vvalor * vr_prodatr.valorNormal;
          IF vr_prodatr.UnidadDeMedida<>'u' THEN
            IF vUnidad IS NULL THEN
                vUnidad:='';
            ELSE
                vUnidad:=vUnidad||'.';
            END IF;
            vUnidad:=vUnidad||vr_prodatr.UnidadDeMedida;
          END IF;
        END LOOP;
        IF vUnidad IS NULL THEN
        vUnidad:='u';
        END IF;
        UPDATE calprodAgr
           set Cantidad= vvalor, UnidaddeMedida= vunidad
           WHERE periodo=pPeriodo AND calculo= pCalculo AND producto= vr_prod.producto AND (pAgrupacion is null or pAgrupacion=agrupacion);
    END IF;           
  END LOOP;
END;
$$;


--
-- Name: cal_invalidar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_invalidar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
vvalido    character varying(1);
vrecsiguiente record;
BEGIN  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Invalidar', pTipo:='comenzo');
EXECUTE Cal_Invalidar_aux(pPeriodo, pCalculo);
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Cal_Invalidar', pTipo:='finalizo');
END;
$$;


--
-- Name: cal_invalidar_aux(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_invalidar_aux(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
vvalido    character varying(1);
vrecsiguiente record;
BEGIN  
 SELECT valido INTO vvalido
   FROM calculos 
   WHERE periodo=pPeriodo AND calculo=pCalculo ;
 IF vvalido='S' THEN 
   UPDATE calculos SET valido='N'
     WHERE periodo=pPeriodo AND calculo=pCalculo ;

   FOR vrecsiguiente in
     SELECT periodo, calculo 
       FROM calculos
       WHERE periodoanterior=pPeriodo AND calculoanterior=pCalculo
         AND (periodoanterior<>periodo OR calculoanterior<>calculo) 
   LOOP 
     EXECUTE Cal_Invalidar_aux(vrecsiguiente.periodo, vrecsiguiente.calculo);
   END LOOP;
 END IF;
END;
$$;


--
-- Name: cal_mensaje(text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_mensaje(pmensaje text, ptipo text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT $1; $_$;


--
-- Name: cal_mensajes(text, integer, text, text, text, text, text, integer, integer, integer, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_mensajes(pperiodo text, pcalculo integer, ppaso text, ptipo text, pmensaje text DEFAULT NULL::text, pproducto text DEFAULT NULL::text, pdivision text DEFAULT NULL::text, pinformante integer DEFAULT NULL::integer, pobservacion integer DEFAULT NULL::integer, pformulario integer DEFAULT NULL::integer, pgrupo text DEFAULT NULL::text, pagrupacion text DEFAULT NULL::text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
  vpaso Text;
  vfechahora timestamp without time zone;
  vtermino  timestamp without time zone:=clock_timestamp();
  vtipo Text;
  vMensaje text:=Cal_Mensaje(pMensaje,pTipo);
BEGIN 
  IF ptipo='finalizo' THEN
    SELECT tipo, fechahora INTO vtipo, vfechahora
      FROM cal_mensajes
      WHERE periodo=pPeriodo AND calculo=pCalculo AND paso=pPaso AND corrida=current_timestamp AND tipo='comenzo'
      ORDER BY fechaHora desc;  
    vMensaje:=pPaso||': '||vtipo||' '||cast(vfechahora as text)||' '||ptipo||' '||cast(vtermino as text)||' demoro '||(vtermino - vfechahora);
  END IF;  
  INSERT INTO Cal_Mensajes(periodo, calculo, paso, tipo, mensaje, producto,
                           division, informante, observacion, formulario, Grupo, Agrupacion, fechahora)
    VALUES                (pPeriodo, pCalculo, pPaso, pTipo, vMensaje, pProducto,
                           pDivision, pInformante, pObservacion, pFormulario, pGrupo, pAgrupacion, vtermino); 
  IF ptipo in ('log','finalizo') THEN
    Raise notice '%',vMensaje;
  END IF;  
  RETURN '';
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE 'ERROR EN Cal_mensajes con pPeriodo %, pCalculo %, pPaso %, pTipo %, pMensaje %, pProducto %, pDivision %, pInformante %, pObservacion %, pFormulario %, pGrupo %, pAgrupacion %,',pPeriodo, pCalculo, pPaso, pTipo, pMensaje, pProducto, pDivision, pInformante, pObservacion, pFormulario, pGrupo, pAgrupacion;
    RAISE;
END;
$$;


--
-- Name: cal_perbase_prop(integer, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cal_perbase_prop(pcalculo integer, pperiododesde text, pperiodohasta text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vPeriodo_Solo_para_CalMensajes varchar(11);
  vRec record;
BEGIN
  if pPeriodoDesde is not null then 
      vPeriodo_Solo_para_CalMensajes:=pPeriodoDesde;
  else
      SELECT min(periodo) INTO vPeriodo_Solo_para_CalMensajes
        FROM Calculos
        WHERE esperiodobase='S'
          AND calculo=pCalculo;
  end if;
  EXECUTE Cal_Mensajes(vPeriodo_Solo_para_CalMensajes, pCalculo, 'Cal_PerBase_Prop', pTipo:='comenzo'); 
  UPDATE CalProd cp
    SET indice=indice*100/suma_indices_del_producto*cantidad_meses
    FROM Calculos c,
        (SELECT b.producto, sum(b.indice) as suma_indices_del_producto, count(b.indice) as cantidad_meses
           FROM CalProd b INNER JOIN Calculos cb ON b.periodo=cb.periodo AND b.calculo=cb.calculo 
           WHERE cb.calculo=pCalculo AND b.periodo between pPeriodoDesde and pPeriodoHasta  
           GROUP BY b.producto) base
    WHERE c.calculo=pCalculo 
      AND cp.periodo=c.periodo AND cp.calculo=c.calculo
      AND base.producto=cp.producto;
  FOR vRec IN
    SELECT c.periodo, c.calculo
      FROM Calculos c
      WHERE c.calculo=pCalculo 
  LOOP
    EXECUTE CalGru_Indexar(vRec.periodo, vRec.calculo);
  END LOOP;
  EXECUTE Cal_Mensajes(vPeriodo_Solo_para_CalMensajes, pCalculo, 'Cal_PerBase_Prop', pTipo:='finalizo');
END;
$$;


--
-- Name: calbase_periodos(integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calbase_periodos(pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
DECLARE
vSql text;
vreglas RECORD;
agrega text;  
BEGIN   
  --EXECUTE Cal_Mensajes(null, pCalculo, 'CalBase_Periodos', pTipo:='comenzo');

  DELETE FROM calbase_prod WHERE calculo = pCalculo;
  DELETE FROM calbase_div  WHERE calculo = pCalculo;
  DELETE FROM calbase_obs  WHERE calculo = pCalculo;

  INSERT INTO CalBase_Prod (calculo, producto, mes_inicio)
    (SELECT PCalculo, producto, max(hasta)
      FROM     
          (SELECT mp.producto, mp.minperiodo, pb.hasta 
             FROM
               (SELECT producto, min(periodo) AS minperiodo
                   FROM relpre
                   WHERE precionormalizado is not null
                   GROUP BY producto) AS mp
               CROSS JOIN pb_calculos_reglas pb
               INNER JOIN Calculos_def cd ON cd.calculo=Pcalculo  --PK verificada
               INNER JOIN Gru_Prod gp ON cd.grupo_raiz = gp.grupo_padre AND mp.producto = gp.producto  --PK verificada
               WHERE pb.calculo = pCalculo AND pb.tipo_regla = 'mes inicio'
                 AND (mp.minperiodo >= hasta OR valor = 'ultima')) AS I
      GROUP BY PCalculo, producto);      
  INSERT INTO CalBase_Div  (calculo, producto, division, ultimo_mes_anterior_bajas)
    SELECT pCalculo, pd.producto, pd.division, 
       (select periodo 
          from (select periodo, row_number() over (order by periodo desc) as renglon
                  from RelPre p inner join Informantes i on p.informante=i.informante
                  where p.producto=c.producto
                    and p.precioNormalizado is not null
                    and (i.tipoInformante=pd.tipoInformante or pd.sinDividir)
                  group by periodo
                  having count(*)>umbralBajaAuto
               ) x
          where renglon=r.valor::integer+1
        ) 
    FROM pb_calculos_reglas r, 
         ProdDiv pd inner join CalBase_Prod c on c.producto=pd.producto
    WHERE c.calculo=pCalculo
      AND r.tipo_regla='meses baja';

vSql := $$INSERT INTO calbase_obs (calculo, producto, informante, observacion, periodo_aparicion, periodo_anterior_baja, incluido) 
            SELECT calculo, producto, informante, observacion, periodo_aparicion, 
                   case when max_periodo_anterior <= ultimo_mes_anterior_bajas then max_periodo_anterior else null end, incluido
              FROM
                (SELECT $$||pCalculo||$$ as calculo, r.producto, r.informante, r.observacion, ultimo_mes_anterior_bajas, 
                       min(case when Precionormalizado is null then null when n.producto is not null and r.periodo <= n.hasta_periodo then null else periodo end) as periodo_aparicion,
                       max(case when PrecioNormalizado is null then null when n.producto is not null and r.periodo <= n.hasta_periodo then null else periodo end) as max_periodo_anterior,                     
                   $$;

for vreglas in
   SELECT num_regla, desde, hasta, valor
     FROM pb_calculos_reglas
     WHERE calculo = Pcalculo AND tipo_regla = 'inclusion'
     ORDER BY num_regla     
Loop
   if vreglas.num_regla = 1 then
      agrega := '';
   else
      agrega := ' OR';
   end if;
   vSql := vSql ||agrega||$$ COUNT( CASE WHEN (n.producto IS null OR (n.producto IS NOT null AND r.periodo > n.hasta_periodo))  AND periodo BETWEEN '$$||vreglas.desde||$$' AND '$$||vreglas.hasta||$$' THEN precionormalizado ELSE NULL END) >= $$ ||vreglas.valor; 
end loop;

vsql := vSql||$$ as incluido 
        FROM RelPre r 
          INNER JOIN Informantes i ON r.informante=i.informante -- PK verificada
          INNER JOIN ProdDiv pd ON pd.producto=r.producto AND (pd.TipoInformante=i.TipoInformante OR pd.sinDividir) -- UK verificada
          LEFT JOIN CalBase_Div d ON d.calculo = $$||pCalculo||$$ AND r.producto = d.producto AND d.Division=pd.Division -- PK verificada
          INNER JOIN Calculos_def cd ON cd.calculo=d.calculo  --PK verificada
          INNER JOIN Gru_Prod gp ON cd.grupo_raiz = gp.grupo_padre AND r.producto = gp.producto  --PK verificada
          LEFT JOIN Novobs_Base n ON r.producto=n.producto AND r.informante=n.informante AND r.observacion=n.observacion  --PK verificada de Novobs_base
        GROUP BY r.producto, r.informante, r.observacion, ultimo_mes_anterior_bajas) as CBO;$$; 
EXECUTE vSql;

  --EXECUTE Cal_Mensajes(null, pCalculo, 'CalBase_Periodos', pTipo:='finalizo');
END;
$_$;


--
-- Name: calcular_grabarcalespinf(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcular_grabarcalespinf(p_actual text, p_calculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  --V091116
-- Grabación de los resultados de los que entran al cálculo
UPDATE calespinf
  SET promedioespinf=calespinftemp.promedioespinf,
      imputacionespinf=calespinftemp.imputacionespinf,
      ponderadorinf=calespinftemp.ponderadorinf
  FROM calespinftemp
  WHERE calespinftemp.periodo=calespinf.periodo
    AND calespinftemp.calculo=calespinf.calculo
    AND calespinftemp.producto=calespinf.producto
    AND calespinftemp.especificacion=calespinf.especificacion
    AND calespinftemp.informante=calespinf.informante
    AND calespinf.periodo=P_ACTUAL
    AND calespinf.calculo=P_CALCULO
    AND calespinftemp.periodo=P_ACTUAL
    AND calespinftemp.calculo=P_CALCULO;
-- Inserción de los nuevos
INSERT INTO calespinf
  SELECT periodo, calculo, producto, especificacion, informante, 
       tipoinformante, promedioespinf, 'A' AS imputacionespinf, antiguedadconprecio, 
       antiguedadsinprecio, ponderadorinf, 1 AS antiguedadexcluido
    FROM calespinftemp
    WHERE NOT EXISTS (SELECT calespinf.periodo
                        FROM calespinf
                        WHERE calespinf.periodo=calespinftemp.periodo
                          AND calespinf.calculo=calespinftemp.calculo
                          AND calespinf.producto=calespinftemp.producto
                          AND calespinf.especificacion=calespinftemp.especificacion
                          AND calespinf.informante=calespinftemp.informante
                          AND calespinf.periodo=P_ACTUAL
                          AND calespinf.calculo=P_CALCULO)
      AND calespinftemp.periodo=P_ACTUAL
      AND calespinftemp.calculo=P_CALCULO;
END;
$$;


--
-- Name: calcular_ponderadorimplicito_hacia_atras(integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcular_ponderadorimplicito_hacia_atras(pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 --vValorProd double precision;
 --vImpProd character varying(10);
 --vcalgru record;
 vNivel record;
 vPeriodo record;
 vAgrupacion text;
 vencadenadong double precision;
 vPer character varying(11);
BEGIN  

EXECUTE Cal_Mensajes('a2010m01', pCalculo, 'Calcular_ponderadorimplicito_hacia_atras', pTipo:='comenzo'); 
IF pAgrupacion IS NULL THEN  --agrupacion principal
    SELECT AgrupacionPrincipal INTO vAgrupacion
        FROM Calculos_def
        WHERE calculo=pCalculo;
ELSE
    vAgrupacion:=pAgrupacion;
END IF;

FOR vPeriodo IN
  SELECT periodo FROM periodos ORDER BY periodo
LOOP
	-- PRODUCTOS
	UPDATE CalGru cg SET ponderadorImplicito = cp.Indice * cg.ponderador
	  FROM CalProd cp
	  WHERE cg.periodo=vPeriodo.periodo AND cg.calculo=pCalculo AND cg.agrupacion=vAgrupacion AND cg.esproducto='S'
	    AND cg.periodo=cp.periodo AND cg.calculo=cp.calculo AND cg.grupo=cp.producto;
	FOR vNivel IN
	  SELECT cg.nivel, cg.agrupacion
	    FROM CalGru cg INNER JOIN Calculos c ON cg.periodo=c.periodo AND cg.calculo=c.calculo
	    WHERE cg.periodo=vPeriodo.periodo AND cg.calculo=pCalculo AND cg.agrupacion=vAgrupacion -- AND cg.esproducto='N'
	    GROUP BY cg.nivel, cg.agrupacion
	    ORDER BY cg.nivel DESC
	LOOP
	  -- GRUPOS
	  UPDATE CalGru cg SET ponderadorImplicito = encadenado
	    FROM (SELECT ch.GrupoPadre, sum(ch.Indice*ch.ponderador) AS encadenado
		    FROM CalGru ch
		    WHERE ch.periodo=vPeriodo.periodo AND ch.calculo=pCalculo  
		    GROUP BY ch.GrupoPadre) ch
	    WHERE cg.periodo=vPeriodo.periodo AND cg.calculo=pCalculo AND cg.agrupacion=vNivel.agrupacion AND cg.esproducto='N' 
	      AND cg.nivel=vNivel.nivel AND cg.grupo=ch.grupoPadre;
	END LOOP;

	SELECT sum(ng.Indice*ng.ponderador) INTO vencadenadong
	  FROM CalGru ng
	  WHERE ng.periodo=vPeriodo.periodo AND ng.calculo=pCalculo and ng.agrupacion = vagrupacion and ng.nivel = 1  
	  GROUP BY ng.GrupoPadre;

	UPDATE CalGru cg SET ponderadorimplicito = ponderadorimplicito/vencadenadong
	  WHERE cg.periodo=vPeriodo.periodo AND cg.calculo=pCalculo and cg.agrupacion = vagrupacion;
    vPer=vPeriodo.periodo;      
END LOOP;
EXECUTE Cal_Mensajes(vPer, pCalculo, 'Calcular_ponderadorimplicito_hacia_atras', pTipo:='finalizo');
END;
$$;


--
-- Name: calcular_precionormaliz_relatr_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcular_precionormaliz_relatr_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
existesemaforo INTEGER;
BEGIN

 SELECT 1 INTO existesemaforo
   FROM cvp.relpresemaforo a
      WHERE  a.periodo=NEW.periodo AND a.informante=NEW.informante AND a.visita=NEW.visita 
        AND  a.producto=NEW.producto AND a.observacion=NEW.observacion; 
 IF existesemaforo IS NULL THEN
   INSERT INTO cvp.relpresemaforo(periodo,informante,visita,producto,observacion)
     VALUES(NEW.periodo,NEW.informante,NEW.visita,NEW.producto, NEW.observacion);
     
    UPDATE cvp.relpre  
      SET precionormalizado=NULL
      WHERE periodo=NEW.periodo AND informante=NEW.informante 
        AND visita=NEW.visita AND producto=NEW.producto AND observacion=NEW.observacion;     
 END IF;
 RETURN NULL;
 
END;
$$;


--
-- Name: calcular_precionormaliz_relpre_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcular_precionormaliz_relpre_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
vprecioatr RECORD;
vcant INTEGER;
existesemaforo INTEGER;
vtope INTEGER;
vacumulador double precision ARRAY;
voperacion CHARACTER VARYING;
vitipo INTEGER;
vvalorpesos double precision;

BEGIN

 SELECT 1 INTO existesemaforo
   FROM cvp.relpresemaforo a
     WHERE  a.periodo=NEW.periodo AND a.informante=NEW.informante AND a.visita=NEW.visita 
       AND a.producto=NEW.producto AND a.observacion=NEW.observacion; 
 vtope=1;       
IF OLD.precio IS DISTINCT FROM NEW.precio  OR existesemaforo=1 THEN
  IF NEW.precio IS NOT NULL THEN
    
    SELECT count(*) into vcant --utilizo count porque hay productos con dos atributos normalizables
      FROM  cvp.prodatr pa     --ahora no se está consultado el valor de la variable vcant, sería solo informativa
      WHERE pa.producto=NEW.producto 
        AND pa.normalizable='S';
    
    vacumulador[vtope]=NEW.precio;
    FOR vprecioatr IN
      SELECT a.atributo,a.valor, pa.valornormal,pa.prioridad,pa.normalizable, pa.tiponormalizacion
        FROM  cvp.prodatr pa, cvp.relatr a 
        WHERE a.producto=pa.producto AND pa.atributo=a.atributo
          AND a.periodo=NEW.periodo AND a.informante=NEW.informante AND a.visita=NEW.visita AND a.producto=NEW.producto AND a.observacion=NEW.observacion 
          AND pa.normalizable='S'
       ORDER BY pa.prioridad
      LOOP
        vtope=vtope+1;
        IF vprecioatr.tiponormalizacion = 'Moneda' THEN
          SELECT valor_pesos INTO vvalorpesos
            FROM cvp.relmon
            WHERE periodo = NEW.periodo AND moneda=vprecioatr.valor;
          vprecioatr.valor = vvalorpesos::text;
        END IF;
        IF comun.es_numero(vprecioatr.valor) THEN
          vacumulador[vtope]=vprecioatr.valor::double precision; 
        ELSE
          vacumulador[vtope]=null;
          --vtope=vtope-1;
        END IF;          
        vitipo=1;
        voperacion=split_part(vprecioatr.tiponormalizacion,',',vitipo);
        --raise notice ' voperacion %', voperacion;
        WHILE voperacion IS DISTINCT FROM '' LOOP   
          CASE 
            WHEN  voperacion= '+'  THEN
              vacumulador[vtope-1]=vacumulador[vtope-1]+vacumulador[vtope];
              vtope=vtope -1;
            WHEN  voperacion='*'  THEN
              vacumulador[vtope-1]=vacumulador[vtope-1]*vacumulador[vtope];
              vtope=vtope -1; 
            WHEN  voperacion='1#'  THEN
              vtope=vtope +1;
              vacumulador[vtope]=1;
            WHEN  voperacion='2/'  THEN
              vacumulador[vtope]=vacumulador[vtope]/2;
            WHEN  voperacion='6/'  THEN
              vacumulador[vtope]=vacumulador[vtope]/6;   
            WHEN  voperacion='12/'  THEN
              vacumulador[vtope]=vacumulador[vtope]/12;   
            WHEN  voperacion='100/'  THEN
              vacumulador[vtope]=vacumulador[vtope]/100;   
            WHEN  voperacion='Normal' THEN
              IF comun.es_numero(vacumulador[vtope]::text) and vacumulador[vtope]<>0 THEN
                vacumulador[vtope-1]=vacumulador[vtope-1]/vacumulador[vtope]*vprecioatr.ValorNormal;
                vtope=vtope-1;               
              ELSE 
                vacumulador[vtope-1]=null;
                vtope=vtope-1;
              END IF;
            WHEN  voperacion='Moneda' THEN
                vacumulador[vtope-1]=vacumulador[vtope-1]*vacumulador[vtope]*vprecioatr.ValorNormal;
                vtope=vtope-1;
            WHEN voperacion='Bonificar' THEN
                --raise notice ' vacumulador[vtope-1] % vacumulador[vtope] % ', vacumulador[vtope-1], vacumulador[vtope];
                vacumulador[vtope-1]=vacumulador[vtope-1]*(100.0 - coalesce(vacumulador[vtope],0))/100.0;
                vtope=vtope-1;
            WHEN voperacion='#' THEN null;  
            ELSE
              RAISE EXCEPTION 'calcular_precionormaliz_relpre_trg(): Operador no considerado %', voperacion;
          END CASE;
          
          vitipo=vitipo+1;          
          voperacion=split_part(vprecioatr.tiponormalizacion,',',vitipo);          
        END LOOP;       
       
      END LOOP; 
      
  ELSE
    vacumulador[vtope]=null;
  END IF;
  IF vtope is distinct from 1 THEN
    RAISE EXCEPTION 'calcular_precionormaliz_relpre_trg(): ERROR, Queda informacion en el acumulador que no fue utilizada %', vtope;
  END IF;
  
  NEW.precionormalizado:=vacumulador[vtope];
  --raise notice 'Valorcalculado % ', vacumulador[vtope];
  IF existesemaforo=1 THEN
    DELETE FROM cvp.relpresemaforo a
      WHERE  a.periodo=NEW.periodo AND a.informante=NEW.informante AND a.visita=NEW.visita 
        AND a.producto=NEW.producto AND a.observacion=NEW.observacion;
  END IF; 
END IF;  
RETURN NEW;
 
END;
$$;


--
-- Name: calcular_puntos_tareas(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcular_puntos_tareas(pperiodo text, ppanel integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
vtarea RECORD;
pinicio text:='a2014m06'; --periodo para arrancar la nueva etapa, ya que el ecuestador 33 cambió de tarea respecto a las corridas anteriores
                          --y falla el cálculo de puntos si no se setea un período de arranque 
BEGIN   
   FOR vtarea in
      SELECT r.tarea, r.encuestador, extract( day from (c.fechasalida - coalesce(a.vfechaultsuperpaneltarea,a.vfechaprimerpaneltarea)::timestamp without time zone ))    
                                     + 10*extract(day from (c.fechasalida -coalesce(b.vfechaultsupencuestador,b.vfechaprimerencuestador)::timestamp without time zone))
                                     + 1
                                     as puntos 
        FROM cvp.reltar r 
          INNER JOIN cvp.relpan as c ON c.periodo= r.periodo AND c.panel=r.panel      
          LEFT JOIN (SELECT r.tarea, MAX(CASE WHEN r.realizada='S' THEN fechasalida ELSE NULL END) vfechaultsuperpaneltarea, min(fechasalida) vfechaprimerpaneltarea
                       FROM cvp.reltar r
                         JOIN cvp.relpan p  ON  r.periodo=p.periodo and r.panel=p.panel
                       WHERE  r.panel=ppanel          
                       GROUP BY r.tarea ) as a ON r.tarea=a.tarea
          LEFT JOIN (SELECT v.tarea, v.encuestador, max(CASE WHEN v.realizada='S' THEN p.fechasalida ELSE NULL END) vfechaultsupencuestador, MIN(p.fechasalida) vfechaprimerencuestador 
                        FROM cvp.reltar v   
                          JOIN cvp.relpan p ON p.periodo=v.periodo AND p.panel=v.panel --pk verificada
                          WHERE v.periodo > pinicio
                        GROUP by v.tarea, v.encuestador ) as b ON r.encuestador=b.encuestador 
        WHERE r.periodo=pperiodo AND r.panel=ppanel
   LOOP      
      UPDATE cvp.reltar SET puntos=vtarea.puntos
        WHERE periodo=pperiodo AND panel=ppanel AND tarea=vtarea.tarea;
   END LOOP; 
END;
$$;


--
-- Name: calcularotrasagrupaciones_haciaatras(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcularotrasagrupaciones_haciaatras() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodos RECORD;
  vEmpezo  time:=clock_timestamp();
  vTermino time; 
  curAgrup CURSOR FOR 
    SELECT  a.agrupacion 
      FROM agrupaciones a ;
  vagrup RECORD;  
BEGIN
  FOR vperiodos IN 
    SELECT c.periodo, c.calculo, cd.agrupacionPrincipal
      FROM calculos c inner join calculos_def cd on c.calculo=cd.calculo
      ORDER BY calculo,
        case when calculo =-1 then -1* to_number(substr(periodo,2,4)||substr(periodo,7,2),'999999') else to_number(substr(periodo,2,4)||substr(periodo,7,2),'999999') end LOOP
    for vagrup in curAgrup loop
      IF vagrup.agrupacion <> vperiodos.agrupacionPrincipal THEN
        raise notice 'Periodo % - Calculo% - Agrupacion % ', vperiodos.periodo, vperiodos.calculo, vagrup.agrupacion::character varying(1);      
        INSERT INTO CalGru(periodo, calculo, agrupacion, grupo, grupopadre, nivel, esproducto)
          (SELECT         vperiodos.periodo, vperiodos.Calculo, g.agrupacion, g.grupo, g.grupoPadre, g.nivel, g.esProducto
             FROM Grupos  g 
             WHERE g.agrupacion= vagrup.agrupacion
          ); 
        execute CalGru_Valorizar_Otro(vperiodos.periodo, vperiodos.Calculo, vagrup.agrupacion);
        execute CalGru_info_Otro(vperiodos.periodo, vperiodos.Calculo, vagrup.agrupacion);
      END IF;  
    end loop; 
  END LOOP;  
  vTermino:=clock_timestamp();
  raise notice '%','calcularOtrasAgrupaciones_haciaAtras: Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
 END;
$$;


--
-- Name: calcularprerep(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcularprerep(parperiodo text, parlote integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
PTopeHasta text;
v_relpre RECORD;
cantreg integer;
xproducto character varying(8);
periodo_inicio character varying(8);
ParPeriodoAnterior character varying(8);

PanelDesde integer;
PanelHasta integer;
PeriodoReferente character varying(8);

begin

periodo_inicio := 'a2010m08'; --considerar antiguedad a partir de agosto 2010

--Topes para los paneles según ParLote
CASE 
  WHEN ParLote = 1 THEN
	PanelDesde := 1;
	PanelHasta := 10;
  WHEN ParLote = 2 THEN
	PanelDesde := 11;
	PanelHasta := 20;
  END case;

--6 periodos para atrás de ParPeriodo
PTopeHasta := cvp.MoverPeriodos(ParPeriodo,-6);
--raise notice '6 periodos para atras del parametro  % ', PTopeHasta; 

--Maximo periodo con garantía de paneles generados para ParLote
SELECT max(periodo) INTO PeriodoReferente
  from cvp.Periodos
  where periodo <= ParPeriodo and cvp.TestPanelesGenerados(periodo,PanelDesde,PanelHasta) = 'S';

--raise notice 'periodo referencia  % ', PeriodoReferente; 

SELECT periodoanterior INTO ParPeriodoAnterior
	from cvp.periodos
	where periodo = PeriodoReferente;

--raise notice 'periodo anterior   % ', ParPeriodoAnterior; 

DROP TABLE IF EXISTS cvp.Temp_Candidatos;

CREATE TABLE cvp.Temp_Candidatos
(
 periodo character varying(11) NOT NULL,
 producto character varying(8) NOT NULL,
 informante integer,
 antiguedad integer,
 LimiteR integer,
 CantRep integer,
 PRIMARY KEY (periodo, producto, informante)
);
ALTER TABLE cvp.Temp_Candidatos OWNER TO cvpowner;
GRANT ALL ON TABLE cvp.Temp_Candidatos TO cvpowner;

insert into cvp.Temp_Candidatos
    select B.periodo, B.producto, B.informante, B.antiguedad, coalesce(C.limiteR,0) as limiteR, coalesce(CANT.cantR,0) as cantRep
    from
      (select A.periodo, A.informante, A.producto, A.antiguedad from
      (
      select v.periodo, v.informante, p.producto, 
	  min(cvp.DiferenciaEntrePeriodosParaR(periodo_inicio, v.informante, p.periodo, v.periodo)) antiguedad
        from cvp.relvis v 
          inner join cvp.relpre p on v.periodo > p.periodo 
                                   and v.informante = p.informante 
                                   and v.visita = p.visita 
                                   and v.formulario = p.formulario 
                                   and p.cambio = 'C'
          inner join cvp.productos d on p.producto = d.producto 
          where v.periodo = ParPeriodoAnterior --PeriodoReferente
		      and PanelDesde <= v.panel and v.panel <= PanelHasta
              and d.serepregunta
        group by v.periodo, v.informante, p.producto
        order by v.periodo, v.informante, p.producto      
      ) as A
      left join (select distinct informante, producto 
	              from cvp.PreRep PR 
				  where PTopeHasta <= periodo and periodo <= ParPeriodo) as PR on A.informante = PR.informante 
																				 and A.producto = PR.producto
          where
            PR.informante is null and PR.producto is null --No tiene R en los 6 peridos anteriores
          and A.antiguedad >= 6 --Hace 6 o más meses que no tiene C
      ) as B 
      left join (select r.periodo, r.producto, round(count(*)*0.05) as limiteR
                   from cvp.relvis v 
				   inner join cvp.relpre r on v.periodo = r.periodo 
											and v.informante = r.informante 
											and v.visita = r.visita
											and v.formulario = r.formulario
                   inner join cvp.tipopre t 
                     on r.tipoprecio = t.tipoprecio
                   where PanelDesde <= v.panel and v.panel <= PanelHasta and
						t.espositivo = 'S' and r.periodo = ParPeriodoAnterior 
                   group by r.periodo, r.producto
                   order by r.periodo, r.producto) as C 
          on B.producto = C.producto
      left join (select periodo, producto, count(*) as cantR
				   from cvp.prerep
				   where periodo = ParPeriodo
				   group by periodo, producto) as CANT 
				on --B.periodo = CANT.periodo and 
				B.producto = CANT.producto
      order by periodo, producto, informante;

DROP TABLE IF EXISTS cvp.Temp_Sorteo;

CREATE TABLE cvp.Temp_Sorteo
(
 periodo character varying(11) NOT NULL,
 producto character varying(8) NOT NULL,
 MinInfo integer,
 MaxInfo integer,
 num_sorteado double precision,
 PRIMARY KEY (periodo, producto)
);
ALTER TABLE cvp.Temp_Sorteo OWNER TO cvpowner;
GRANT ALL ON TABLE cvp.Temp_Sorteo TO cvpowner;

perform setseed(('0.'||replace(replace(ParPeriodo,'a',''),'m',''))::float8);

INSERT INTO cvp.Temp_Sorteo
  select periodo, producto, min(informante) MinInfo, max(informante) MaxInfo, 
    random()*(max(informante)-min(informante))+ min(informante) as num_sorteado  
    from cvp.Temp_Candidatos
	where cantRep < LimiteR
	group by periodo, producto;


xproducto := '        ';
FOR v_relpre IN
select C.periodo, C.informante, C.producto, C.LimiteR, C.CantRep
  from cvp.Temp_Candidatos C, cvp.Temp_Sorteo S
  where C.periodo = S.periodo and C.producto = S.producto and C.cantRep < C.LimiteR
  ORDER BY C.periodo, C.producto, C.antiguedad desc, C.informante<S.num_sorteado, C.informante
	LOOP
      --raise notice 'Voy por periodo % informante % producto % ', v_relpre.periodo, v_relpre.informante, v_relpre.producto; 
	  if xproducto <> v_relpre.producto then
	     cantreg := v_relpre.CantRep; 
	  end if;
	  if cantreg < v_relpre.limiteR then
		  --INSERT INTO cvp.PreRep (periodo, informante, producto) VALUES (v_relpre.periodo, v_relpre.informante, v_relpre.producto);
		  INSERT INTO cvp.PreRep (periodo, informante, producto) 
		    VALUES (ParPeriodo, v_relpre.informante, v_relpre.producto);
		  cantreg = cantreg +1;
      end if;
      xproducto := v_relpre.producto; 	  
	END LOOP;

DROP TABLE IF EXISTS cvp.Temp_Sorteo;
DROP TABLE IF EXISTS cvp.Temp_Candidatos;

end;

$$;


--
-- Name: calcularunperiodo(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcularunperiodo(pperiodo text, pcalculo integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
   vEmpezo     time;  
   vTermino    time;  
   vEmpezo1    time;  
   vTermino1   time;  
  vError text; -- periodo anterior del cálculo
  vPeriodo_1 text;
  vEsPeriodobase text;
  vRellenante_de integer;
  v_para_rellenado_de_base boolean;
  vagrup_valorizar_indexar record;
  
begin
  vEmpezo:=clock_timestamp(); 
  set search_path = cvp, comun, public;
  Raise Notice '--------------- COMIENZA UN CÁLCULO % %',pPeriodo,pCalculo;  
  select Calculo_ControlarAbierto(pPeriodo, pCalculo) into vError;
  select PeriodoAnterior, EsPeriodoBase, para_rellenado_de_base, Rellenante_de
    into vPeriodo_1, vEsPeriodobase, v_para_rellenado_de_base, vRellenante_de
    from calculos c inner join calculos_def cd on c.calculo=cd.calculo
    where c.periodo=pPeriodo
      and c.calculo=pCalculo;
  if vError is not null then
      return vError;
  end if;
  execute Calculo_Borrar(pPeriodo, pCalculo);
  execute Cal_Copiar(pPeriodo, pCalculo);
  execute CalObs_Promedio(pPeriodo, pCalculo);
  -- execute CalObs_ImpPerBase(pPeriodo, pCalculo); 
  execute CalObs_Rellenar(pPeriodo, pCalculo);
  execute CalDiv_Rellenar(pPeriodo, pCalculo); 
  execute CalDiv_Contar(pPeriodo, pCalculo); 
  if vEsPeriodobase='S' and vRellenante_de is not null then
    update CalProd set CantPerAltaAuto=0, CantPerBajaAuto=999 where periodo=pPeriodo and calculo=pCalculo;
    -- update CalDiv set UmbralPriImp=0, UmbralDescarte=0 where periodo=pPeriodo and calculo=pCalculo;
  end if;
  --if pPeriodo=vPeriodo_1 then
  --optimizar la ejecución de cálculos en forma concurrente
  vEmpezo1:=clock_timestamp(); 
  analyze cvp.CalObs;
  vTermino1:=clock_timestamp();  
  Raise Notice '%', 'analyze CalObs: EMPEZO '||cast(vEmpezo1 as text)||' TERMINO '||cast(vTermino1 as text)||' DEMORO '||(vTermino1 - vEmpezo1);  
  vEmpezo1:=clock_timestamp(); 
  analyze cvp.CalProd;
  vTermino1:=clock_timestamp();  
  Raise Notice '%', 'analyze CalProd: EMPEZO '||cast(vEmpezo1 as text)||' TERMINO '||cast(vTermino1 as text)||' DEMORO '||(vTermino1 - vEmpezo1);  
  vEmpezo1:=clock_timestamp(); 
  analyze cvp.CalDiv;
  vTermino1:=clock_timestamp();  
  Raise Notice '%', 'analyze CalDiv: EMPEZO '||cast(vEmpezo1 as text)||' TERMINO '||cast(vTermino1 as text)||' DEMORO '||(vTermino1 - vEmpezo1);  
  vEmpezo1:=clock_timestamp(); 
  analyze cvp.CalGru;
  vTermino1:=clock_timestamp();  
  Raise Notice '%', 'analyze CalGru: EMPEZO '||cast(vEmpezo1 as text)||' TERMINO '||cast(vTermino1 as text)||' DEMORO '||(vTermino1 - vEmpezo1);  
  --end if;
  if v_para_rellenado_de_base or pPeriodo=vPeriodo_1 then
      vEmpezo1:=clock_timestamp(); 
      update CalObs set AntiguedadIncluido=1, AntiguedadExcluido=null
          , AntiguedadConPrecio=CASE WHEN PromObs IS NULL THEN NULL ELSE 1 END
          , AntiguedadSinPrecio=CASE WHEN PromObs IS NULL THEN 1 ELSE NULL END
          , SinDatosEstacional=CASE WHEN PromObs IS NULL THEN 100 ELSE NULL END
        where periodo=pPeriodo and calculo=pCalculo;
      vTermino1:=clock_timestamp();  
      Raise Notice '%', 'update: EMPEZO '||cast(vEmpezo1 as text)||' TERMINO '||cast(vTermino1 as text)||' DEMORO '||(vTermino1 - vEmpezo1);  
  else
      execute CalObs_AltasyBajas(pPeriodo, pCalculo);
  end if;  
  execute CalDiv_PromPriImp(pPeriodo, pCalculo);
  execute CalDiv_Subir(pPeriodo, pCalculo);
  execute CalDiv_Bajar(pPeriodo, pCalculo);
  execute CalObs_PriImp(pPeriodo, pCalculo);
  execute CalDiv_PromSegImp(pPeriodo, pCalculo);
  execute CalDiv_Subir(pPeriodo, pCalculo);
  if pPeriodo=vPeriodo_1 and v_para_rellenado_de_base then
    update CalProd set indice=100, indicePrel=100 where calculo=pCalculo and periodo=pPeriodo;
    update CalGru set indice=100, indicePrel=100 where calculo=pCalculo and periodo=pPeriodo;
  else
    execute CalProd_Indexar(pPeriodo, pCalculo);
  end if;
  -- execute CalProd_Valorizar(pPeriodo, pCalculo);
  execute CalGru_SegImp(pPeriodo, pCalculo);
  execute CalObs_SegImp_PerBase(pPeriodo, pCalculo);
  execute CalObs_SegImp(pPeriodo, pCalculo);
  execute CalDiv_PromFinal(pPeriodo, pCalculo);
  execute CalDiv_Subir(pPeriodo, pCalculo);
  execute CalProd_Indexar(pPeriodo, pCalculo);
  -- execute CalProd_Valorizar(pPeriodo, pCalculo);
  execute CalGru_Indexar(pPeriodo, pCalculo);
  -- execute CalGru_Valorizar(pPeriodo, pCalculo);
  execute CalGru_Info(pPeriodo, pCalculo);
   
  if pCalculo=0 then
    for vagrup_valorizar_indexar IN
       select agrupacion, valoriza, case when agrupacion='A' then true else false end AS actcalprod
         from agrupaciones
         where calcular_junto_grupo='Z'
         order by agrupacion
    loop
      if vagrup_valorizar_indexar.valoriza then
        execute Cal_Canasta_Valorizar(pPeriodo, pCalculo, vagrup_valorizar_indexar.agrupacion, vagrup_valorizar_indexar.actcalprod); 
      else   
        execute CalGru_Indexar_Otro(pPeriodo, pCalculo, vagrup_valorizar_indexar.agrupacion); 
        execute CalGru_Info_Otro(pPeriodo, pCalculo, vagrup_valorizar_indexar.agrupacion); 
      end if;  
    end loop;    
  
  end if;
  execute Cal_Control(pPeriodo, pCalculo);
  
  vTermino:=clock_timestamp();  
  Raise Notice '%', 'CALCULO COMPLETO: EMPEZO '||cast(vEmpezo as text)||' TERMINO '||cast(vTermino as text)||' DEMORO '||(vTermino - vEmpezo);  
  return 'Calculo completo en '||(vTermino - vEmpezo);
end;
$$;


--
-- Name: calcularvarios(text, text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calcularvarios(p_periodo_desde text, p_periodo_hasta text, p_calculo integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vEmpezo time;
  vTermino time;
  mPeriodos RECORD;
BEGIN
  vEmpezo:=clock_timestamp();
  FOR mPeriodos IN 
    SELECT periodo
      FROM calculos
      WHERE periodo BETWEEN p_Periodo_Desde AND p_Periodo_Hasta 
        AND calculo=p_Calculo
      ORDER BY periodo
  LOOP
    PERFORM CalcularUnPeriodo(mPeriodos.Periodo, p_Calculo);
  END LOOP;
  vTermino:=clock_timestamp();
  RETURN 'Varios calculos Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
END;
$$;


--
-- Name: calculo_32_a2011m08(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calculo_32_a2011m08() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  vEmpezo     time;  
  vTermino    time;  
  vDummy text;
  vLoop integer:= 0;
  vPerCalculo record;
  cPerCalculo cursor for
    SELECT * 
      FROM Calculos 
      WHERE calculo between -3 and -2
      ORDER BY calculo, case when calculo=-2 then periodo else null end,
               case when calculo=-3 then periodo else null end desc;      
               
begin
  vEmpezo:=clock_timestamp(); 
  for vPerCalculo in cPerCalculo loop
    raise notice 'Borrando calculo % %',vPerCalculo.periodo,vPerCalculo.calculo;
    SELECT Calculo_Borrar(vPerCalculo.periodo,vPerCalculo.calculo)
      into vDummy;
    raise notice 'Termino de Borrar calculo % %',vPerCalculo.periodo,vPerCalculo.calculo;
  end loop;
  
  for vPerCalculo in cPerCalculo loop
    raise notice 'Comenzando calculo % %',vPerCalculo.periodo,vPerCalculo.calculo;
    select CalcularUnPeriodo(vPerCalculo.periodo,vPerCalculo.calculo)
      into vDummy;
    raise notice 'PAP PER BASE 1';
    vloop := vloop +1;
    if vloop>20 then
      exit ;
    end if;
   
  end loop;
  vTermino:=clock_timestamp();  
  Raise Notice '%', 'Calculo_32_a2011m08: EMPEZO '||cast(vEmpezo as text)||' TERMINO '||cast(vTermino as text)||' DEMORO '||(vTermino - vEmpezo);  
  return 'Periodo -3-2 a2011m08 finalizado'||(vTermino - vEmpezo);
end;
$$;


--
-- Name: calculo_borrar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calculo_borrar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vAbierto character varying(1);
BEGIN  

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Calculo_Borrar', pTipo:='comenzo');

--Controles: Verificar que calculo no este cerrado e invalidar los calculos siguientes   
SELECT abierto INTO vAbierto 
   FROM calculos
   WHERE periodo=pPeriodo AND calculo=pCalculo;
IF vAbierto='S' THEN
   EXECUTE Cal_Invalidar(pPeriodo,pCalculo);
ELSE
   EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Calculo_Borrar', ptipo:='error', 
                        pMensaje := 'ERROR no se puede recalcular porque el calculo esta cerrado');
   RAISE EXCEPTION 'ERROR no se puede recalcular porque el calculo esta cerrado';
END IF;
--
    
DELETE FROM CalObs     WHERE periodo=pPeriodo AND calculo=pCalculo;
DELETE FROM CalDiv     WHERE periodo=pPeriodo AND calculo=pCalculo;
DELETE FROM CalProd    WHERE periodo=pPeriodo AND calculo=pCalculo;
DELETE FROM CalProdAgr WHERE periodo=pPeriodo AND calculo=pCalculo;
DELETE FROM CalGru     WHERE periodo=pPeriodo AND calculo=pCalculo;
--DELETE FROM CalHogGru  WHERE periodo=pPeriodo AND calculo=pCalculo;
--DELETE FROM CalHogSubtotales  WHERE periodo=pPeriodo AND calculo=pCalculo;

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'Calculo_Borrar', ptipo:='finalizo');

END;
$$;


--
-- Name: calculo_controlarabierto(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calculo_controlarabierto(pperiodo text, pcalculo integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
begin
  return null;
end;
$$;


--
-- Name: caldiv_bajar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_bajar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vRec record;
BEGIN  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_Bajar', pTipo:='comenzo');
FOR vRec IN 
  SELECT DISTINCT profundidad
    FROM CalDiv cd
    WHERE cd.periodo=pPeriodo AND cd.calculo=pCalculo 
      AND (cd.PromPriImpAct IS NULL OR cd.PromPriImpAnt IS NULL)
    ORDER BY profundidad
LOOP
  UPDATE CalDiv cd
    SET PromPriImpAct=cdr.PromPriImpAct,
        PromPriImpAnt=cdr.PromPriImpAnt,
        ImpDiv=CASE WHEN cdr.ImpDiv like 'I%' THEN cdr.ImpDiv ELSE 'IO'||cdr.profundidad END
    FROM CalDiv cdr
    WHERE (cd.PromPriImpAct IS NULL OR cd.PromPriImpAnt IS NULL)
      AND cd.periodo=pPeriodo AND cd.calculo=pCalculo
      AND cdr.periodo=cd.periodo AND cdr.calculo=cd.calculo AND cdr.producto=cd.producto and cdr.division=cd.divisionPadre;
END LOOP;
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_Bajar', pTipo:='finalizo');   
END;
$$;


--
-- Name: caldiv_cantreales_subir(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_cantreales_subir(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vr RECORD; 
BEGIN  
SET search_path = cvp, comun, public;

for vr in
  SELECT DISTINCT d.periodo, d.calculo, d.producto, d.profundidad, d.division
      FROM  CalDiv c join  CalDiv d ON c.periodo=d.periodo AND c.calculo=d.calculo AND c.producto=d.producto AND c.divisionpadre=d.division
      WHERE c.periodo=pperiodo 
        AND c.calculo=pcalculo
      ORDER BY d.periodo, d.calculo, d.producto, d.profundidad DESC, d.division
Loop
    UPDATE CalDiv t
        SET CantRealesIncluidos= n_realesincluidos, CantRealesExcluidos= n_realesexcluidos 
        FROM (SELECT SUM(a.CantRealesIncluidos) n_realesincluidos, SUM(a.CantRealesExcluidos) n_realesexcluidos
              FROM  caldiv a  
              WHERE a.periodo=pperiodo AND a.calculo=pcalculo AND a.producto=vr.producto AND a.divisionpadre=vr.division
             ) as p           
        WHERE t.periodo=pperiodo AND t.calculo=pcalculo AND t.producto=vr.producto AND t.division=vr.division;
end loop;

END;
$$;


--
-- Name: caldiv_contar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_contar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN  
execute Cal_Mensajes(pPeriodo, pCalculo,'CalDiv_Contar','comenzo');  
UPDATE CalDiv p SET CantidadConPrecio=
      (SELECT count(*)                  
         FROM CalObs c  
         WHERE c.periodo=p.Periodo AND c.calculo=p.Calculo AND c.producto=p.producto AND c.division=p.division
           AND c.promobs is not null
       )
   WHERE p.periodo=pPeriodo AND p.calculo=pCalculo;   

UPDATE CalDiv p SET CantConPrecioParaCalEstac=
      (SELECT count(*)
         FROM CalObs c
           INNER JOIN calculos cal on c.periodo = cal.periodo and c.calculo = cal.calculo 
           INNER JOIN CalObs c0 on c0.periodo = cal.periodoanterior and c0.calculo = cal.calculoanterior and c.informante = c0.informante and c.producto =c0.producto 
             and c.observacion = c0.observacion
           INNER JOIN CalProd cpr on c.producto = cpr.producto and cpr.calculo=c.calculo and cpr.periodo = c.periodo         
         WHERE c.periodo=p.Periodo AND c.calculo=p.Calculo AND c.producto=p.producto AND c.division=p.division
           AND c.impobs in ('R', 'RA')
           AND (c0.antiguedadIncluido>0 OR c0.antiguedadConPrecio+1>=cpr.CantPerAltaAuto)
       )
   WHERE p.periodo=pPeriodo AND p.calculo=pCalculo;   

UPDATE CalDiv p SET CantPreciosTotales=
      (SELECT count(*)                  
         FROM CalObs c  
         WHERE c.periodo=p.Periodo AND c.calculo=p.Calculo AND c.producto=p.producto AND c.division=p.division
       )
   WHERE p.periodo=pPeriodo AND p.calculo=pCalculo;   
   
UPDATE CalDiv p SET CantPreciosIngresados=
      (SELECT count(*)                  
         FROM CalObs c  
         WHERE c.periodo=p.Periodo AND c.calculo=p.Calculo AND c.producto=p.producto AND c.division=p.division
           AND c.impobs <> 'B'
       )
   WHERE p.periodo=pPeriodo AND p.calculo=pCalculo;   

UPDATE CalDiv p SET CantPreciosTotales = 1, CantPreciosIngresados= 1
   WHERE p.periodo=pPeriodo AND p.calculo=pCalculo AND p.producto IN (SELECT producto FROM productos WHERE tipoexterno = 'D');   
   
execute Cal_Mensajes(pPeriodo, pCalculo,'CalDiv_Contar','finalizo');  
END;
$$;


--
-- Name: caldiv_impext(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_impext(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

BEGIN
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_ImpExt', pTipo:='comenzo');
  --Para poder calcular la variación antes de imputar por externos:
  UPDATE CalDiv SET promSinImpExt = PromDiv  
    WHERE periodo=pPeriodo AND calculo=pCalculo;
  UPDATE CalDiv p SET ImpDiv=CASE WHEN p.Promprel is null or p.impDiv ='IE' THEN 'IE' ELSE 'ES' END, 
                       PromPrel=n.PromedioExt,
                       PromDiv=n.PromedioExt,
                       PromedioRedondeado=round(n.PromedioExt::decimal,2)                       
    FROM NovProd n
    WHERE p.periodo=pPeriodo AND p.calculo=pCalculo
      AND p.periodo=n.periodo AND p.calculo=n.calculo AND p.producto=n.producto
      AND p.division='0'
  ;  
 
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_ImpExt', pTipo:='finalizo');
END;
$$;


--
-- Name: caldiv_promfinal(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_promfinal(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vcaltpinf record; 
  vProductosConPromObsCero text;
  vCantidadProductosConPromObsCero integer;
BEGIN  
 EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_PromFinal', pTipo:='comenzo');

SELECT string_agg(distinct producto, ',' order by producto), count(*)
    INTO vProductosConPromObsCero,vCantidadProductosConPromObsCero
    FROM CalObs 
    WHERE periodo=pPeriodo AND calculo=pCalculo 
      AND PromObs=0;
IF vCantidadProductosConPromObsCero>0 THEN
    --RAISE NOTICE 'Hay % observaciones con precio=0 para los productos %',vCantidadProductosConPromObsCero,vProductosConPromObsCero;
    EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_PromFinal', pTipo:='log',
    pMensaje :='Hay ' || vCantidadProductosConPromObsCero || ' observaciones con precio=0 para los productos ' || vProductosConPromObsCero);
    
END IF;
FOR vcaltpinf IN
  SELECT c.periodo, c.calculo, c.producto, c.division
         , EXP(AVG(LN(CASE WHEN c.AntiguedadIncluido>0 AND c.PromObs<>0 THEN c.PromObs ELSE NULL END))) as promobscal
         , MIN(CASE WHEN c.AntiguedadIncluido>0 AND c.PromObs IS NOT NULL THEN c.ImpObs ELSE NULL END) as impobscal
         , SUM(CASE WHEN c.AntiguedadIncluido>0 AND c.PromObs IS NOT NULL THEN 1 ELSE NULL END) as CantIncluidos
         , SUM(CASE WHEN c.AntiguedadIncluido=1 AND (co.antiguedadexcluido >0 OR co.periodo is null) THEN 1 ELSE NULL END) as CantAltas
         , SUM(CASE WHEN c.AntiguedadExcluido=1 AND co.antiguedadincluido >0 THEN 1 ELSE NULL END) as CantBajas
         , SUM(CASE WHEN c.AntiguedadExcluido>0 THEN 1 ELSE NULL END) as CantExcluidos
         , EXP(AVG(LN(CASE WHEN c.AntiguedadIncluido=1 AND (co.antiguedadexcluido >0 OR co.periodo is null) AND c.PromObs<>0 THEN c.PromObs ELSE NULL END))) as PromAltas
         , EXP(AVG(LN(CASE WHEN c.AntiguedadExcluido=1 AND co.antiguedadincluido >0 AND c.PromObs<>0 THEN c.PromObs ELSE NULL END))) as PromBajas
         , EXP(AVG(LN(CASE WHEN c.AntiguedadExcluido>0 AND c.PromObs<>0 THEN c.PromObs ELSE NULL END))) as PromExcluidos
         , SUM(CASE WHEN c.AntiguedadIncluido>0 AND c.PromObs>0 AND c.ImpObs not in ('R','RA') THEN 1 ELSE NULL END) as CantImputados
         , EXP(AVG(LN(CASE WHEN c.AntiguedadIncluido>0 AND c.PromObs>0 AND c.ImpObs not in ('R','RA') THEN c.promobs ELSE NULL END))) as PromImputados
         , EXP(AVG(LN(CASE WHEN c.promobs> 0 and c.antiguedadIncluido>0 and co.antiguedadIncluido>0 and r.periodo is null and c.impobs in ('R','RA') and co.impobs in ('R','RA') THEN c.PromObs ELSE NULL END))) as promRealesSinCambio 
         , EXP(AVG(LN(CASE WHEN c.promobs> 0 and c.antiguedadIncluido>0 and co.antiguedadIncluido>0 and r.periodo is null and c.impobs in ('R','RA') and co.impobs in ('R','RA') THEN co.PromObs ELSE NULL END))) as promRealesSinCambioAnt
         , EXP(AVG(LN(CASE WHEN c.promobs> 0 and c.antiguedadIncluido>0 and co.antiguedadIncluido>0 and n.periodo is null and n0.periodo is null THEN c.PromObs ELSE NULL END))) as promSinAltasBajas 
         , EXP(AVG(LN(CASE WHEN c.promobs> 0 and c.antiguedadIncluido>0 and co.antiguedadIncluido>0 and n.periodo is null and n0.periodo is null THEN co.PromObs ELSE NULL END))) as promSinAltasBajasAnt
    FROM CalObs c
    INNER JOIN cvp.calculos ca ON c.periodo=ca.periodo AND c.calculo=ca.calculo --PK verificada
    LEFT JOIN (SELECT DISTINCT periodo, producto, observacion, informante 
                 FROM cvp.relpre 
                 WHERE cambio = 'C' and periodo = pPeriodo) r ON c.periodo = r.periodo and c.producto = r.producto and c.observacion = r.observacion and c.informante = r.informante    
    LEFT JOIN cvp.calobs co ON  c.producto=co.producto AND c.observacion=co.observacion AND c.informante=co.informante AND co.periodo=ca.periodoanterior AND co.calculo=ca.calculoanterior --PK verificada
    LEFT JOIN cvp.novobs n ON c.periodo = n.periodo and c.calculo = n.calculo and c.producto = n.producto and c.informante = n.informante and c.observacion = n.observacion
    LEFT JOIN cvp.novobs n0 ON co.periodo = n0.periodo and co.calculo = n0.calculo and co.producto = n0.producto and co.informante = n0.informante and co.observacion = n0.observacion
    WHERE c.periodo=pPeriodo AND c.calculo=pCalculo  
    GROUP BY c.periodo, c.Calculo, c.producto, c.division    
LOOP
  UPDATE CalDiv p
    SET PromDiv=vcaltpinf.promobscal,
        ImpDiv=vcaltpinf.impobscal,
        CantIncluidos=vcaltpinf.CantIncluidos,
        CantAltas=vcaltpinf.CantAltas,
        CantBajas=vcaltpinf.CantBajas,
        PromAltas=vcaltpinf.PromAltas,
        PromBajas=vcaltpinf.PromBajas,
        CantImputados=vcaltpinf.CantImputados,
        CantExcluidos=vcaltpinf.CantExcluidos,
        PromExcluidos=vcaltpinf.PromExcluidos,
        PromImputados=vcaltpinf.PromImputados,
        PromedioRedondeado=round(vcaltpinf.promobscal::decimal,2),
        PromRealesSinCambio=vcaltpinf.promRealesSinCambio,
        PromRealesSinCambioAnt=vcaltpinf.promRealesSinCambioAnt,
        PromSinAltasBajas=vcaltpinf.promsinAltasBajas,
        PromsinAltasBajasAnt=vcaltpinf.promsinAltasBajasAnt
    WHERE p.periodo=pPeriodo AND p.calculo=pCalculo 
      AND p.producto=vcaltpinf.producto AND p.division=vcaltpinf.division;
END LOOP;

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_PromFinal', pTipo:='finalizo');   
 
END;
$$;


--
-- Name: caldiv_prompriimp(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_prompriimp(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vPeriodo_1 TEXT;
  vCalculo_1 Integer; 
  vrec RECORD;  
BEGIN  
execute Cal_Mensajes(pPeriodo, pCalculo,'CalDiv_PromPriImp','comenzo');
SELECT periodoAnterior, CalculoAnterior INTO vPeriodo_1, vCalculo_1
  FROM Calculos
  WHERE periodo=pPeriodo AND calculo=pCalculo;

for vrec in
  SELECT c.periodo, c.calculo, c.producto, c.division, 
           EXP(AVG(LN(case when c.antiguedadIncluido>0 AND c0.antiguedadIncluido>0 AND c.promObs>0 AND c0.promObs>0 then c.promObs  else null end))) as promAct, 
           EXP(AVG(LN(case when c.antiguedadIncluido>0 AND c0.antiguedadIncluido>0 AND c.promObs>0 AND c0.promObs>0 then c0.promObs else null end))) as promAnt, 
           COUNT(     case when c.antiguedadIncluido>0 AND c0.antiguedadIncluido>0 AND c.promObs>0 AND c0.promObs>0 then 1          else null end) as cant, 
           t.umbralPriImp,
           x.indice as indice, x_1.indice as indice_1
    FROM CalObs c JOIN CalObs c0 ON c.periodo=pPeriodo AND c.calculo=pCalculo
                                    AND c0.periodo=vPeriodo_1 AND c0.calculo=vCalculo_1
                                    AND c.producto=c0.producto
                                    AND c.informante=c0.informante
                                    AND c.observacion=c0.observacion
          JOIN CalDiv t   ON  t.periodo=c.periodo AND  t.calculo=c.calculo AND  t.producto=c.producto AND t.division=c.division
          JOIN CalProd cp ON cp.periodo=t.periodo AND cp.calculo=t.calculo AND cp.producto=t.producto 
          LEFT JOIN pb_externos x   ON x.producto=t.producto and x.periodo=t.periodo 
          LEFT JOIN pb_externos x_1 ON x_1.producto=t.producto and x_1.periodo=vPeriodo_1
    GROUP BY c.periodo, c.calculo, c.producto, c.division, t.umbralPriImp, x.indice, x_1.indice
Loop    
    UPDATE CalDiv t
      SET PromPriImpAct=CASE WHEN vrec.Calculo=-1 AND vrec.indice>0 AND vrec.indice_1>0 THEN vrec.indice   WHEN vrec.Cant >= vrec.umbralPriImp THEN vrec.PromAct WHEN vrec.indice>0 AND vrec.indice_1>0 THEN vrec.indice   ELSE null END,
          PromPriImpAnt=CASE WHEN vrec.Calculo=-1 AND vrec.indice>0 AND vrec.indice_1>0 THEN vrec.indice_1 WHEN vrec.Cant >= vrec.umbralPriImp THEN vrec.PromAnt WHEN vrec.indice>0 AND vrec.indice_1>0 THEN vrec.indice_1 ELSE null END, 
          ImpDiv=       CASE WHEN vrec.Calculo=-1 AND vrec.indice>0 AND vrec.indice_1>0 THEN 'BE'          WHEN vrec.Cant >= vrec.umbralPriImp THEN 'IP'         WHEN vrec.indice>0 AND vrec.indice_1>0 THEN 'BE'          ELSE null END,
          PromVar=      CASE WHEN vrec.PromAnt<>0 THEN vrec.PromAct/vrec.PromAnt*100-100 ELSE NULL END,
          CantPriImp = vrec.cant
    WHERE t.periodo=vrec.periodo AND t.calculo=vrec.calculo AND t.producto=vrec.producto AND t.division=vrec.division;
end loop;
execute Cal_Mensajes(pPeriodo, pCalculo,'CalDiv_PromPriImp','finalizo');   
 
END;
$$;


--
-- Name: caldiv_promsegimp(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_promsegimp(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vrec RECORD;
  vpromPrel DOUBLE PRECISION;
  vmarca VARCHAR(10);
  vCant INTEGER;
  vCantRealesIncluidos INTEGER;
  vCantRealesExcluidos INTEGER; 
  vpromRealesIncluidos DOUBLE PRECISION;
  vpromRealesExcluidos DOUBLE PRECISION;

  BEGIN

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_PromSegImp', pTipo:='comenzo'); 
FOR vrec IN
    SELECT t.periodo,t.calculo, t.producto, t.division, t.PromPriImpAct
      FROM CalDiv t
      WHERE t.periodo=pPeriodo AND t.calculo=pCalculo
LOOP
    SELECT EXP(AVG(LN(CASE WHEN antiguedadIncluido>0 THEN PromObs ELSE NULL END))), 
           MIN(       CASE WHEN antiguedadIncluido>0 THEN ImpObs  ELSE NULL END), 
           count(     CASE WHEN antiguedadIncluido>0 THEN 1 ELSE NULL END),
           count(CASE WHEN ImpObs IN ('R','RA') AND antiguedadIncluido>0 THEN 1 ELSE NULL END),
           count(CASE WHEN ImpObs IN ('R','RA') AND antiguedadIncluido IS NULL THEN 1 ELSE NULL END),
           EXP(AVG(LN(CASE WHEN ImpObs IN ('R','RA') AND antiguedadIncluido>0 THEN PromObs ELSE NULL END))),
           EXP(AVG(LN(CASE WHEN ImpObs IN ('R','RA') AND antiguedadIncluido IS NULL THEN PromObs ELSE NULL END)))
      INTO vpromPrel, vmarca, vCant, vCantRealesIncluidos, vCantRealesExcluidos, vpromRealesIncluidos, vpromRealesExcluidos
      FROM CalObs
      WHERE periodo=vrec.periodo AND calculo=vrec.calculo
        AND producto=vrec.producto AND division=vrec.division
        AND promObs>0;
    IF vrec.PromPriImpAct IS NULL THEN
       vPromPrel:=null;
       vmarca:='IG';
    END IF;
    UPDATE CalDiv
        SET PromPrel=vPromPrel,
             ImpDiv=vmarca,
             CantIncluidos=vCant,
             CantRealesIncluidos=vCantRealesIncluidos,
             CantRealesExcluidos=vCantRealesExcluidos,
             promRealesIncluidos=vpromRealesIncluidos,
             promRealesExcluidos=vpromRealesExcluidos
      WHERE periodo=pPeriodo AND calculo=pCalculo AND producto=vrec.producto AND division= vrec.division;
end loop;
/*
UPDATE CalDiv cd
    SET PromPrel=ot.PromPrel*cd0mt.PromDiv/cd0ot.PromDiv,
        ImpDiv='IPOT'
    FROM Calculos c   
       , CalDiv cd0mt  -- Mismo tipo mes anterior
       , Divisiones d
       , CalDiv cd0ot -- Otro tipo mes anterior
       , CalDiv ot    -- Otro tipo mes actual 
    WHERE cd.periodo=pPeriodo and cd.calculo=pCalculo -- estoy en el periodo actual
        AND cd.PromPrel is null -- Los que no pude imputar por primera imputación del mismo tipo
        AND c.calculo=cd.calculo AND c.periodo=cd.periodo
        AND cd0mt.periodo=c.periodoAnterior AND cd0mt.calculo=c.calculoAnterior AND cd0mt.producto=cd.producto AND cd0mt.division=cd.division
        AND d.division=cd.division 
        AND cd0ot.periodo=cd0mt.periodo AND cd0ot.calculo=cd0mt.calculo AND cd0ot.producto=cd0mt.producto AND cd0ot.division=d.otraDivision   
        AND ot.calculo=cd.calculo AND ot.periodo=cd.periodo AND ot.producto=cd.producto AND ot.division=d.OtraDivision
        AND cd0ot.PromDiv>0 AND ot.PromPrel>0 -- Filtro de factibilidad
        ;   
*/
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalDiv_PromSegImp', pTipo:='finalizo');

END;
$$;


--
-- Name: caldiv_rellenar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_rellenar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vrec Record;
  vdivexiste boolean:=false;
  vdivision Text;
  vpadre Text;
  vponderadoratr Double precision;
BEGIN

EXECUTE Cal_Mensajes(pPeriodo, pCalculo,'CalDiv_Rellenar','comenzo');

FOR vrec IN
   SELECT  a.periodo, a.calculo, a.producto, a.division, max(orden_calculo_especial) maxorden
     FROM Calobs a
     JOIN Prodatr p ON a.producto=p.producto 
     WHERE a.periodo=pPeriodo AND a.calculo=pCalculo 
       AND p.orden_calculo_especial IS NOT NULL
       GROUP BY a.periodo, a.calculo, a.producto, a.division
       ORDER BY a.periodo, a.calculo, a.producto, a.division DESC
LOOP
  vPadre:=vrec.division; -- En el primer renglón del ciclo vPadre es el padre de la iteración anterior o sea la división actual
  FOR i IN REVERSE vrec.maxorden..0 LOOP
    vDivExiste:=false;  
    vDivision:=vPadre;  
    vPadre:=coalesce(sin_el_ultimo(vDivision,'~'),'0');
    IF i IS DISTINCT FROM 0 THEN  
      SELECT ponderadoratr INTO vponderadoratr
        FROM Valvalatr v 
        JOIN Prodatr p ON v.producto=p.producto AND v.atributo=p.atributo
        WHERE v.producto=vrec.producto AND v.valor=split_part(vdivision,'~',i);
    ELSE
      vponderadoratr:=null; 
      vdivision:='0';
      vPadre:=null;
    END IF; 
    SELECT true INTO vdivexiste
      FROM CalDiv c
      WHERE c.periodo=pPeriodo AND c.calculo=pCalculo AND c.producto=vrec.producto AND c.division=vDivision;
    IF vdivexiste IS NOT TRUE THEN
      INSERT INTO CalDiv(periodo, calculo, producto, division, profundidad, divisionPadre, PonderadorDiv, raiz)
        VALUES          (vrec.periodo, vrec.calculo, vrec.producto, vdivision, i, vpadre, vponderadoratr, nullif(i=0,false));
    END IF;
  END LOOP;
  FOR i IN 1..vrec.maxorden LOOP
    UPDATE CalDiv c SET tipo_promedio=p.tipo_promedio
      FROM Prodatr p
      WHERE c.periodo=pPeriodo AND c.calculo=pCalculo AND c.producto=p.producto
        AND c.producto=vrec.producto AND p.orden_calculo_especial=i AND c.profundidad=i-1;
  END LOOP; 
  UPDATE CalDiv c
    SET UmbralPriImp  = CASE WHEN l.estimacion = 0 THEN p.UmbralPriImp   ELSE e.UmbralPriImp END,
        UmbralDescarte= CASE WHEN l.estimacion = 0 THEN p.UmbralDescarte ELSE e.UmbralDescarte END,
        UmbralBajaAuto= CASE WHEN l.estimacion = 0 THEN p.UmbralBajaAuto ELSE e.UmbralBajaAuto END
    FROM ProdDiv p
       LEFT JOIN Calculos l ON l.periodo = pPeriodo and l.calculo = pCalculo --pk verificada
       LEFT JOIN ProdDivEstimac e ON p.producto = e.producto and p.division = e.division and l.estimacion = e.estimacion -- pk verificada
    WHERE c.UmbralPriImp is null
      AND c.periodo=pPeriodo
      AND c.calculo=pCalculo
      AND p.producto=c.producto
      AND p.division=c.division;
END LOOP;
EXECUTE Cal_Mensajes(pPeriodo, pCalculo,'CalDiv_Rellenar','finalizo');     
END;
$$;


--
-- Name: caldiv_subir(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.caldiv_subir(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vr RECORD; 
  vtipo_promedio text;  
  v_promedio NUMERIC;
BEGIN  
execute Cal_Mensajes(pPeriodo, pCalculo,'CalDiv_Subir','comenzo');

for vr in
  SELECT DISTINCT d.periodo, d.calculo, d.producto, d.profundidad, d.division, d.tipo_promedio
      FROM  CalDiv c join  CalDiv d ON c.periodo=d.periodo AND c.calculo=d.calculo AND c.producto=d.producto AND c.divisionpadre=d.division
      WHERE c.periodo=pperiodo 
        AND c.calculo=pcalculo
      ORDER BY d.periodo, d.calculo, d.producto, d.profundidad DESC, d.division
Loop
    vtipo_promedio= vr.tipo_promedio;
    UPDATE CalDiv t
        SET  PromPriImpAct= pr_priImpAct,
           PromPriImpAnt= pr_priImpAnt,
           PromPrel     = pr_prel,
           PromDiv      = pr_Div,
           PromAltas    = pr_Altas,
           PromBajas    = pr_Bajas,
           ImpDiv       = mimp,
           CantIncluidos= n_incluidos,
           CantAltas    = n_Altas, 
           CantBajas    = n_Bajas,
           CantImputados= n_Imputados,
           CantExcluidos= n_excluidos,
           PromExcluidos= pr_excluidos,
           PromImputados= pr_Imputados,
           CantRealesIncluidos= n_realesincluidos,
           CantRealesExcluidos= n_realesexcluidos,
           CantRealesDescartados= n_realesdescartados,
           PromRealesIncluidos= pr_realesincluidos,
           PromRealesExcluidos= pr_realesexcluidos,
           CantPriImp         = n_priimp,
           PromedioRedondeado = round(pr_Div::decimal,2),
           CantPreciosTotales = n_preciostotales,
           CantPreciosIngresados = n_preciosingresados,
           CantConPrecioParaCalEstac= n_ConPrecioParaCalEstac,
           PromRealesSinCambio=pr_sincambio,
           PromRealesSinCambioAnt=pr_sincambioant,
           PromSinAltasBajas=pr_sinAltasBajas,
           PromSinAltasBajasAnt=pr_sinAltasBajasAnt
        FROM (  
            SELECT AVG(a.PromPriImpAct) pr_priImpAct,
                   AVG(a.PromPriImpAnt) pr_priImpAnt,
                   AVG(a.PromPrel     ) pr_prel     ,
                   AVG(a.PromDiv      ) pr_Div      ,
                   AVG(a.PromAltas    ) pr_Altas    ,
                   AVG(a.PromBajas    ) pr_Bajas    ,
                   AVG(a.PromExcluidos) pr_Excluidos,
                   MIN(a.impDiv) mimp,
                   SUM(a.CantIncluidos) n_incluidos,
                   SUM(a.CantAltas) n_altas,
                   SUM(a.CantBajas) n_bajas,
                   SUM(a.CantImputados) n_imputados,
                   SUM(a.CantExcluidos) n_excluidos, 
                   AVG(a.PromImputados) pr_imputados,
                   SUM(a.CantRealesIncluidos) n_realesincluidos,
                   SUM(a.CantRealesExcluidos) n_realesexcluidos,
                   SUM(a.CantRealesDescartados) n_realesdescartados,
                   AVG(a.PromRealesIncluidos) pr_realesincluidos,
                   AVG(a.PromRealesExcluidos) pr_realesExcluidos,
                   SUM(a.CantPriImp) n_priimp,
                   SUM(a.CantPreciosTotales) n_preciostotales,
                   SUM(a.CantPreciosIngresados) n_preciosingresados,
                   SUM(a.CantConPrecioParaCalEstac) n_ConPrecioParaCalEstac,
                   AVG(a.PromRealesSinCambio) pr_sincambio,
                   AVG(a.PromRealesSinCambioAnt) pr_sincambioant,
                   AVG(a.PromSinAltasBajas) pr_sinAltasBajas,
                   AVG(a.PromSinAltasBajasAnt) pr_sinAltasBajasant,
                   'AriAuto' tipo_promedio
                FROM  caldiv a  
                  WHERE a.periodo=pperiodo AND a.calculo=pcalculo AND a.producto=vr.producto AND a.divisionpadre=vr.division
                    and vtipo_promedio='AriAuto' 
            UNION        
              SELECT SUM(a.PromPriImpAct*a.ponderadorDiv)/sum(case when a.PromPriImpAct is null then null else a.ponderadorDiv end) pr_priImpAct,
                     SUM(a.PromPriImpAnt*a.ponderadorDiv)/sum(case when a.PromPriImpAnt is null then null else a.ponderadorDiv end) pr_priImpAnt,
                     SUM(a.PromPrel     *a.ponderadorDiv)/sum(case when a.PromPrel      is null then null else a.ponderadorDiv end) pr_prel     ,
                     SUM(a.PromDiv      *a.ponderadorDiv)/sum(case when a.PromDiv       is null then null else a.ponderadorDiv end) pr_Div      ,
                     SUM(a.PromAltas    *a.ponderadorDiv)/sum(case when a.PromAltas     is null then null else a.ponderadorDiv end) pr_Altas    ,
                     SUM(a.PromBajas    *a.ponderadorDiv)/sum(case when a.PromBajas     is null then null else a.ponderadorDiv end) pr_Bajas    ,
                     SUM(a.PromExcluidos*a.ponderadorDiv)/sum(case when a.PromExcluidos is null then null else a.ponderadorDiv end) pr_Excluidos,
                     MIN(a.impDiv) mimp,
                     SUM(a.CantIncluidos) n_incluidos,
                     SUM(a.CantAltas) n_altas,
                     SUM(a.CantBajas) n_bajas,
                     SUM(a.CantImputados) n_imputados,                   
                     SUM(a.CantExcluidos) n_excluidos, 
                     SUM(a.PromImputados*a.ponderadorDiv)/sum(case when a.PromImputados is null then null else a.ponderadorDiv end) pr_imputados,
                     SUM(a.CantRealesIncluidos) n_realesincluidos,
                     SUM(a.CantRealesExcluidos) n_realesexcluidos,
                     SUM(a.CantRealesDescartados) n_realesdescartados,
                     SUM(a.PromRealesIncluidos*a.ponderadorDiv)/sum(case when a.PromRealesIncluidos is null then null else a.ponderadorDiv end) pr_realesincluidos,
                     SUM(a.PromRealesExcluidos*a.ponderadorDiv)/sum(case when a.PromRealesExcluidos is null then null else a.ponderadorDiv end) pr_realesexcluidos,
                     SUM(a.CantPriImp) n_priimp,
                     SUM(a.CantPreciosTotales) n_preciostotales,
                     SUM(a.CantPreciosIngresados) n_preciosingresados,
                     SUM(a.CantConPrecioParaCalEstac) n_ConPrecioParaCalEstac,
                     SUM(a.PromRealesSinCambio    *a.ponderadorDiv)/sum(case when a.PromRealesSinCambio     is null then null else a.ponderadorDiv end) pr_sincambio,
                     SUM(a.PromRealesSinCambioAnt *a.ponderadorDiv)/sum(case when a.PromRealesSinCambioAnt  is null then null else a.ponderadorDiv end) pr_sincambioant,
                     SUM(a.PromSinAltasBajas      *a.ponderadorDiv)/sum(case when a.PromSinAltasBajas       is null then null else a.ponderadorDiv end) pr_sinAltasBajas,
                     SUM(a.PromSinAltasBajasAnt   *a.ponderadorDiv)/sum(case when a.PromSinAltasBajasAnt    is null then null else a.ponderadorDiv end) pr_sinAltasBajasant,
                     'AriPond' tipo_promedio
                FROM  caldiv a  
                  WHERE a.periodo=pperiodo AND a.calculo=pcalculo AND a.producto=vr.producto AND a.divisionpadre=vr.division
                   and vtipo_promedio='AriPond'
            UNION        
              SELECT EXP(AVG(LN(a.PromPriImpAct))) pr_priImpAct,
                     EXP(AVG(LN(a.PromPriImpAnt))) pr_priImpAnt,
                     EXP(AVG(LN(a.PromPrel     ))) pr_prel     ,
                     EXP(AVG(LN(a.PromDiv      ))) pr_Div      ,
                     EXP(AVG(LN(a.PromAltas    ))) pr_Altas    ,
                     EXP(AVG(LN(a.PromBajas    ))) pr_Bajas    ,
                     EXP(AVG(LN(a.PromExcluidos))) pr_Excluidos,
                     MIN(a.impDiv) mimp,
                     SUM(a.CantIncluidos) n_incluidos,
                     SUM(a.CantAltas) n_altas,
                     SUM(a.CantBajas) n_bajas,
                     SUM(a.CantImputados) n_imputados,                   
                     SUM(a.CantExcluidos) n_excluidos,                   
                     EXP(AVG(LN(a.PromImputados))) pr_imputados,
                     SUM(a.CantRealesIncluidos) n_realesincluidos,
                     SUM(a.CantRealesExcluidos) n_realesexcluidos,
                     SUM(a.CantRealesDescartados) n_realesdescartados,
                     EXP(AVG(LN(a.PromRealesIncluidos))) pr_realesincluidos,
                     EXP(AVG(LN(a.PromRealesExcluidos))) pr_realesexcluidos,
                     SUM(a.CantPriImp) n_priimp,
                     SUM(a.CantPreciosTotales) n_preciostotales,
                     SUM(a.CantPreciosIngresados) n_preciosingresados,
                     SUM(a.CantConPrecioParaCalEstac) n_ConPrecioParaCalEstac,
                     EXP(AVG(LN(a.PromRealesSinCambio      ))) pr_sincambio   ,
                     EXP(AVG(LN(a.PromRealesSinCambioAnt   ))) pr_sincambioAnt,
                     EXP(AVG(LN(a.PromSinAltasBajas      ))) pr_sinAltasBajas   ,
                     EXP(AVG(LN(a.PromSinAltasBajasAnt   ))) pr_sinAltasBajasAnt,
                     'GeoAuto' tipo_promedio
                FROM  caldiv a  
                  WHERE a.periodo=pperiodo AND a.calculo=pcalculo AND a.producto=vr.producto AND a.divisionpadre=vr.division
                   and vtipo_promedio='GeoAuto'
            UNION        
              SELECT EXP(SUM(LN(a.PromPriImpAct)*a.ponderadorDiv)/SUM(case when a.PromPriImpAct is null then null else a.ponderadorDiv end)) pr_priImpAct,
                     EXP(SUM(LN(a.PromPriImpAnt)*a.ponderadorDiv)/SUM(case when a.PromPriImpAnt is null then null else a.ponderadorDiv end)) pr_priImpAnt,
                     EXP(SUM(LN(a.PromPrel     )*a.ponderadorDiv)/SUM(case when a.PromPrel      is null then null else a.ponderadorDiv end)) pr_prel     ,
                     EXP(SUM(LN(a.PromDiv      )*a.ponderadorDiv)/SUM(case when a.PromDiv       is null then null else a.ponderadorDiv end)) pr_Div      ,
                     EXP(SUM(LN(a.PromAltas    )*a.ponderadorDiv)/SUM(case when a.PromAltas     is null then null else a.ponderadorDiv end)) pr_Altas    ,
                     EXP(SUM(LN(a.PromBajas    )*a.ponderadorDiv)/SUM(case when a.PromBajas     is null then null else a.ponderadorDiv end)) pr_Bajas    ,
                     EXP(SUM(LN(a.PromExcluidos)*a.ponderadorDiv)/SUM(case when a.PromExcluidos is null then null else a.ponderadorDiv end)) pr_Excluidos,
                     MIN(a.impDiv) mimp,
                     SUM(a.CantIncluidos) n_incluidos,
                     SUM(a.CantAltas) n_altas,
                     SUM(a.CantBajas) n_bajas,
                     SUM(a.CantImputados) n_imputados,                   
                     SUM(a.CantExcluidos) n_excluidos,                   
                     EXP(SUM(LN(a.PromImputados)*a.ponderadorDiv)/SUM(case when a.PromImputados is null then null else a.ponderadorDiv end)) pr_imputados,
                     SUM(a.CantRealesIncluidos) n_realesincluidos,
                     SUM(a.CantRealesExcluidos) n_realesexcluidos,
                     SUM(a.CantRealesDescartados) n_realesdescartados,
                     EXP(SUM(LN(a.PromRealesIncluidos)*a.ponderadorDiv)/SUM(case when a.PromRealesIncluidos is null then null else a.ponderadorDiv end)) pr_realesincluidos,
                     EXP(SUM(LN(a.PromRealesExcluidos)*a.ponderadorDiv)/SUM(case when a.PromRealesExcluidos is null then null else a.ponderadorDiv end)) pr_realesexcluidos,
                     SUM(a.CantPriImp) n_priimp,
                     SUM(a.CantPreciosTotales) n_preciostotales,
                     SUM(a.CantPreciosIngresados) n_preciosingresados,
                     SUM(a.CantConPrecioParaCalEstac) n_ConPrecioParaCalEstac,
                     EXP(SUM(LN(a.PromRealesSinCambio    )*a.ponderadorDiv)/SUM(case when a.PromRealesSinCambio    is null then null else a.ponderadorDiv end)) pr_sincambio   ,
                     EXP(SUM(LN(a.PromRealesSinCambioAnt )*a.ponderadorDiv)/SUM(case when a.PromRealesSinCambioAnt is null then null else a.ponderadorDiv end)) pr_sincambioant,
                     EXP(SUM(LN(a.PromsinAltasBajas      )*a.ponderadorDiv)/SUM(case when a.PromsinAltasBajas      is null then null else a.ponderadorDiv end)) pr_sinAltasBajas   ,
                     EXP(SUM(LN(a.PromsinAltasBajasAnt   )*a.ponderadorDiv)/SUM(case when a.PromsinAltasBajasAnt   is null then null else a.ponderadorDiv end)) pr_sinAltasBajasant,
                     'GeoPond' tipo_promedio
                FROM  caldiv a  
                  WHERE a.periodo=pperiodo AND a.calculo=pcalculo AND a.producto=vr.producto AND a.divisionpadre=vr.division
                   and vtipo_promedio='GeoPond'
            UNION        
              SELECT SUM(case when a.PromPriImpAct is null or a.PromPriImpAnt is null then null else a.PromPriImpAct end) pr_priImpAct,
                     SUM(case when a.PromPriImpAct is null or a.PromPriImpAnt is null then null else a.PromPriImpAnt end) pr_priImpAnt,
                     SUM(a.PromPrel) pr_prel     ,
                     SUM(a.PromDiv ) pr_Div      ,
                     null pr_Altas    ,
                     null pr_Bajas    ,
                     null pr_Excluidos,
                     MIN(a.impDiv) mimp,
                     SUM(a.CantIncluidos) n_incluidos,
                     SUM(a.CantAltas) n_altas,
                     SUM(a.CantBajas) n_bajas,
                     SUM(a.CantImputados) n_imputados,
                     SUM(a.CantExcluidos) n_excluidos,                     
                     null pr_imputados,
                     SUM(a.CantRealesIncluidos) n_realesincluidos,
                     SUM(a.CantRealesExcluidos) n_realesexcluidos,
                     SUM(a.CantRealesDescartados) n_realesdescartados,
                     null pr_realesincluidos,
                     null pr_realesexcluidos,
                     SUM(a.CantPriImp) n_priimp,
                     SUM(a.CantPreciosTotales) n_preciostotales,
                     SUM(a.CantPreciosIngresados) n_preciosingresados,
                     SUM(a.CantConPrecioParaCalEstac) n_ConPrecioParaCalEstac,
                     SUM(a.PromRealesSinCambio ) pr_sincambio,
                     SUM(a.PromRealesSinCambioAnt ) pr_sincambioant,
                     SUM(a.PromsinAltasBajas ) pr_sinAltasBajas,
                     SUM(a.PromsinAltasBajasAnt ) pr_sinAltasBajasant,
                     'Suma' tipo_promedio
                FROM  caldiv a  
                  WHERE a.periodo=pperiodo AND a.calculo=pcalculo AND a.producto=vr.producto AND a.divisionpadre=vr.division
                   and vtipo_promedio='Suma'
           ) as p           
        WHERE t.periodo=pperiodo AND t.calculo=pcalculo AND t.producto=vr.producto AND t.division=vr.division
              AND p.tipo_promedio= vr.tipo_promedio 
           ;
end loop;
execute CalDiv_ImpExt(pPeriodo, pCalculo );
execute Cal_Mensajes(pPeriodo, pCalculo,'CalDiv_Subir','finalizo');   
END;
$$;


--
-- Name: calgru_canasta_variacion(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_canasta_variacion(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$      
 
BEGIN   
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Canasta_Variacion', pTipo:='comenzo');
 
  UPDATE CalGru c
    SET variacion=CASE WHEN c0.valorgru=0 THEN null ELSE round((c.valorgru/c0.valorgru*100-100)::decimal,1) END
    FROM CalGru c0,
         Calculos p   
    WHERE p.periodo=pPeriodo AND p.calculo=pCalculo --Pk verificada
      AND c.periodo=p.periodo AND c.calculo=p.calculo AND c.agrupacion=pAgrupacion
      AND c0.periodo=p.periodoAnterior AND c0.calculo=p.calculoAnterior AND c0.agrupacion=c.agrupacion AND c0.grupo=c.grupo; --Pk verificada
  
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Canasta_Variacion', pTipo:='finalizo');
END;  
$$;


--
-- Name: calgru_indexar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_indexar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN  
  execute CalGru_Indexar_Otro(pPeriodo, pCalculo, null);
END;
$$;


--
-- Name: calgru_indexar_otro(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_indexar_otro(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 vValorProd double precision;
 vImpProd character varying(10);
 vcalgru record;
 vNivel record;
 vAgrupacion text;
 vencadenadong double precision;
BEGIN  

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Indexar_Otro', pTipo:='comenzo'); 
IF pAgrupacion IS NULL THEN  --agrupacion principal
    SELECT AgrupacionPrincipal INTO vAgrupacion
        FROM Calculos_def
        WHERE calculo=pCalculo;
ELSE
    vAgrupacion:=pAgrupacion;
    EXECUTE CalGru_Insertar(pPeriodo, pCalculo, vAgrupacion);
END IF;
-- PRODUCTOS
UPDATE CalGru cg SET Indice=cp.Indice, ImpGru=cp.ImpProd, ponderadorImplicito = cp.Indice * cg.ponderador
  FROM CalProd cp
  WHERE cg.periodo=pPeriodo AND cg.calculo=pCalculo AND cg.agrupacion=vAgrupacion AND cg.esproducto='S'
    AND cg.periodo=cp.periodo AND cg.calculo=cp.calculo AND cg.grupo=cp.producto;
FOR vNivel IN
  SELECT cg.nivel, cg.agrupacion
    FROM CalGru cg INNER JOIN Calculos c ON cg.periodo=c.periodo AND cg.calculo=c.calculo
    WHERE cg.periodo=pPeriodo AND cg.calculo=pCalculo AND cg.agrupacion=vAgrupacion -- AND cg.esproducto='N'
    GROUP BY cg.nivel, cg.agrupacion
    ORDER BY cg.nivel DESC
LOOP
  -- GRUPOS
  UPDATE CalGru cg SET Indice=encadenado/cg.ponderador, ImpGru=MinImp, ponderadorImplicito = encadenado
    FROM (SELECT ch.GrupoPadre, sum(ch.Indice*ch.ponderador) AS encadenado, min(ch.ImpGru) as MinImp
            FROM CalGru ch
            WHERE ch.periodo=pPeriodo AND ch.calculo=pCalculo  
            GROUP BY ch.GrupoPadre) ch
    WHERE cg.periodo=pPeriodo AND cg.calculo=pCalculo AND cg.agrupacion=vNivel.agrupacion AND cg.esproducto='N' 
      AND cg.nivel=vNivel.nivel AND cg.grupo=ch.grupoPadre;
END LOOP;

SELECT sum(ng.Indice*ng.ponderador) INTO vencadenadong
  FROM CalGru ng
  WHERE ng.periodo=pPeriodo AND ng.calculo=pCalculo and ng.agrupacion = vagrupacion and ng.nivel = 1  
  GROUP BY ng.GrupoPadre;

UPDATE CalGru cg SET ponderadorimplicito = ponderadorimplicito/vencadenadong
  WHERE cg.periodo=pPeriodo AND cg.calculo=pCalculo and cg.agrupacion = vagrupacion;  

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Indexar_Otro', pTipo:='finalizo');
END;
$$;


--
-- Name: calgru_info(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_info(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$  
DECLARE     
  vEmpezo     time;  
  vTermino    time;  
BEGIN   
  execute CalGru_Info_Otro(pPeriodo, pCalculo,null);
END;  
$$;


--
-- Name: calgru_info_otro(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_info_otro(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$  
DECLARE     
  vAgrupacion text; 
  
BEGIN   
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Info_Otro', pTipo:='comenzo');

  IF pAgrupacion IS NULL THEN  --agrupacion principal
    SELECT AgrupacionPrincipal INTO vAgrupacion
        FROM Calculos_def
        WHERE calculo=pCalculo;
  ELSE
    vAgrupacion:=pAgrupacion;
  END IF; 
  
  UPDATE CalGru c
    SET /*
        variacion = CASE WHEN c0.Indice=0 THEN null ELSE round((c.Indice/c0.Indice*100-100)::decimal,1) END
        ,incidencia = (c.indice - c0.indice) * c.ponderador / p0.indice * 100::double precision
        */
    --variacion: basada en indiceRedondeado, almacenada a 1 decimal
    variacion = CASE WHEN c0.Indice=0 THEN null ELSE round((round(c.Indice::decimal,2)/round(c0.Indice::decimal,2)*100-100)::decimal,1) END
    --incidencia: basada en indice, almacenada con todos los decimales
    ,incidencia = (c.indice - c0.indice) * c.ponderador / p0.indice * 100::double precision
    --incidenciaRedondeada: basada en indiceRedondeado, almacenada a 2 decimales
    ,incidenciaRedondeada =
       CASE 
         WHEN c.nivel = 0 THEN
           CASE WHEN c0.Indice=0 THEN null ELSE round((round(c.Indice::decimal,2)/round(c0.Indice::decimal,2)*100-100)::decimal,1) END
         WHEN c.nivel = 1 THEN
           round(((round(c.indice::decimal,2) - round(c0.indice::decimal,2)) * c.ponderador / round(p0.indice::decimal,2) * 100)::decimal,2)
         ELSE NULL
         END
    --indiceRedondeado: indice almacenado a 2 decimales
    ,indiceRedondeado = round(c.indice::decimal,2)
    FROM CalGru c0,
         Calculos p,
         Gru_Grupos gp,
         CalGru p0   
    WHERE p.periodo=pPeriodo AND p.calculo=pCalculo --pk verificada
      AND c.periodo=p.periodo AND c.calculo=p.calculo AND c.agrupacion=vAgrupacion
      AND c0.periodo=p.periodoAnterior AND c0.calculo=p.calculoAnterior AND c0.agrupacion=c.agrupacion AND c0.grupo=c.grupo --pk verificada
      AND p0.periodo=p.periodoanterior AND p0.calculo=p.calculoAnterior AND p0.agrupacion=c.agrupacion AND p0.nivel = 0
      AND gp.agrupacion=c.agrupacion AND gp.grupo_padre=vAgrupacion AND c.grupo=gp.grupo;
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Info_Otro', pTipo:='finalizo');

END;  
$$;


--
-- Name: calgru_insertar(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_insertar(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
  vNivel record;
 
BEGIN  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'calgru_insertar', pTipo:='comenzo');
IF pAgrupacion IS NULL THEN 
    EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'calgru_insertar', pTipo:='error', pmensaje:='Falta definir el parametro agrupacion', pagrupacion:=pAgrupacion);
ELSE
    --- se inserta todo el arbol de la agrupacion
    INSERT INTO CalGru(periodo, calculo, agrupacion, grupo, grupopadre, nivel, esproducto, ponderador)
      (SELECT         pPeriodo, pCalculo, g.agrupacion, g.grupo, g.grupoPadre, g.nivel, g.esProducto, g.ponderador
         FROM Grupos g 
           WHERE g.agrupacion=pAgrupacion); 
END IF;

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'calgru_insertar', pTipo:='finalizo');
END;
$$;


--
-- Name: calgru_segimp(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_segimp(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$  
DECLARE     
   vPeriodo_1  TEXT;  
   vCalculo_1  INTEGER;
   vAgrupacion VARCHAR(10);   
   vrec RECORD;
   vnivelproducto INTEGER;   
    
BEGIN   
 EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_SegImp', pTipo:='comenzo');

 SELECT periodoanterior, calculoanterior, cd.agrupacionprincipal INTO vPeriodo_1, vCalculo_1, vAgrupacion
   FROM Calculos c INNER JOIN Calculos_def cd ON c.calculo=cd.calculo
   WHERE c.periodo=pPeriodo AND c.calculo=pCalculo;

 SELECT DISTINCT nivel INTO vnivelproducto
   FROM CalGru
   WHERE periodo=pPeriodo AND calculo=pCalculo AND agrupacion=vAgrupacion AND esproducto='S';
 IF vnivelProducto IS NULL OR vNivelProducto<=0 THEN
   --RAISE EXCEPTION 'CalGru_SegImp: No se encuentra el nivel de productos en la Agrupacion Principal  "%" en la tabla CalGru para %,%',vAgrupacion,pPeriodo,pCalculo;
   EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_SegImp', pTipo:='error', 
   pMensaje:='CalGru_SegImp: Es incorrecto el nivel de productos ('||coalesce(vNivelProducto::text,'NULL')||') en la Agrupacion Principal ' ||vagrupacion|| ' en la tabla CalGru para '||pPeriodo||' , '||pCalculo,
   pAgrupacion := vAgrupacion);
 END IF;
 FOR vNivel IN REVERSE vnivelproducto..0 LOOP
    execute CalGru_SegImpUnPaso(pPeriodo,pCalculo, 's', vNivel, vAgrupacion, vNivelProducto, vPeriodo_1, vCalculo_1);
 END LOOP;
 IF vNivelProducto>0 THEN
   FOR vNivel IN 1..vnivelproducto LOOP
     execute CalGru_SegImpUnPaso(pPeriodo,pCalculo, 'b', vnivel, vAgrupacion::CHARACTER VARYING, vNivelProducto, vPeriodo_1, vCalculo_1);
   END LOOP;
 END IF;
 EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_SegImp', pTipo:='finalizo');   
END;  
$$;


--
-- Name: calgru_segimpunpaso(text, integer, character varying, integer, character varying, integer, text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_segimpunpaso(pperiodo text, pcalculo integer, petapa character varying, pnivel integer, pagrupacion character varying, pnivelproducto integer, pperiodo_1 text, pcalculo_1 integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$  
DECLARE     
   vrec RECORD;
   vsumaHijos double precision;
   vimpMarca VARCHAR(10);
   vCantHijosConDato INTEGER;
   vSumaHijosAnt DOUBLE PRECISION;
   vValorPrel DOUBLE PRECISION;
   vMarca VARCHAR(10);
   vgrupoPadreAct VARCHAR(9);
   vvalorPadreAct DOUBLE PRECISION;
   vimpPadreAct VARCHAR(10);
   vgrupoPadreAnt VARCHAR(9);
   vvalorPadreAnt DOUBLE PRECISION;
   vimpPadreAnt VARCHAR(10);
   vImputaCon   VARCHAR(9);
   vSumaEncadenados double precision;
   vSumaEncadenadosAnt double precision;
   vIndicePrel double precision;
   vSumaPonderadores double precision;
   vIndicePadreAct double precision;
   vIndicePadreAnt double precision;
   vDenominadorDefinitivoSegImp boolean;
BEGIN   
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_SegImpUnPaso', pTipo:='comenzo');
  select denominadorDefinitivoSegImp into vDenominadorDefinitivoSegImp
    from calculos 
    where calculo=pCalculo and periodo=pPeriodo;
CASE pEtapa
WHEN 's' THEN
    IF pnivel= pnivelproducto THEN
      UPDATE calgru g
        SET valorPrel= p.valorPrel,
            IndicePrel=p.IndicePrel,
            impGru = CASE WHEN p.IndicePrel IS NULL THEN 'IG'
                          ELSE p.impProd
                     END 
        FROM calprod p
        WHERE g.periodo=pPeriodo and g.calculo=pCalculo
            AND p.periodo=g.periodo AND p.calculo=g.calculo AND p.producto=g.grupo
            AND g.agrupacion=pAgrupacion AND g.nivel=pnivel AND g.esproducto='S';
    ELSE
      for vrec in  
        SELECT a.periodo, a.calculo, a.agrupacion, a.grupo,  COUNT(*) as CantHijos,
               b.valorGru as valorGruAnt, b.indice as indiceAnt, a.ponderador
          FROM   Calgru a
            JOIN CalGru b ON a.periodo= pPeriodo AND a.calculo= pCalculo
                             AND a.agrupacion= pAgrupacion AND a.nivel= pNivel
                             AND b.periodo= pPeriodo_1 AND b.calculo= pCalculo_1                                   
                             AND b.agrupacion= a.agrupacion AND b.grupo= a.grupo AND b.nivel= a.nivel
                             AND a.indicePrel IS NULL
                            -- AND a.valorPrel IS NULL  -- ESTA CONDICION estaría de mas, no?
            JOIN CalGru h ON h.periodo= a.Periodo AND h.calculo= a.calculo 
                                 AND h.agrupacion=a.agrupacion AND h.grupopadre=a.grupo                     
          GROUP BY a.periodo, a.calculo, a.agrupacion, a.grupo, b.ValorGru, b.indice, a.ponderador
      Loop  
        SELECT SUM(g.ValorPrel) as sumaHijos, MIN(g.impGru) as impMarca, COUNT(*) as CantHijosConDato, SUM(g0.ValorGru) as SumaHijosAnt,
               SUM(g.IndicePrel*g.ponderador) as sumaEncadenados, SUM(CASE WHEN vDenominadorDefinitivoSegImp THEN g0.Indice ELSE g0.IndicePrel END*g.ponderador) as sumaEncadenadosAnt, sum(g.ponderador) as sumaPonderadores
          INTO vsumaHijos, vimpMarca, vCantHijosConDato, vSumaHijosAnt, vSumaEncadenados, vSumaEncadenadosAnt, vSumaPonderadores
          FROM  Calgru g JOIN CalGru g0 ON g.periodo= pPeriodo AND g.calculo=pCalculo
                                          AND g.agrupacion=vrec.agrupacion AND g.grupopadre=vrec.grupo
                                          AND g0.periodo= pPeriodo_1 AND g0.calculo= pCalculo_1 
                                          AND g0.agrupacion=g.agrupacion AND g0.grupo=g.grupo 
                                          AND g.indicePrel>0 AND g0.indice>0 ;
        IF vcanthijosConDato>0 THEN
          IF vcantHijosConDato=vrec.cantHijos THEN
              vIndicePrel=vSumaEncadenados/vSumaPonderadores; 
              vvalorprel=vsumaHijos;
              vmarca=vimpMarca;
          ELSE
              vIndicePrel=vrec.indiceAnt*vSumaEncadenados/vSumaEncadenadosAnt;
              vvalorprel=vsumaHijos*vrec.valorGruAnt/vsumaHijosAnt;
              vmarca='IG'||pnivel;
          END IF;    
          UPDATE CalGru 
            SET valorPrel=vvalorPrel, impGru=vmarca, indicePrel=vIndicePrel
            WHERE periodo=vrec.periodo AND calculo=vrec.calculo AND agrupacion=vrec.agrupacion AND grupo=vrec.grupo;         
        END IF;
      end loop;  
    END IF;
WHEN 'b' THEN  
   -- Graciela
      FOR vrec in  
        SELECT g.agrupacion, g.grupo ,g.grupopadre
          FROM  Calgru g
          WHERE g.periodo=pPeriodo AND g.calculo=pCalculo AND g.IndicePrel IS null AND g.nivel=pnivel    
      LOOP
        IF pnivel IS DISTINCT FROM pnivelproducto THEN 
          SELECT g.grupo,  g.valorprel, g.ImpGru ,  g.IndicePrel,
                 g0.grupo, g0.valorGru, g0.ImpGru, g0.Indice
            INTO vgrupopadreact, vvalorpadreact, vimppadreact, vIndicePadreAct,
                 vgrupopadreant, vvalorpadreant, vimppadreant, vIndicePadreAnt
            FROM  Calgru g, Calgru g0
            WHERE g.periodo=pPeriodo AND g.calculo=pCalculo AND g.agrupacion=vrec.agrupacion 
              AND g.grupo=vrec.grupopadre 
              AND g0.periodo=pPeriodo_1 AND g0.calculo=pCalculo_1 AND g0.agrupacion=vrec.agrupacion 
              AND g0.grupo=vrec.grupopadre AND g0.nivel=g.nivel;
        ELSE --pnivel=vnivelproducto entonces usar imputacon
          --ImputaCon está en CalProd
           SELECT  ImputaCon  INTO vimputacon
             FROM Calprod 
             WHERE periodo=pPeriodo AND calculo=pCalculo 
               AND producto=vrec.grupo ; 
             --El select a continuación es similar al anterior se puede ver despues si se juntan optimizan 
           SELECT g.grupo,  g.valorprel, g.ImpGru,  g.IndicePrel,
                 g0.grupo, g0.valorGru, g0.ImpGru, g0.Indice
             INTO vgrupopadreact, vvalorpadreact , vimppadreact, vIndicePadreAct,
                  vgrupopadreant, vvalorpadreant , vimppadreant, vIndicePadreAnt
             FROM  Calgru g, Calgru g0
             WHERE g.periodo=pPeriodo AND g.calculo=pCalculo AND g.agrupacion=vrec.agrupacion 
               AND g.grupo=vimputacon 
               AND g0.periodo=pPeriodo_1 AND g0.calculo=pCalculo_1 AND g0.agrupacion=vrec.agrupacion 
               AND g0.grupo=vimputacon   AND g0.nivel=g.nivel;    
            --raise notice 'Paso dir % nivel %  grupo % grupopadreact %  valorpadreact %, grupopadreant % , valorpadreant %', pEtapa, pnivel, vrec.grupo, vgrupopadreact,vvalorpadreact, vgrupopadreant, vvalorpadreant; 
        END IF;
        UPDATE Calgru g
          SET ValorPrel=g0.valorgru*CASE WHEN vvalorpadreant=0 THEN 0 ELSE vvalorpadreact/vvalorpadreant END,
              IndicePrel=g0.Indice*CASE WHEN vIndicePadreAnt>0 THEN vIndicePadreAct/vIndicePadreAnt ELSE null END,
              ImpGru=CASE WHEN g0.Indice IS NULL THEN 'AGN' ELSE vimppadreact END
          FROM Calgru g0 
          WHERE g.periodo=pPeriodo AND g.calculo=pCalculo AND g.IndicePrel IS null AND g.nivel=pnivel
            AND g0.periodo=pPeriodo_1 AND g0.calculo=pCalculo_1 AND g0.grupo=g.grupo AND g0.agrupacion=g.agrupacion 
            AND g0.nivel=g.nivel AND g.grupo=vrec.grupo;
      END LOOP;   
ELSE
    EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_SegImpUnPaso', pTipo:='error', pMensaje:='CalGru_SegImpUnPaso: Valor de etapa invalido: ' || pEtapa);
END CASE;  

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_SegImpUnPaso', pTipo:='finalizo');
    
END;  
$$;


--
-- Name: calgru_valorizar(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calgru_valorizar(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
  vNivel record;
 
BEGIN  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Valorizar', pTipo:='comenzo');
IF pAgrupacion IS NULL THEN 
    EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Valorizar', pTipo:='error', pmensaje:='Falta definir el parametro agrupacion', pagrupacion:=pAgrupacion);
ELSE
    --- se inserta todo el arbol de la agrupacion
    EXECUTE Calgru_Insertar(pPeriodo, pCalculo, pAgrupacion);
    /*
    INSERT INTO CalGru(periodo, calculo, agrupacion, grupo, grupopadre, nivel, esproducto)
      (SELECT         pPeriodo, pCalculo, g.agrupacion, g.grupo, g.grupoPadre, g.nivel, g.esProducto
         FROM Grupos g 
           WHERE g.agrupacion=pAgrupacion); 
     */      
    -- PRODUCTOS
    UPDATE CalGru cg SET ValorGru=cp.ValorProd
        FROM CalProdAgr cp
        WHERE cg.periodo=pPeriodo AND cg.calculo=pCalculo AND cg.agrupacion= pAgrupacion AND cg.grupo=cp.producto --PK verificada
          AND cg.periodo=cp.periodo AND cg.calculo=cp.calculo AND cg.agrupacion = cp.agrupacion --fk verificada
          AND cg.esproducto='S';
    --Hojas que no son producto y se construyen a partir de otra agrupacion       
    UPDATE CalGru cg SET ValorGru=cp.ValorGru
        FROM Calgru cp, Grupos g
        WHERE cg.periodo=pPeriodo AND cg.calculo=pCalculo AND cg.agrupacion= pAgrupacion AND cg.grupo=cp.grupo --PK verificada
          AND cp.periodo=cg.periodo AND cp.calculo=cg.calculo AND cp.agrupacion= g.agrupacionOrigen AND cp.grupo=cg.grupo--pk verificada
          AND cg.esproducto='N'  AND g.agrupacionOrigen IS NOT NULL
          AND g.grupo=cg.grupo AND g.agrupacion=cg.Agrupacion; --PK verificada
        
    -- GRUPOS 
    FOR vNivel IN
      SELECT cg.nivel
        FROM Grupos cg 
        WHERE cg.agrupacion = pAgrupacion AND cg.esProducto = 'N'
        GROUP BY cg.nivel
        ORDER BY cg.nivel DESC
    LOOP
      UPDATE CalGru cg SET ValorGru=SumValor
        FROM (SELECT ch.GrupoPadre, sum(ch.ValorGru) AS SumValor
                FROM CalGru ch
                WHERE ch.periodo=pPeriodo AND ch.calculo=pCalculo  AND ch.agrupacion=pAgrupacion 
                GROUP BY ch.GrupoPadre) ch
        WHERE cg.periodo=pPeriodo AND cg.calculo=pCalculo AND cg.agrupacion=pAgrupacion  AND cg.grupo=ch.grupoPadre -- PK verificada
          AND cg.nivel=vNivel.nivel AND cg.esproducto='N' ;
    END LOOP;
END IF;

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalGru_Valorizar', pTipo:='finalizo');
END;
$$;


--
-- Name: calhog_subtotalizar(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calhog_subtotalizar(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 vhsub record;
BEGIN  
 EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalHog_Subtotalizar', pTipo:='comenzo');

 INSERT INTO CalHogSubtotales (periodo, calculo, hogar, agrupacion, grupo)
  (SELECT g.periodo, g.calculo, g.hogar, g.agrupacion, g.grupo
     FROM Grupos c 
       JOIN CalHogGru g ON c.agrupacion = g.agrupacion
                           AND c.grupo = g.grupo         -- FK verificada
                           AND g.periodo = pperiodo 
                           AND g.calculo = pcalculo
                           AND c.nivel = 1
                           AND c.agrupacion= pAgrupacion); 
 
 FOR vhsub IN
     SELECT s.periodo, s.calculo, s.hogar, s.agrupacion, s.grupo
       FROM CalHogSubtotales s 
       WHERE s.periodo = pperiodo 
         AND s.calculo = pcalculo
         AND s.agrupacion = pAgrupacion
 LOOP
   UPDATE CalHogSubtotales 
      SET ValorHogSub =
         (SELECT SUM(ValorHogGru)
            FROM CalHogGru c 
               JOIN CalGru g
                 ON c.periodo = g.periodo AND c.calculo = g.calculo AND c.agrupacion = g.agrupacion AND c.grupo = g.grupo --PK verificada
            WHERE c.periodo = vhsub.periodo
              AND c.calculo = vhsub.calculo
              AND c.hogar = vhsub.hogar
              AND c.agrupacion = vhsub.agrupacion
              AND g.grupo <= vhsub.grupo
              AND g.nivel = 1)
     WHERE periodo = vhsub.periodo
        AND calculo = vhsub.calculo
        AND hogar = vhsub.hogar
        AND agrupacion = vhsub.agrupacion
        AND grupo = vhsub.grupo;
 END LOOP;
   
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalHog_Subtotalizar', pTipo:='finalizo');

END;
$$;


--
-- Name: calhog_subtotalizar_unhog(text, integer, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calhog_subtotalizar_unhog(pperiodo text, pcalculo integer, pagrupacion text, phogar text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 vhsub record;
BEGIN  
 EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalHog_Subtotalizar_UnHog', pTipo:='comenzo');

 INSERT INTO CalHogSubtotales (periodo, calculo, hogar, agrupacion, grupo)
  (SELECT g.periodo, g.calculo, g.hogar, g.agrupacion, g.grupo
     FROM Grupos c 
       JOIN CalHogGru g ON c.agrupacion = g.agrupacion
                           AND c.grupo = g.grupo         -- FK verificada
                           AND g.periodo = pperiodo 
                           AND g.calculo = pcalculo
                           AND c.nivel = 1
                           AND c.agrupacion= pAgrupacion
                           AND g.hogar=pHogar); 
 
 FOR vhsub IN
     SELECT s.periodo, s.calculo, s.hogar, s.agrupacion, s.grupo
       FROM CalHogSubtotales s 
       WHERE s.periodo = pperiodo 
         AND s.calculo = pcalculo
         AND s.agrupacion = pAgrupacion
         AND s.hogar=pHogar
 LOOP
   UPDATE CalHogSubtotales 
      SET ValorHogSub =
         (SELECT SUM(ValorHogGru)
            FROM CalHogGru c 
               JOIN CalGru g
                 ON c.periodo = g.periodo AND c.calculo = g.calculo AND c.agrupacion = g.agrupacion AND c.grupo = g.grupo --PK verificada
            WHERE c.periodo = vhsub.periodo
              AND c.calculo = vhsub.calculo
              AND c.hogar = vhsub.hogar
              AND c.agrupacion = vhsub.agrupacion
              AND g.grupo <= vhsub.grupo
              AND g.nivel = 1)
     WHERE periodo = vhsub.periodo
        AND calculo = vhsub.calculo
        AND hogar = vhsub.hogar
        AND agrupacion = vhsub.agrupacion
        AND grupo = vhsub.grupo;
 END LOOP;
   
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalHog_Subtotalizar_UnHog', pTipo:='finalizo');

END;
$$;


--
-- Name: calhog_valorizar(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calhog_valorizar(pperiodo text, pcalculo integer, pagrupacion text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 vmaxnivel integer;
 vhgru record;
 vhg RECORD;
BEGIN  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo,'CalHog_Valorizar', pTipo:='comenzo'); 
--insercion en CalHogGru

INSERT INTO CalHogGru (periodo, calculo,hogar, agrupacion, grupo, CoefHogGru)
  (SELECT pPeriodo as Periodo, pcalculo as Calculo, Hogar, g.Agrupacion, g.Grupo
         , CASE WHEN MIN(COALESCE(ABS(CoefHogPar)))>0 THEN EXP(SUM(LN(NULLIF(CoefHogPar,0)))) ELSE 0 END AS CoefHogGru
     FROM hogparAgr h JOIN parhoggru g ON h.parametro = g.parametro AND h.agrupacion = g.agrupacion AND g.agrupacion=pAgrupacion
          INNER JOIN agrupaciones a ON g.agrupacion=a.agrupacion --PK verificada
     WHERE a.paraVariosHogares
     GROUP BY Hogar, g.Agrupacion, g.Grupo
     ORDER BY Hogar, g.Agrupacion, g.Grupo);
-- inserto los coeficientes que están marcados con AgrupacionOrigen en Grupos.
INSERT INTO CalHogGru (periodo, calculo,hogar, agrupacion, grupo, CoefHogGru)
    (SELECT cg.Periodo, cg.Calculo, cg.Hogar, g.Agrupacion, cg.Grupo, cg.CoefHogGru
       FROM CalHogGru cg 
            INNER JOIN grupos g ON g.grupo=cg.grupo AND cg.agrupacion=g.AgrupacionOrigen --PK verificada
            INNER JOIN agrupaciones a ON g.agrupacion=a.agrupacion --PK verificada
       WHERE a.paraVariosHogares
         AND cg.Periodo=pPeriodo AND cg.Calculo=pCalculo  AND g.Agrupacion=pAgrupacion
       ORDER BY cg.Hogar, g.Agrupacion, cg.Grupo);
-- sube por niveles
SELECT MAX(g.nivel) INTO vmaxnivel 
  FROM CalHogGru c, Grupos g
  WHERE c.periodo = pperiodo AND c.calculo = pcalculo AND c.agrupacion = g.agrupacion AND c.grupo = g.grupo AND c.agrupacion=pAgrupacion;
FOR i IN REVERSE vmaxnivel..1 LOOP
  INSERT INTO CalHogGru (periodo, calculo, hogar, agrupacion, grupo)
    (SELECT DISTINCT periodo, calculo, hogar, agrupacion, grupopadre
       FROM (SELECT c.*, g.grupopadre, g.nivel
               FROM CalHogGru c, Grupos g
               WHERE c.periodo = pperiodo AND c.calculo = pcalculo AND c.agrupacion = g.agrupacion AND c.grupo = g.grupo AND g.nivel = i AND c.agrupacion=pAgrupacion) AS x);
END LOOP;
  
 FOR vhgru IN --toma los grupos-Hoja de CalHogGru
   SELECT h.periodo, h.calculo, h.Hogar, h.agrupacion, h.grupo, c.valorgru, h.coefhoggru, g.agrupacionOrigen 
     FROM CalHogGru h 
          INNER JOIN Grupos g ON g.grupo = h.grupo AND g.agrupacion=h.agrupacion  --PK verificada
          INNER JOIN CalGru c ON c.grupo=g.grupo AND c.agrupacion = COALESCE(g.agrupacionOrigen,g.agrupacion) 
                              AND c.periodo = h.periodo AND c.calculo = h.calculo --PK verificada
     WHERE h.coefhoggru IS NOT NULL
       AND h.periodo = pperiodo 
       AND h.calculo = pcalculo
       AND h.agrupacion=pAgrupacion
 LOOP
   UPDATE CalHogGru x SET valorHogGru = 
        CASE WHEN vhgru.agrupacionOrigen IS NULL THEN vhgru.valorGru * vhgru.coefHogGru 
            ELSE (SELECT valorHogGru 
                    FROM CalHogGru z 
                    WHERE z.periodo=x.periodo AND z.calculo=x.calculo 
                      AND z.agrupacion=vhgru.AgrupacionOrigen AND z.grupo=x.grupo AND z.hogar=x.hogar)
        END
     WHERE periodo = vhgru.periodo 
       AND calculo = vhgru.calculo 
       AND hogar = vhgru.Hogar 
       AND agrupacion = vhgru.agrupacion 
       AND grupo = vhgru.grupo;
 END LOOP;
 SELECT MAX(nivel) INTO vmaxnivel --para los niveles superiores
   FROM Grupos g 
        INNER JOIN CalHogGru h ON g.agrupacion = h.agrupacion AND g.grupo = h.grupo --FK verificada
   WHERE h.valorhoggru IS NOT NULL
       AND h.periodo = pperiodo 
       AND h.calculo = pcalculo
       AND h.agrupacion=pAgrupacion;
 IF vmaxnivel is not null THEN
     FOR i IN REVERSE vmaxnivel-1..0 LOOP
       FOR vhg IN 
         SELECT h.periodo, h.calculo, h.Hogar, h.agrupacion, h.grupo
           FROM Grupos g 
                INNER JOIN CalHogGru h ON g.agrupacion = h.agrupacion AND g.grupo = h.grupo --FK verificada
           WHERE g.nivel = i
             AND h.periodo = pperiodo 
             AND h.calculo = pcalculo
             AND h.ValorHogGru IS NULL
             AND h.agrupacion=pAgrupacion
       LOOP 
         UPDATE CalHogGru c SET valorhoggru = 
           (SELECT SUM(valorhoggru)
              FROM Grupos g
                  INNER JOIN CalHogGru h ON g.agrupacion = h.agrupacion AND g.grupo = h.grupo --FK verificada
              WHERE c.grupo = g.grupopadre
                AND c.periodo = h.periodo 
                AND c.calculo = h.calculo
                AND c.hogar = h.hogar
                AND c.agrupacion = h.agrupacion)
           WHERE periodo = vhg.periodo
             AND calculo = vhg.calculo
             AND hogar = vhg.hogar
             AND agrupacion = vhg.agrupacion
             AND grupo = vhg.grupo;       
       END LOOP;
     END LOOP;
 END IF;
EXECUTE Cal_Mensajes(pPeriodo, pCalculo,'CalHog_Valorizar', pTipo:='finalizo');  
END;
$$;


--
-- Name: calhog_valorizar_unhog(text, integer, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calhog_valorizar_unhog(pperiodo text, pcalculo integer, pagrupacion text, phogar text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 vmaxnivel integer;
 vhgru record;
 vhg RECORD;
BEGIN  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo,'CalHog_Valorizar_UnHog', pTipo:='comenzo'); 
--insercion en CalHogGru

INSERT INTO CalHogGru (periodo, calculo,hogar, agrupacion, grupo, CoefHogGru)
  (SELECT pPeriodo as Periodo, pcalculo as Calculo, Hogar, g.Agrupacion, g.Grupo
         , CASE WHEN MIN(COALESCE(ABS(CoefHogPar)))>0 THEN EXP(SUM(LN(NULLIF(CoefHogPar,0)))) ELSE 0 END AS CoefHogGru
     FROM hogpar h JOIN parhoggru g ON h.parametro = g.parametro  AND g.agrupacion=pAgrupacion
          INNER JOIN agrupaciones a ON g.agrupacion=a.agrupacion --PK verificada
     WHERE a.paraVariosHogares AND h.hogar=pHogar
     GROUP BY Hogar, g.Agrupacion, g.Grupo
     ORDER BY Hogar, g.Agrupacion, g.Grupo);
-- inserto los coeficientes que están marcados con AgrupacionOrigen en Grupos.
INSERT INTO CalHogGru (periodo, calculo,hogar, agrupacion, grupo, CoefHogGru)
    (SELECT cg.Periodo, cg.Calculo, cg.Hogar, g.Agrupacion, cg.Grupo, cg.CoefHogGru
       FROM CalHogGru cg 
            INNER JOIN grupos g ON g.grupo=cg.grupo AND cg.agrupacion=g.AgrupacionOrigen --PK verificada
            INNER JOIN agrupaciones a ON g.agrupacion=a.agrupacion --PK verificada
       WHERE a.paraVariosHogares
         AND cg.Periodo=pPeriodo AND cg.Calculo=pCalculo  AND g.Agrupacion=pAgrupacion AND cg.hogar=pHogar
       ORDER BY cg.Hogar, g.Agrupacion, cg.Grupo);
-- sube por niveles
SELECT MAX(g.nivel) INTO vmaxnivel 
  FROM CalHogGru c, Grupos g
  WHERE c.periodo = pperiodo AND c.calculo = pcalculo AND c.agrupacion = g.agrupacion AND c.grupo = g.grupo AND c.agrupacion=pAgrupacion AND c.hogar=pHogar;
FOR i IN REVERSE vmaxnivel..1 LOOP
  INSERT INTO CalHogGru (periodo, calculo, hogar, agrupacion, grupo)
    (SELECT DISTINCT periodo, calculo, hogar, agrupacion, grupopadre
       FROM (SELECT c.*, g.grupopadre, g.nivel
               FROM CalHogGru c, Grupos g
               WHERE c.periodo = pperiodo AND c.calculo = pcalculo AND c.agrupacion = g.agrupacion AND c.grupo = g.grupo AND g.nivel = i AND c.agrupacion=pAgrupacion
                 AND c.hogar=pHogar
            ) AS x);
END LOOP;
  
 FOR vhgru IN --toma los grupos-Hoja de CalHogGru
   SELECT h.periodo, h.calculo, h.Hogar, h.agrupacion, h.grupo, c.valorgru, h.coefhoggru, g.agrupacionOrigen 
     FROM CalHogGru h 
          INNER JOIN Grupos g ON g.grupo = h.grupo AND g.agrupacion=h.agrupacion  --PK verificada
          INNER JOIN CalGru c ON c.grupo=g.grupo AND c.agrupacion = COALESCE(g.agrupacionOrigen,g.agrupacion) 
                              AND c.periodo = h.periodo AND c.calculo = h.calculo --PK verificada
     WHERE h.coefhoggru IS NOT NULL
       AND h.periodo = pperiodo 
       AND h.calculo = pcalculo
       AND h.agrupacion=pAgrupacion
       AND h.hogar=pHogar
 LOOP
   UPDATE CalHogGru x SET valorHogGru = 
        CASE WHEN vhgru.agrupacionOrigen IS NULL THEN vhgru.valorGru * vhgru.coefHogGru 
            ELSE (SELECT valorHogGru 
                    FROM CalHogGru z 
                    WHERE z.periodo=x.periodo AND z.calculo=x.calculo 
                      AND z.agrupacion=vhgru.AgrupacionOrigen AND z.grupo=x.grupo AND z.hogar=x.hogar AND z.hogar=pHogar )
        END
     WHERE periodo = vhgru.periodo 
       AND calculo = vhgru.calculo 
       AND hogar = vhgru.Hogar 
       AND agrupacion = vhgru.agrupacion 
       AND grupo = vhgru.grupo;
 END LOOP;
 SELECT MAX(nivel) INTO vmaxnivel --para los niveles superiores
   FROM Grupos g 
        INNER JOIN CalHogGru h ON g.agrupacion = h.agrupacion AND g.grupo = h.grupo  --FK verificada
   WHERE h.valorhoggru IS NOT NULL
       AND h.periodo = pperiodo 
       AND h.calculo = pcalculo
       AND h.agrupacion=pAgrupacion
       AND h.hogar=pHogar;
 IF vmaxnivel is not null THEN
     FOR i IN REVERSE vmaxnivel-1..0 LOOP
       FOR vhg IN 
         SELECT h.periodo, h.calculo, h.Hogar, h.agrupacion, h.grupo
           FROM Grupos g 
                INNER JOIN CalHogGru h ON g.agrupacion = h.agrupacion AND g.grupo = h.grupo --FK verificada
           WHERE g.nivel = i
             AND h.periodo = pperiodo 
             AND h.calculo = pcalculo
             AND h.ValorHogGru IS NULL
             AND h.agrupacion=pAgrupacion
             AND h.hogar=pHogar
       LOOP 
         UPDATE CalHogGru c SET valorhoggru = 
           (SELECT SUM(valorhoggru)
              FROM Grupos g
                  INNER JOIN CalHogGru h ON g.agrupacion = h.agrupacion AND g.grupo = h.grupo --FK verificada
              WHERE c.grupo = g.grupopadre
                AND c.periodo = h.periodo 
                AND c.calculo = h.calculo
                AND c.hogar = h.hogar
                AND c.agrupacion = h.agrupacion
                AND h.hogar=pHogar)
           WHERE periodo = vhg.periodo
             AND calculo = vhg.calculo
             AND hogar = vhg.hogar
             AND agrupacion = vhg.agrupacion
             AND grupo = vhg.grupo;       
       END LOOP;
     END LOOP;
 END IF;
EXECUTE Cal_Mensajes(pPeriodo, pCalculo,'CalHog_Valorizar_UnHog', pTipo:='finalizo');  
END;
$$;


--
-- Name: calobs_altasybajas(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calobs_altasybajas(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vPeriodo_1 Text;
  vCalculo_1 INTEGER;
  vAgrupacionPrincipal text;
  vrec record;
  vGrupo text;
BEGIN  
execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_AltasyBajas','comenzo');  

SELECT periodoAnterior, CalculoAnterior, grupo_Raiz, cd.AgrupacionPrincipal
  INTO vPeriodo_1, vCalculo_1, vGrupo, vAgrupacionPrincipal
  FROM Calculos c inner join calculos_def cd on c.calculo=cd.calculo
  WHERE c.periodo=pPeriodo AND c.calculo=pCalculo;

-- Cuando registro de CalObs no tiene anterior en CalObs
execute Cal_Mensajes(pPeriodo, pCalculo,'Update 1','log','Cuando registro de CalObs no tiene anterior en CalObs');  
UPDATE CalObs AS c 
  SET AntiguedadConPrecio= CASE WHEN c.promObs IS NULL THEN NULL
                                ELSE 1
                           END,
      AntiguedadsinPrecio= CASE WHEN c.promObs IS NOT NULL THEN NULL
                                ELSE 1
                           END,
      SinDatosEstacional=CASE WHEN c.promObs IS NOT NULL THEN NULL
                              ELSE CASE WHEN p.CantidadConPrecio<p.umbralBajaAuto THEN 1 ELSE 0 END
                         END,
      AntiguedadExcluido= CASE WHEN c.promObs is not null and c.periodo <= coalesce(m.alta_inmediata_hasta_periodo,'a0000m00')THEN NULL
                             ELSE 1
                          END,   
      AntiguedadIncluido= CASE WHEN c.promObs is not null and c.periodo <= coalesce(m.alta_inmediata_hasta_periodo,'a0000m00')THEN 1
                              ELSE NULL 
                          END    
      
  FROM CalDiv p, Muestras m     
  WHERE c.periodo=pPeriodo
    AND c.calculo=pCalculo
    AND p.periodo= pPeriodo
    AND p.calculo= pCalculo
    AND p.producto= c.producto
    AND p.division=c.division
    AND c.muestra= m.muestra
    AND NOT EXISTS ( SELECT 1 
                       FROM CalObs c_1 
                       WHERE c_1.Periodo=vPeriodo_1
                          AND c_1.Calculo=vCalculo_1
                          AND c_1.producto=c.producto  
                          AND c_1.informante=c.informante
                          AND c_1.observacion=c.observacion
                    );


-- Cuando tiene correspondencia en periodo anterior 
execute Cal_Mensajes(pPeriodo, pCalculo,'Update 2','log','Cuando registro de CalObs tiene correspondencia en el periodo anterior, seteo de Antiguedad con/sin precio y sinDatosEstacional');  
UPDATE CalObs AS c
  SET AntiguedadConPrecio= CASE WHEN c.promObs IS NULL THEN NULL
                                ELSE COALESCE(c0.AntiguedadconPrecio,0) + 1
                           END, 
      AntiguedadsinPrecio= CASE WHEN c.promObs IS NOT NULL THEN NULL
                                ELSE COALESCE(c0.AntiguedadsinPrecio,0) + 1
                           END,
      SinDatosEstacional=CASE WHEN c.promObs IS NULL THEN COALESCE(c0.SinDatosEstacional,0) + CASE WHEN p.CantConPrecioParaCalEstac<p.umbralBajaAuto THEN 1 ELSE 0 END
                            ELSE NULL
                           END
  FROM CalObs c0, calDiv p
  WHERE c.periodo=pPeriodo
    AND c.calculo=pCalculo
    AND vPeriodo_1=c0.periodo
    AND vCalculo_1=c0.calculo
    AND c.producto=c0.producto  
    AND c.informante=c0.informante
    AND c.observacion=c0.observacion
    AND p.periodo=c.periodo
    AND p.calculo=c.calculo
    AND p.producto=c.producto
    AND p.division=c.division;
    
--Alta, Baja Automatica
execute Cal_Mensajes(pPeriodo, pCalculo,'Update 3','log','Cuando registro de CalObs tiene correspondencia en el periodo anterior, seteo de Antiguedad Excluido/Incluido');  
UPDATE CalObs c
  SET AntiguedadExcluido= 
        CASE WHEN a.esPeriodoBase='S' THEN 
                    CASE WHEN c.periodo> coalesce(cb.periodo_anterior_baja,c.periodo) THEN COALESCE(c0.AntiguedadExcluido,0)+1
                         ELSE null--c0.antiguedadexcluido
                    END
             ELSE
                CASE WHEN c.AntiguedadSinPrecio - c.SinDatosEstacional>=p.CantPerBajaAuto AND c0.antiguedadIncluido>0 THEN  1
                     WHEN c0.antiguedadExcluido IS NULL THEN NULL
                     WHEN c0.PromObs is not null AND c0.antiguedadExcluido>0 AND c.AntiguedadconPrecio>=p.CantPerAltaAuto  THEN NULL
                     ELSE c0.AntiguedadExcluido + 1                                       
                END
             END,
      AntiguedadIncluido=
        CASE WHEN a.esPeriodoBase='S' THEN
                    CASE WHEN c.periodo> coalesce(cb.periodo_anterior_baja,c.periodo)  THEN NULL
                         ELSE coalesce(c0.antiguedadIncluido,0) + 1
                    END
             ELSE
                CASE WHEN c0.PromObs is not null AND c0.antiguedadIncluido is null AND c.AntiguedadconPrecio>=p.CantPerAltaAuto  THEN 1
                     WHEN c0.antiguedadIncluido IS NULL THEN NULL
                     WHEN c.AntiguedadSinPrecio - c.SinDatosEstacional>=p.CantPerBajaAuto AND c0.antiguedadIncluido>0 THEN  NULL
                     ELSE c0.AntiguedadIncluido + 1                                   
                END 
             END   
  FROM CalObs c0, CalProd p,
       calculos a, 
       (SELECT c1.periodo, c1.calculo, c1.producto, c1.observacion, c1.informante, b.periodo_anterior_baja
            FROM calobs c1 LEFT JOIN calbase_obs b ON c1.calculo=b.Calculo AND c1.producto=b.producto
                                 AND c1.informante =b.informante AND c1.observacion=b.observacion --PK verificada
          ) AS cb-- , CalDiv pd
  WHERE c.periodo=pPeriodo
    AND c.calculo=pCalculo
    AND vPeriodo_1=c0.periodo
    AND vCalculo_1=c0.calculo
    AND c.producto=c0.producto  
    AND c.informante=c0.informante
    AND c.observacion=c0.observacion -- c, c0 calObs PK verificada 
    AND p.periodo=c.periodo
    AND p.calculo=c.calculo          -- p calProd PK verificada
    AND p.producto=c.producto
    AND a.periodo=c.periodo
    AND a.calculo=c.calculo          -- a calculos PK verificada
    AND cb.periodo= c.periodo 
    AND cb.calculo=c.Calculo 
    AND cb.producto=c.producto  
    AND cb.informante=c.informante 
    AND cb.observacion=c.observacion -- c, cb calObs PK verificada                                 
    /*
    AND pd.periodo=c.periodo
    AND pd.calculo=c.calculo
    AND pd.producto=c.producto
    AND pd.division=c.division*/;
  
-- CASO REEMPLAZADO => Baja 
execute Cal_Mensajes(pPeriodo, pCalculo,'Update 4','log','Dando de baja a los registros del reemplazado');   
UPDATE CalObs c
  SET AntiguedadIncluido= NULL, AntiguedadExcluido= 1
  FROM  RelVis v 
  WHERE c.periodo=pPeriodo
    AND c.calculo=pCalculo
    AND v.periodo= c.Periodo
    AND v.informante= c.informante 
    AND v.informantereemplazante IS NOT NULL ;  

-- altas y bajas manuales

-- casos erroneos: estan en novobs y no en calobs
execute Cal_Mensajes(pPeriodo, pCalculo,'For Select 5','log','revisando casos erroneos: estan en novobs y no en calobs');   
For vRec in 
  SELECT x.periodo, x.calculo, x.informante, x.producto, x.observacion, x.estado
    FROM NovObs x LEFT JOIN CalObs y
      ON x.periodo=y.periodo
       AND x.calculo=y.calculo
       AND x.producto=y.producto
       AND x.observacion=y.observacion
       AND x.informante=y.informante
    INNER JOIN Gru_Prod gp ON vGrupo = gp.grupo_padre AND x.producto = gp.producto 
    WHERE y.periodo IS NULL
      AND x.periodo=pPeriodo
      AND x.calculo=pCalculo
Loop
 
  execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_AltasYBajas','error',pmensaje:='ERROR, No existe registro en CalObs, sí en NovObs per '||vrec.periodo||', cal '|| vrec.calculo ||', inf '||vrec.informante||', prod ' ||vrec.producto ||', obs ' || vrec.observacion||', estado ' ||vrec.estado, pInformante:=vrec.informante,pProducto:=vrec.producto, pObservacion:=vrec.observacion);      
END LOOP; 
--casos erroneos alta en NovObs y promObs is null VER ****
/*
For vRec in 
  SELECT x.periodo, x.calculo, x.informante, x.producto, x.observacion, x.estado 
    FROM NovObs x JOIN CalObs y
      ON x.periodo=y.periodo
       AND x.calculo=y.calculo
       AND x.producto=y.producto
       AND x.observacion=y.observacion
       AND x.informante=y.informante
    WHERE x.periodo=pPeriodo
      AND x.calculo=pCalculo
      AND X.estado='Alta' and y.promObs IS NULL
Loop
  raise exception 'CalObs_AltasYBajas: ERROR,  NovObs indica Alta y promObs es nulo. per % , cal %, inf % , prod %, obs %, estado %'
                  ,vrec.periodo, vrec.calculo, vrec.informante, vrec.producto, vrec.observacion, vrec.estado;
    
END LOOP;     
--*/
-- Altas y Bajas Manuales, testear condicion prom>0 en el caso de Alta
execute Cal_Mensajes(pPeriodo, pCalculo,'Update 6','log','Altas/Bajas Manuales');   
UPDATE CalObs c
  SET AntiguedadExcluido= CASE WHEN n.estado='Alta' THEN NULL
                               WHEN n.estado='Baja' THEN COALESCE(c0.AntiguedadExcluido,0)+1
                               ELSE c.antiguedadexcluido
                          END,
      AntiguedadIncluido= CASE WHEN n.estado='Alta'  THEN COALESCE(c0.AntiguedadIncluido,0)+1
                               WHEN n.estado='Baja' THEN NULL
                               ELSE c.antiguedadincluido
                          END,
      SinDatosEstacional=CASE WHEN n.estado='Alta' and c.AntiguedadSinPrecio>0 THEN COALESCE(c.AntiguedadSinPrecio,0) ELSE c.SinDatosEstacional END
  FROM Gru_Prod gp, NovObs n left join calObs c0 on c0.periodo=vPeriodo_1
    AND c0.calculo=vCalculo_1
    AND c0.producto=n.producto
    AND c0.informante=n.informante
    AND c0.observacion=n.observacion
  WHERE c.periodo=n.periodo
    AND c.calculo=n.calculo
    AND c.producto=n.producto
    AND c.informante=n.informante
    AND c.observacion=n.observacion
    AND c.periodo=pPeriodo
    AND c.calculo=pCalculo
    AND gp.grupo_padre=vGrupo 
    AND gp.agrupacion=vAgrupacionPrincipal
    AND gp.producto=c.producto;

execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_AltasyBajas','finalizo');  
END;
$$;


--
-- Name: calobs_extraer(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calobs_extraer(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vEmpezo  time:=clock_timestamp();
  vTermino time; 
  v_basado_en_extraccion_calculo integer;
  v_basado_en_extraccion_muestra integer;
BEGIN
  perform VoyPor('CalObs_Extraer');  
  SELECT basado_en_extraccion_calculo,
         basado_en_extraccion_muestra
    INTO v_basado_en_extraccion_calculo,
         v_basado_en_extraccion_muestra
    FROM Calculos_def
    WHERE calculo=pCalculo;
  INSERT INTO CalObs(periodo, calculo, producto, informante, observacion, division, PromObs, 
                     ImpObs, AntiguedadConPrecio, AntiguedadSinPrecio, AntiguedadIncluido, muestra)
    (SELECT          pPeriodo, pCalculo, a.producto, a.informante, a.observacion, a.division, a.PromObs,
                     a.ImpObs,a.AntiguedadConPrecio, a.AntiguedadSinPrecio, a.AntiguedadIncluido, a.muestra
       FROM CalObs a
       WHERE a.periodo=pPeriodo AND a.calculo=v_basado_en_extraccion_calculo
          AND a.muestra=v_basado_en_extraccion_muestra
     );
  
  vTermino:=clock_timestamp();
  raise notice '%','Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
END;
$$;


--
-- Name: calobs_impperbase(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calobs_impperbase(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  --vEmpezo  time:=clock_timestamp();
  --vTermino time; 
  vPeriodo_1 Text;
  vCalculo_1 integer;
  v_pbcalculoBase integer;
  vgrupo_raiz  Text;
BEGIN 
--perform VoyPor('CalObs_ImpPerBase');
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalObs_ImpPerBase', pTipo:='comenzo');

SELECT c.periodoanterior, c.calculoanterior, c.pb_CalculoBase, cd.grupo_raiz
    INTO vPeriodo_1, vCalculo_1, v_pbCalculoBase, vgrupo_raiz
    FROM Calculos c, Calculos_def cd
    WHERE c.periodo=pPeriodo AND c.calculo=pCalculo AND c.calculo= cd.calculo;
    
INSERT INTO CalObs(periodo, calculo, producto, informante, observacion, division, 
                   PromObs, ImpObs, Muestra)
  (SELECT          pPeriodo, pCalculo, a.producto, a.informante, a.observacion, pd.division,
                   c.promobs, a.impobs, i.Muestra
     FROM CalObs a  -- del periodo anterior
         LEFT JOIN CalObs b ON b.periodo = pPeriodo AND b.calculo=pCalculo 
                              AND b.informante = a.informante 
                              AND b.producto = a.producto AND b.observacion=a.observacion 
         JOIN Informantes i  ON a.informante=i.informante
         inner join ProdDiv pd on pd.producto=a.producto and (pd.tipoinformante=i.tipoinformante or pd.sindividir)
         LEFT JOIN CalObs c ON c.periodo = pPeriodo AND c.calculo= v_pbCalculoBase 
                              AND c.informante = a.informante 
                              AND c.producto = a.producto AND c.observacion=a.observacion 
         JOIN Gru_Prod gp ON gp.grupo_padre=vgrupo_raiz AND a.producto=gp.producto                     
     WHERE  b.periodo IS NULL AND
             a.periodo=vPeriodo_1 AND a.calculo=vCalculo_1 AND
             a.impObs='PB' 
   );

INSERT INTO CalObs(periodo, calculo, producto, informante, observacion, division, 
                   PromObs, ImpObs, Muestra)
  (SELECT          pPeriodo, pCalculo, c.producto, c.informante, c.observacion, pd.division,
                   c.promobs, c.impobs, i.Muestra
     FROM CalObs c  -- del calculo con imputacion para año base
         LEFT JOIN CalObs b ON b.periodo = pPeriodo AND b.calculo=pCalculo AND
                               b.informante = c.informante AND 
                               b.producto = c.producto AND b.observacion=c.observacion 
         JOIN Informantes i  ON c.informante=i.informante
         inner join ProdDiv pd on pd.producto=c.producto and (pd.tipoinformante=i.tipoinformante or pd.sindividir)
         LEFT JOIN CalObs a ON a.periodo = vPeriodo_1 AND a.calculo= vCalculo_1 AND
                               a.informante = c.informante AND
                               a.producto = c.producto AND a.observacion=c.observacion 
        JOIN Gru_Prod gp ON gp.grupo_padre=vgrupo_raiz AND c.producto=gp.producto                       
     WHERE  b.periodo IS NULL AND a.periodo IS NULL AND
            c.periodo=pPeriodo AND c.calculo=v_pbCalculoBase
   );
   
   
--vTermino:=clock_timestamp();
--raise notice '%','CalObs_ImpPerBase: Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalObs_ImpPerBase', pTipo:='finalizo');

END;
$$;


--
-- Name: calobs_priimp(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calobs_priimp(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vPeriodo_1 Text;
  vCalculo_1 INTEGER;
  vrec record;
  
BEGIN
execute Cal_Mensajes(pPeriodo, pCalculo, 'CalObs_PriImp', pTipo:='comenzo');

for vrec in  
  SELECT co.producto, co.informante, co.observacion, co.division, 
          co_1.promObs AS promObsAnt, cd.promPriImpAct, cd.promPriImpAnt,cd.ImpDiv, 
          (cd.Division is not null) as existe_division, 
          CASE WHEN /*CUAL{*/ cc.esperiodobase='S' AND cb.periodo_aparicion > co.periodo /*}CUAL*/ THEN  1  ELSE CASE WHEN promPriImpAnt >0 THEN promPriImpAct/promPriImpAnt ELSE null END END AS factor_imputacion,
          CASE WHEN /*CUAL{*/ cc.esperiodobase='S' AND cb.periodo_aparicion > co.periodo /*}CUAL*/ THEN 'S' ELSE 'N'  END AS marcaimp_pb --Para Indicar como se va a setear la marca de imputacion 
    FROM CalObs co 
    JOIN Calculos cc ON cc.periodo=co.periodo AND cc.calculo=co.calculo
    LEFT JOIN CalBase_Obs cb ON cb.calculo=co.calculo AND cb.producto=co.producto AND cb.observacion=co.observacion AND cb.informante=co.informante
    JOIN CalObs co_1 ON co_1.periodo=CASE WHEN /*CUAL{*/ cc.esperiodobase='S' AND cb.periodo_aparicion > co.periodo /*}CUAL*/ THEN cc.periodo ELSE cc.periodoAnterior END 
                    AND co_1.calculo=CASE WHEN /*CUAL{*/ cc.esperiodobase='S' AND cb.periodo_aparicion > co.periodo /*}CUAL*/ THEN cc.pb_calculoBase ELSE cc.calculoAnterior END 
                                       AND co_1.producto=co.producto
                                       AND co_1.informante=co.informante
                                       AND co_1.observacion=co.observacion
    LEFT JOIN CalDiv cd ON cd.periodo=co.periodo AND cd.calculo=co.calculo AND cd.producto=co.producto AND cd.division=co.division
    WHERE co.periodo=pPeriodo 
      AND co.calculo=pCalculo 
      --AND co.AntiguedadIncluido>0 
      AND (co.AntiguedadIncluido >0 OR co.AntiguedadExcluido=1)
      AND (co.promObs IS NULL OR ImpDiv='BE') 
Loop
    UPDATE calObs 
        SET promObs=vrec.promObsAnt*vrec.factor_imputacion, 
             impObs=CASE WHEN vrec.marcaimp_pb='S' THEN 'PB'
                         ELSE          
                           CASE 
                             WHEN vrec.existe_division is not true THEN 'BEFD'
                             WHEN vrec.promPriImpAnt>0 AND vrec.promPriImpAct>0 AND vrec.promObsAnt>0 THEN
                               CASE WHEN vrec.ImpDiv='BE' THEN 'BE' WHEN vrec.ImpDiv<'IP' THEN vrec.ImpDiv ELSE 'IP' END
                             ELSE impObs
                           END
                    END        
        WHERE periodo= pPeriodo AND calculo=pCalculo
          AND producto=vrec.producto AND informante=vrec.informante AND observacion=vrec.observacion; 
        IF vrec.existe_division is not true THEN
            execute Cal_Mensajes(pPeriodo, pCalculo, 'CalObs_PriImp', pMensaje:='Falta en CalDiv un registro para '||vrec.producto||' en la division '||vrec.division, 
                                 pTipo:='error', pProducto:=vrec.producto, pDivision:=vrec.division, pInformante:=vrec.informante, pObservacion:=vrec.observacion);
        END IF;
end loop;

execute Cal_Mensajes(pPeriodo, pCalculo, 'CalObs_PriImp', pTipo:='finalizo');
END;
$$;


--
-- Name: calobs_promedio(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calobs_promedio(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
vpr_AtrAgrpV1 RECORD;
hayDistintas INTEGER;
vmaxpanel INTEGER;
   
BEGIN   
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalObs_promedio', pTipo:='comenzo');
  SELECT MAX(panel) INTO vmaxpanel FROM relpan WHERE periodo = pperiodo;
  INSERT INTO CalObs(periodo, calculo, producto, informante, observacion, division, 
                   PromObs, ImpObs, muestra)
    (SELECT        r.periodo, pcalculo, r.producto, r.informante, r.observacion, 
                   COALESCE(max(de.divisionespecial), case when pd.sindividir then '0' else pd.division end), 
                   CASE WHEN v.es_vigencia is null THEN 
                          AVG(r.precionormalizado) 
                        WHEN v.es_vigencia THEN 
                          SUM(r.precionormalizado*v.nvalor)/SUM(v.nvalor) 
                   END,
                   CASE WHEN max(de.divisionespecial)<>min(de.divisionespecial) -- <> implica not null para ambos. 
                            THEN 'ERROR' -- ESTO NO APARECE SE FILTRA EN EL HAVING y se inserta el error ahí.
                        WHEN r.tipoprecio = 'I' THEN 'IRM' --Imputacion Registrada Manualmente
                        WHEN max(de.divisionespecial) IS NOT NULL THEN 'RA' 
                        ELSE 'R' 
                   END, 
                   i.muestra
       FROM RelPre r
         LEFT JOIN 
           (SELECT ra.periodo,ra.producto,ra.observacion,ra.informante,ra.visita,ra.valor::decimal as nvalor,a.es_vigencia 
              FROM RelAtr ra 
              JOIN Atributos a ON ra.atributo = a.atributo
              WHERE a.es_vigencia = true) v -- busca, si existe, el único atributo vigencia
            ON r.periodo = v.periodo AND r.producto = v.producto AND r.observacion = v.observacion 
                AND r.informante = v.informante AND r.visita = v.visita
         LEFT JOIN
             (SELECT rla.periodo, rla.producto, rla.observacion, rla.informante, rla.visita, string_agg(rla.valor,'~' order by pa.orden_calculo_especial) divisionEspecial
                 FROM RelAtr rla JOIN ProdAtr pa ON rla.producto = pa.producto AND rla.atributo = pa.atributo 
                 WHERE pa.orden_calculo_especial IS NOT NULL 
                 GROUP BY rla.periodo, rla.producto, rla.observacion, rla.informante, rla.visita) de
               ON r.periodo = de.periodo AND r.producto = de.producto AND r.observacion = de.observacion AND r.informante = de.informante AND r.visita=de.visita
       JOIN Informantes i ON r.informante=i.informante 
       inner join ProdDiv pd on pd.producto=r.producto and (pd.tipoinformante=i.tipoinformante or pd.sindividir)
       inner join Calculos c on c.periodo=r.Periodo and c.calculo=pCalculo 
       inner join Calculos_def cd on cd.calculo=c.calculo
       INNER JOIN Gru_Prod gp ON cd.grupo_raiz = gp.grupo_padre AND r.producto = gp.producto 
       --LEFT JOIN CalBase_Prod cbp ON cbp.calculo=c.calculo AND cbp.producto=r.producto  --Pk verificada
       LEFT JOIN CalBase_Obs  cbo ON cbo.calculo=COALESCE(cd.rellenante_de,cd.calculo) AND cbo.producto=r.producto AND cbo.informante=r.informante AND cbo.observacion=r.observacion, --Pk verificada
       LATERAL (SELECT * FROM relvis WHERE panel <= COALESCE(c.hasta_panel,vmaxpanel) AND periodo = r.periodo AND informante = r.informante AND visita = r.visita AND formulario = r.formulario) vis  
       WHERE (r.periodo=pperiodo AND r.PrecioNormalizado is not null )  
         AND ( c.esperiodobase='N'
             --OR  ( c.esperiodobase='S' AND cbo.incluido AND c.periodo<c.periodoanterior)
             OR  ( c.esperiodobase='S' AND cbo.incluido AND cbo.periodo_aparicion is not null AND c.periodo >= cbo.periodo_aparicion 
                  AND (c.periodo <=cbo.periodo_anterior_baja or cbo.periodo_anterior_baja is null)
                  ) 
              )
       GROUP BY r.periodo, pcalculo, r.producto, r.informante, r.observacion, v.es_vigencia, pd.division, i.muestra, pd.sindividir, r.tipoprecio
       HAVING
            CASE WHEN max(de.divisionespecial)<>min(de.divisionespecial) 
               THEN Cal_Mensajes(r.Periodo, pCalculo, 'CalObs_promedio', pTipo:='error', 
                    pmensaje:= 'ERROR: No coinciden los valores de los atributos en las visitas de '||r.periodo||' c'||pCalculo||' '||r.producto||' obs '||r.observacion||' inf '||r.informante,
                    pProducto:=r.producto, pdivision:=min(de.divisionespecial), pinformante:=r.informante,
                    pobservacion:= r.observacion)
               ELSE 'OK' 
            END='OK'
    );
  EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalObs_promedio', pTipo:='finalizo');
END;
$$;


--
-- Name: calobs_rellenar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calobs_rellenar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vPeriodo_1 Text;
  vCalculo_1 integer;
  vgrupo_raiz  Text;
BEGIN

execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_Rellenar','comenzo');  

SELECT periodoanterior, calculoanterior, cd.grupo_raiz INTO vPeriodo_1, vCalculo_1, vgrupo_raiz
  FROM Calculos c, Calculos_def cd
  WHERE c.periodo=pPeriodo AND c.calculo=pCalculo AND c.calculo= cd.calculo;
INSERT INTO CalObs(periodo, calculo, producto, informante, observacion, division, PromObs, 
                   ImpObs, AntiguedadConPrecio, AntiguedadSinPrecio, Muestra)
  (SELECT          pPeriodo, pCalculo, a.producto, a.informante, a.observacion, a.division, NULL,
                   'B',NULL,NULL, i.Muestra
     FROM CalObs a
     LEFT JOIN CalObs b ON b.periodo = pPeriodo AND b.calculo=pCalculo AND b.informante = a.informante 
       AND b.producto = a.producto AND b.observacion=a.observacion 
     JOIN Informantes i  ON a.informante=i.informante
     inner join ProdDiv pd on pd.producto=a.producto and (pd.tipoinformante=i.tipoinformante or pd.sindividir)
     WHERE b.periodo IS NULL AND a.periodo=vPeriodo_1 AND a.calculo=vCalculo_1
        AND (a.AntiguedadConPrecio >0 OR a.AntiguedadIncluido >0) 
   );

execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_Rellenar','finalizo');  
END;
$$;


--
-- Name: calobs_segimp(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calobs_segimp(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vEmpezo  time:=clock_timestamp();
  vTermino time; 
  vPeriodo_1 Text;
  vCalculo_1 integer;
  v_agrupacion varchar(10);
  vrec record;
  vCantIncluidosTipo integer;
  vumbraldescartetipo integer;
  vproducto varchar(11);
  vstrproductos   varchar(1000);
  vImpDiv varchar(100);
  vDescartedefinitivoSegImp boolean;
BEGIN
execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_SegImp','comenzo');

SELECT periodoanterior, calculoanterior, cd.agrupacionprincipal, descarteDefinitivoSegImp INTO vPeriodo_1, vCalculo_1, v_agrupacion, vDescarteDefinitivoSegImp
  FROM Calculos c INNER JOIN Calculos_def cd ON c.calculo=cd.calculo
  WHERE c.periodo=pPeriodo AND c.calculo=pCalculo;

FOR vrec IN
  SELECT c.periodo,c.calculo,c.producto, c.observacion, c.informante, c.division, c.promobs, c0.promobs as promobsant,
         p.CantIncluidos , p.imputacon, p.ImpProd
    FROM CalObs c JOIN CalObs c0 ON c.periodo=pPeriodo AND c.calculo=pCalculo
                            AND c0.periodo=vPeriodo_1 AND c0.calculo=vCalculo_1
                            AND c.producto=c0.producto
                            AND c.informante=c0.informante
                            AND c.observacion=c0.observacion
                            AND c.division=c0.division
                           --AND c.antiguedadincluido >0
                            AND (c.AntiguedadIncluido >0 OR c.AntiguedadExcluido=1)
                   JOIN CalProd p  ON  c.periodo=p.periodo AND c.calculo=p.calculo 
                                   AND c.producto=p.producto 
  LOOP
    SELECT CASE WHEN vDescarteDefinitivoSegImp THEN t.CantRealesIncluidos ELSE t.CantIncluidos END, t.umbraldescarte, t.ImpDiv
       INTO vCantIncluidosTipo, vumbraldescartetipo, vImpDiv
      FROM CalDiv t
      WHERE vrec.periodo=t.periodo AND vrec.calculo=t.calculo 
        AND vrec.producto=t.producto AND vrec.division=t.division;
    
    IF (vrec.promObs is null OR vCantIncluidosTipo <vumbraldescartetipo OR vImpDiv='BII') AND vrec.promobsant>0 THEN
          UPDATE CalObs c 
            SET PromObs=CASE WHEN g0.Indice=0 THEN 0 ELSE vrec.promobsant*g.IndicePrel/g0.Indice END,
                 ImpObs=CASE WHEN vImpDiv='BII' THEN vImpDiv||'-'||g.ImpGru WHEN g0.Indice=0 THEN 'A0' ELSE COALESCE(g.ImpGru,'AGV') END
            FROM  CalGru g ,
                  CalGru g0  
            WHERE  c.periodo=pPeriodo AND c.calculo=pCalculo
              AND c.producto=vrec.producto
              AND c.informante=vrec.informante
              AND c.observacion=vrec.observacion
              AND c.division=vrec.division
              AND g.agrupacion=v_agrupacion AND g.grupo=vrec.imputacon 
              AND c.periodo=g.periodo AND c.calculo=g.calculo
              AND g0.agrupacion=v_agrupacion AND g0.grupo=vrec.imputacon 
              AND g0.periodo=vPeriodo_1 AND g0.calculo= vCalculo_1 ;
    END IF;
    IF vCantIncluidosTipo <vumbraldescartetipo THEN
      UPDATE Caldiv 
        SET cantrealesdescartados= vCantIncluidosTipo,
            cantrealesincluidos= 0
        WHERE vrec.periodo=periodo AND vrec.calculo=calculo 
          AND vrec.producto=producto AND vrec.division=division;
    END IF;
  END LOOP;
  
  vstrproductos='';  
  FOR vproducto IN
    SELECT DISTINCT producto 
       FROM CalObs
       WHERE periodo= pPeriodo AND impObs='A0'
       ORDER BY producto
  LOOP
     vstrproductos= comun.concato_add(vstrproductos, vproducto); 
  END LOOP;     
  vstrproductos= comun.concato_fin(vstrproductos);
  IF LENGTH(vstrproductos) >0 THEN
     execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_SegImp','error'
             ,pmensaje:='Productos a imputar con informacion insuficiente del grupo con el que se imputa, reveer imputacon de : '||vstrproductos); 
  END IF;

execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_SegImp','finalizo');
  
END;
$$;


--
-- Name: calobs_segimp_perbase(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calobs_segimp_perbase(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vPeriodo_1 Text;
  vCalculo_1 integer;
  v_agrupacion varchar(10);
  vrec RECORD;
    
BEGIN
execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_SegImp_PerBase','comenzo');

SELECT periodoanterior, calculoanterior, cd.agrupacionprincipal INTO vPeriodo_1, vCalculo_1, v_agrupacion
  FROM Calculos c INNER JOIN Calculos_def cd ON c.calculo=cd.calculo
  WHERE c.periodo=pPeriodo AND c.calculo=pCalculo AND c.EsPeriodoBase = 'S';
  
FOR vrec IN
  SELECT c.periodo,c.calculo,c.producto, c.observacion, c.informante, c.division, c.promobs, c0.promobs as promobsant,
           x.indice, x_1.indice indiceant, n.promedioExt, n_1.promedioExt promedioExtant
    FROM CalObs c JOIN CalObs c0 ON c.periodo=pPeriodo AND c.calculo=pCalculo
                            AND c0.periodo=vPeriodo_1 AND c0.calculo=vCalculo_1
                            AND c.producto=c0.producto
                            AND c.informante=c0.informante
                            AND c.observacion=c0.observacion
                            AND c.division=c0.division
                            AND c.antiguedadincluido >0                  
          LEFT JOIN pb_externos x   ON x.producto=c.producto and x.periodo=c.periodo --PK verificada
          LEFT JOIN pb_externos x_1 ON x_1.producto=c.producto and x_1.periodo=vPeriodo_1  --PK verificada
          LEFT JOIN NovProd n   ON n.producto=c.producto and n.periodo=c.periodo AND n.calculo = pCalculo  --PK verificada
          LEFT JOIN NovProd n_1 ON n_1.producto=c.producto and n_1.periodo=vPeriodo_1 AND n_1.calculo = vCalculo_1   --PK verificada
     WHERE (x.indice is not null and x_1.indice is not null) or (n.promedioExt is not null and n_1.promedioExt is not null)
  LOOP
    IF (vrec.promObs is null AND vrec.promobsant>0 ) OR (vrec.Indice is not null AND vrec.Indiceant is not null) THEN
          UPDATE CalObs c 
            SET PromObs=CASE WHEN vrec.Indice is not null and vrec.Indiceant is not null 
                          THEN vrec.promobsant/vrec.Indiceant*vrec.Indice
                          ELSE CASE WHEN vrec.promedioExt is not null and vrec.promedioExtant is not null 
                                 THEN vrec.promobsant*vrec.promedioExt/vrec.promedioExtAnt 
                               END
                        END,
                 ImpObs='BIE'
            WHERE  c.periodo=pPeriodo AND c.calculo=pCalculo
              AND c.producto=vrec.producto
              AND c.informante=vrec.informante
              AND c.observacion=vrec.observacion
              AND c.division=vrec.division;
    END IF;
  END LOOP;  
  
execute Cal_Mensajes(pPeriodo, pCalculo,'CalObs_SegImp_PerBase','finalizo');
END;
$$;


--
-- Name: calprod_contar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calprod_contar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN  
execute Cal_Mensajes(pPeriodo, pCalculo,'CalProd_Contar','comenzo');  
--CalProd
--inicializa en cero cantidadconprecio
/*
UPDATE CalProd  SET CantidadConPrecio=0
  WHERE periodo=pPeriodo  AND calculo=pCalculo; 
*/
--le asigna valor a cantidadconprecio en los casos que corresponda
UPDATE CalDiv p SET CantidadConPrecio=
      (SELECT count(*)                  
         FROM CalObs c  
         WHERE c.periodo=p.Periodo AND c.calculo=p.Calculo AND c.producto=p.producto AND c.division=p.division
           AND c.promobs is not null
       )
   WHERE p.periodo=pPeriodo AND p.calculo=pCalculo;   

UPDATE CalProd p SET CantidadConPrecio=
      (SELECT sum(CantidadConPrecio)                  
         FROM CalDiv c  
         WHERE c.periodo=pPeriodo  AND c.calculo=pCalculo AND c.producto=p.producto
       )
   WHERE p.periodo=pPeriodo AND p.calculo=pCalculo;   

execute Cal_Mensajes(pPeriodo, pCalculo,'CalProd_Contar','finalizo');  

END;
$$;


--
-- Name: calprod_indexar(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calprod_indexar(pperiodo text, pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 vEmpezo  time:=clock_timestamp();
 vTermino time; 
 vcalprod RECORD;
 
BEGIN  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalProd_Indexar', ptipo:='comenzo');
UPDATE CalProd p 
   SET IndicePrel=case when cd0.PromDiv is null and c.esPeriodoBase='S' and (c.pb_CalculoBase is null or c.periodo=c.periodoAnterior) then p0.indice else cd.PromPrel/cd0.PromDiv*p0.indice end,
       Indice=    case when cd0.PromDiv is null and c.esPeriodoBase='S' and (c.pb_CalculoBase is null or c.periodo=c.periodoAnterior) then p0.indice else cd.PromDiv/cd0.PromDiv*p0.indice end
   FROM CalDiv cd,
        Calculos c,
        CalDiv cd0,
        CalProd p0
   WHERE c.periodo=pPeriodo AND c.calculo=pCalculo
     AND p.periodo=c.periodo AND p.calculo=c.calculo
     AND cd.periodo=p.periodo AND cd.calculo=p.calculo AND cd.producto=p.producto AND cd.division='0'
     AND p0.periodo=c.periodoAnterior AND p0.calculo=c.calculoAnterior AND p0.producto=p.producto 
     AND cd0.periodo=p0.periodo AND cd0.calculo=p0.calculo AND cd0.producto=p0.producto AND cd0.division='0';  
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalProd_Indexar', ptipo:='finalizo');
END;
$$;


--
-- Name: calprod_valorizar(text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.calprod_valorizar(pperiodo text, pcalculo integer, pagrupacionespecial text DEFAULT NULL::text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
  vcalprod RECORD;
 
BEGIN  

EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalProd_Valorizar', pTipo:='comenzo');

FOR vcalprod IN
  SELECT d.periodo, d.calculo, d.producto, a.agrupacion, a.cantporunidcons, u1.factor as factorucons, a.cantidad, u2.factor as factor
        , d.promdiv, d.PromedioRedondeado, a.pesovolumenporunidad 
    FROM CalDiv d
        JOIN CalProdAgr a ON d.periodo=a.periodo AND d.calculo=a.calculo AND d.producto=a.producto        
        JOIN Unidades u1 ON a.unidadmedidaporunidcons = u1.unidad 
        JOIN Unidades u2 ON a.unidaddemedida = u2.unidad  --PK verificada 
    WHERE d.periodo=pPeriodo AND d.calculo=pCalculo AND d.division='0'
      AND (a.agrupacion = pAgrupacionEspecial or pAgrupacionEspecial is null)
LOOP  
 UPDATE CalProdAgr SET  ValorProd 
   =(vcalprod.PromedioRedondeado*vcalprod.cantporunidcons*vcalprod.factorucons)/(vcalprod.cantidad*vcalprod.factor*COALESCE(vcalprod.pesovolumenporunidad,1))
   WHERE periodo = vcalprod.periodo AND calculo = vcalprod.calculo AND producto = vcalprod.producto AND agrupacion = vcalprod.agrupacion;  
END LOOP;
 
EXECUTE Cal_Mensajes(pPeriodo, pCalculo, 'CalProd_Valorizar', pTipo:='finalizo');
END;
$$;


--
-- Name: cambio_codigo_inf_2009(numeric, numeric); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cambio_codigo_inf_2009(pinfo numeric, plocal numeric) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
declare 
  vCodigo text:=substr(pInfo::text,1);
begin
  while substr(vCodigo,1,1)='9' and length(vCodigo)>1 loop
    vCodigo:=substr(vCodigo,2);
  end loop;
  if pLocal>9 then
    vCodigo:=vCodigo||pLocal::text;
  elseif pLocal<>1 then
    vCodigo:=vCodigo||'0'||pLocal::text;
  end if;
  -- /*
  while length(vCodigo)>6 loop
    vCodigo:=substr(vCodigo,2);
  end loop;
  -- */
  return vCodigo::integer;
end;
$$;


--
-- Name: cambio_panel_tarea_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cambio_panel_tarea_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

DECLARE
 vgenerado integer:=null;
 vmaxperiododesde character varying(11);
 vmaxrazon integer;
 vexistetar integer:=null;
 vexisteinf integer:=null;
 vexistevis integer:=null;
 vencuestador character varying(10):=NULL;
BEGIN
IF old.panel <> new.panel OR old.tarea <> new.tarea THEN --para que funcione al "importar" registros ya existentes
	--el panel al que me quiero mover debe estar generado
	SELECT distinct 1 INTO vgenerado
	FROM cvp.relvis 
	WHERE periodo = new.periodo and panel = new.panel;
	IF vgenerado is distinct from 1 THEN  
		RAISE EXCEPTION 'Falta generar el panel: % (periodo %)',new.panel, new.periodo;
		RETURN NULL;
	ELSE
		--el panel del que me quiero mover debe ser el último generado y no debe tener formularios ingresados
		SELECT maxperiodo, maxrazon INTO vmaxperiododesde, vmaxrazon
		FROM (SELECT MAX(periodo) maxperiodo FROM cvp.relvis WHERE panel = old.panel) v,
		LATERAL (SELECT MAX(razon) maxrazon FROM cvp.relvis WHERE periodo = maxperiodo AND panel = old.panel) r;       
		IF new.periodo is distinct from vmaxperiododesde THEN
			RAISE EXCEPTION '% No es el último periodo generado para el panel: %',new.periodo, old.panel;
			RETURN NULL;
		ELSE
			IF vmaxrazon is not null THEN
				RAISE EXCEPTION 'Hay formularios ingresados en el periodo: % panel: %',new.periodo, old.panel;
				RETURN NULL;
			ELSE
				--agregar la nueva tarea en reltar, si no existe 
				SELECT 1 INTO vexistetar
				FROM cvp.reltar 
				WHERE periodo = new.periodo and panel = new.panel and tarea = new.tarea;
				IF vexistetar is distinct from 1 THEN
					SELECT encuestador INTO vencuestador
					FROM cvp.tareas
					WHERE tarea = new.tarea AND activa='S';
					IF vencuestador is distinct from null THEN
						INSERT INTO cvp.reltar (periodo,panel,tarea,encuestador) VALUES (new.periodo,new.panel,new.tarea,vencuestador);
					ELSE
						RAISE EXCEPTION 'La tarea % no existe o no está activa',new.tarea;
						RETURN NULL;
					END IF;
				END IF;
				--agregar la nueva tarea en relinf, si no existe
				SELECT 1 INTO vexisteinf
				FROM cvp.relinf 
				WHERE periodo = new.periodo and panel = new.panel and tarea = new.tarea and informante = new.informante and visita = new.visita;
				--raise notice 'vexisteinf %', vexisteinf;
				IF vexisteinf is distinct from 1 THEN
					INSERT INTO cvp.relinf (periodo,informante,visita,panel,tarea) 
					values (new.periodo,new.informante,new.visita,new.panel,new.tarea);
				END IF;
				--borrar la vieja tarea de relinf, si deja de existir
				SELECT distinct 1 INTO vexistevis
				FROM cvp.relvis
				WHERE periodo = new.periodo and informante = new.informante and visita = new.visita and panel = old.panel and tarea = old.tarea
				and formulario <> new.formulario;
				--raise notice 'vexistevis %', vexistevis;
				IF vexistevis is distinct from 1 THEN
					DELETE FROM cvp.relinf
					WHERE periodo = new.periodo and informante = new.informante and visita = new.visita and panel = old.panel and tarea = old.tarea;
				END IF;
			END IF;
		END IF;
	END IF;
END IF;
RETURN NEW;

END;
$$;


--
-- Name: cambios_razon_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.cambios_razon_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

DECLARE
 vposinfnew cvp.razones.espositivoinformante%type;
 vposformnew cvp.razones.espositivoformulario%type;
 vposinfold cvp.razones.espositivoinformante%type;
 vposformold cvp.razones.espositivoformulario%type;
 vcantvisitapos integer;
 vcantprecios integer;
 vconjmuestral cvp.informantes.conjuntomuestral%type;
 vinformantespos text;
BEGIN
--IF OLD.razon <> -1 THEN
IF OLD.razon IS NOT NULL  THEN
    SELECT espositivoinformante, espositivoformulario INTO vposinfold, vposformold
         FROM  cvp.razones 
         WHERE razon=OLD.razon;
    IF  NEW.razon IS NOT NULL THEN
        SELECT espositivoinformante, espositivoformulario INTO vposinfnew, vposformnew
             FROM  cvp.razones 
             WHERE razon=NEW.razon;
    END IF;        
    --Caso de respuesta positiva a  negativa o nula
    IF (vposinfold='S' AND vposformold='S') AND (vposinfnew='N' OR vposformnew='N' OR NEW.razon IS NULL) THEN --OR POR LA RAZON 11
        SELECT count(*) INTO vcantprecios
            FROM cvp.relpre
            WHERE periodo=  NEW.periodo AND
                 informante=NEW.informante AND
                 visita=    NEW.visita AND
                 formulario=NEW.formulario AND
                 (precio IS NOT NULL OR
                 tipoprecio IS NOT NULL OR cambio='C') ;
        IF vcantprecios <> 0 THEN
            RAISE EXCEPTION 'Hay informacion en precios, no es posible modificar Razon';
            RETURN NULL;
        END IF;
    END IF;
    --Caso de respuesta negativa a positiva
    IF (vposinfold='N' OR vposformold='N') AND (vposinfnew='S' AND vposformnew='S' AND NEW.razon IS NOT NULL) THEN
        SELECT conjuntomuestral INTO vconjmuestral
            FROM  cvp.informantes 
            WHERE informante=NEW.informante;  
             
        SELECT count(*),
               string_agg( distinct c.informante::text,',') razones_posit         
           INTO vcantvisitapos, vinformantespos
           FROM cvp.relvis c, cvp.informantes i, cvp.razones r
           WHERE c.periodo=NEW.periodo AND
                 c.visita=NEW.visita AND  --observo para todos los formularios
                 c.informante=i.informante  AND
                 i.conjuntomuestral=vconjmuestral AND
                 c.razon=r.razon AND
                 c.informante <>NEW.informante AND
                 (r.escierredefinitivoinf='N' OR --or por la razon 11
                 r.escierredefinitivofor='N') ;

        IF vcantvisitapos <> 0 THEN
            RAISE EXCEPTION 'Ya existe mas de una visita con razon positiva ó negativa temporaria para el mismo conjunto muestral %  informantes: %', vconjmuestral, vinformantespos;
            RETURN NULL;
        END IF;
    END IF;   
END IF;
--END IF; 
RETURN NEW;

END;
$$;


--
-- Name: canastapobrezaunperiodo(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.canastapobrezaunperiodo(pperiodo text, pcalculo integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
   vEmpezo     time;  
   vTermino    time;  
begin
set search_path = cvp, comun, public;   
vEmpezo:=clock_timestamp(); 

DELETE FROM calprodAgr WHERE periodo = pPeriodo and calculo = pCalculo and agrupacion = 'D';
DELETE FROM calgru WHERE periodo = pPeriodo and calculo = pCalculo and agrupacion = 'D';
DELETE FROM calhoggru WHERE periodo = pPeriodo and calculo = pCalculo and agrupacion = 'D';
DELETE FROM calhogsubtotales WHERE periodo = pPeriodo and calculo = pCalculo and agrupacion = 'D';

EXECUTE cal_copiar_CalProdAgr(pPeriodo, pCalculo, 'D');

execute calprod_valorizar(pPeriodo, pCalculo, 'D');
execute calgru_valorizar(pPeriodo, pCalculo, 'D');
execute calhog_valorizar(pPeriodo, pCalculo, 'D');
execute calhog_subtotalizar(pPeriodo, pCalculo, 'D');

vTermino:=clock_timestamp();  
  Raise Notice '%', 'Valorizacion canasta pobreza: EMPEZO '||cast(vEmpezo as text)||' TERMINO '||cast(vTermino as text)||' DEMORO '||(vTermino - vEmpezo);  
  return 'Valorizacion canasta pobreza completa en '||(vTermino - vEmpezo);
end;
$$;


--
-- Name: completar_bebidas(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_bebidas() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vhgru Record;
  vhg  Record;
  vAgrupacion character varying(9);
  vPeriodo character varying(11);
  vcalculo integer;
BEGIN
vAgrupacion = 'A';
vcalculo = 0;
 FOR vhg IN 
    SELECT *
     FROM calHogGru c 
      WHERE c.calculo = vCalculo
        AND c.agrupacion = vAgrupacion
        AND c.grupo in ('A117','A118')
        AND c.valorhoggru is not null
    LOOP 
      UPDATE CalHogGru h SET valorhoggru = vhg.valorhoggru
        WHERE h.periodo = vhg.periodo
          AND h.calculo = vhg.calculo
          AND h.hogar = vhg.hogar
          AND h.agrupacion = 'B'
          AND h.grupo = vhg.grupo   
          AND h.ValorHogGru IS NULL;
      UPDATE CalHogGru h SET valorhoggru = vhg.valorhoggru
        WHERE h.periodo = vhg.periodo
          AND h.calculo = vhg.calculo
          AND h.hogar = vhg.hogar
          AND h.agrupacion = 'B'
          AND h.grupo = 'B' || substr(vhg.grupo,2,3)   
          AND h.ValorHogGru IS NULL;
          
    END LOOP;
END;
$$;


--
-- Name: completar_calculo_canasta_alimentaria_haciaatras(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_calculo_canasta_alimentaria_haciaatras() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE    
  vrec Record;
  vhgru Record;
  vhg  Record;
  vAgrupacion character varying(9);
  vPeriodo character varying(11);
  vcalculo integer;
BEGIN
vPeriodo = 'a2014m10';
vCalculo = 0;
vAgrupacion = 'B';
EXECUTE Cal_Mensajes(vPeriodo, vCalculo,'completar_calculo_canasta_alimentaria_haciaatras','comenzo');

--para los cuadros de canastas:
INSERT INTO cvp.cuadros (cuadro, descripcion, funcion, parametro1, periodo, nivel, grupo, agrupacion, encabezado, pie, ponercodigos, 
  agrupacion2, hogares, pie1, cantdecimales, desde, orden) 
  VALUES ('HC', 'Canastas de Consumo de la Ciudad de Buenos Aires', 'res_cuadro_matriz_canasta', 'Listado de Valorización de la Canasta', 'periodo',
  NULL, NULL, 'B', 'Cuadro HC||| IPCBA. Canastas de consumo de la Ciudad de Buenos Aires', 'Fuente: Dirección General de Estadística y Censos (Ministerio de Hacienda GCBA).', 
  NULL, NULL, NULL, '(**) Surge de dividir el valor mensual de la canasta por 30.|||(***) Dato provisorio.', NULL, NULL, NULL);
INSERT INTO cvp.cuadros_funciones (funcion, usa_parametro1, usa_periodo, usa_nivel, usa_grupo, usa_agrupacion, usa_ponercodigos, 
  usa_agrupacion2, usa_cuadro, usa_hogares, usa_cantdecimales, usa_desde, usa_orden) 
  VALUES ('res_cuadro_matriz_canasta', true, true, false, false, true, false, false, false, true, false, true, false);
UPDATE cvp.cuadros_funciones SET usa_ponercodigos = true where funcion = 'res_cuadro_matriz_canasta';
UPDATE cvp.cuadros SET ponercodigos = false where cuadro = 'HC';
--FIN para los cuadros de canastas

--Para los nuevos grupos de la canasta alimentaria:
delete from cvp.calhoggru where agrupacion = 'B' and grupo = 'A11';
delete from cvp.grupos where agrupacion = 'B' and grupo = 'A11';
--por las dudas, para recuperarlo:
--insert into cvp.grupos (agrupacion, grupo, grupopadre, nivel, esproducto, agrupacionorigen) VALUES ('B', 'A11', 'B11', 3, 'N', 'A');

insert into cvp.grupos (agrupacion, grupo, nombregrupo, grupopadre, nivel, esproducto) 
select 'B' as agrupacion, 'B'||substr(grupo,2,3) as grupo, nombregrupo, 'B'||substr(grupopadre,2,2) as grupopadre, nivel, esproducto 
from cvp.grupos where substr(grupo,2,3) between '111' and '119' and nivel = 3 and agrupacion = 'A';

insert into cvp.grupos (agrupacion, grupo, grupopadre, nivel, esproducto, agrupacionorigen) 
select 'B' as agrupacion, grupo, 'B'||substr(grupo,2,3) as grupopadre, 4::integer as nivel, esproducto, 'A' as agrupacionorigen 
from cvp.grupos where substr(grupo,2,3) between '111' and '119' and nivel = 3 and agrupacion = 'A';

delete from cvp.parhoggru where parametro='Nadeq' and agrupacion ='A' and grupo ='A11';
--por las dudas, para recuperarlo:
--insert into cvp.parhoggru values ('Nadeq','A','A11');
insert into cvp.parhoggru values ('Nadeq','A','A111');
insert into cvp.parhoggru values ('Nadeq','A','A112');
insert into cvp.parhoggru values ('Nadeq','A','A113');
insert into cvp.parhoggru values ('Nadeq','A','A114');
insert into cvp.parhoggru values ('Nadeq','A','A115');
insert into cvp.parhoggru values ('Nadeq','A','A116');
insert into cvp.parhoggru values ('Nadeq','A','A117');
insert into cvp.parhoggru values ('Nadeq','A','A118');
insert into cvp.parhoggru values ('Nadeq','A','A119');
--FIN Para los nuevos grupos de la canasta alimentaria

FOR vrec IN
   SELECT periodo 
    FROM cvp.calculos
    where calculo = 0 
    ORDER BY periodo 
LOOP
vPeriodo = vrec.periodo;
--PARTE CalGru
 --Se borra el grupo A11 agrupacion B porque se va a reemplazar por los grupos alimentarios de nivel 3
 DELETE FROM calgru 
   WHERE periodo = vPeriodo and calculo = vCalculo and agrupacion = 'B' and grupo = 'A11';  --pk verificada
   
 --se insertan los grupos alimentarios
 INSERT INTO CalGru(periodo, calculo, agrupacion, grupo, grupopadre, nivel, esproducto, ponderador)
      (SELECT vPeriodo, vCalculo, g.agrupacion, g.grupo, g.grupoPadre, g.nivel, g.esProducto, g.ponderador
         FROM Grupos g 
         WHERE g.agrupacion ='B' AND substr(grupo,2,3) between '111' and '119'); 

 --Como en Calgru_valorizar sólo para los grupos que se incorporan:
 --Hojas que no son producto y se construyen a partir de otra agrupacion       
 UPDATE CalGru cg SET ValorGru=cp.ValorGru
     FROM Calgru cp, Grupos g
     WHERE cg.periodo=vPeriodo AND cg.calculo=vCalculo AND cg.agrupacion= vAgrupacion AND cg.grupo=cp.grupo --PK verificada
       AND cp.periodo=cg.periodo AND cp.calculo=cg.calculo AND cp.agrupacion= g.agrupacionOrigen AND cp.grupo=cg.grupo--pk verificada
       AND cg.esproducto='N' AND g.agrupacionOrigen IS NOT NULL
       AND g.grupo=cg.grupo AND g.agrupacion=cg.Agrupacion --PK verificada
       AND substr(cg.grupo,2,3) between '111' and '119';
 -- GRUPOS 
 UPDATE CalGru cg SET ValorGru=SumValor
   FROM (SELECT ch.GrupoPadre, sum(ch.ValorGru) AS SumValor
           FROM CalGru ch
           WHERE ch.periodo=vPeriodo AND ch.calculo=vCalculo  AND ch.agrupacion=vAgrupacion
              AND substr(ch.grupo,2,3) between '111' and '119'           
           GROUP BY ch.GrupoPadre) ch
   WHERE cg.periodo=vPeriodo AND cg.calculo=vCalculo AND cg.agrupacion=vAgrupacion  AND cg.grupo=ch.grupoPadre -- PK verificada
     AND cg.nivel=3 AND cg.esproducto='N';
--FIN como en Calgru_valorizar sólo para los grupos que se incorporan
--variacion en calgru
  UPDATE CalGru c
    SET variacion=CASE WHEN c0.valorgru=0 THEN null ELSE round((c.valorgru/c0.valorgru*100-100)::decimal,1) END
    FROM CalGru c0,
         Calculos p   
    WHERE p.periodo=vPeriodo AND p.calculo=vCalculo --Pk verificada
      AND c.periodo=p.periodo AND c.calculo=p.calculo AND c.agrupacion=vAgrupacion AND substr(c.grupo,2,3) between '111' and '119'
      AND c0.periodo=p.periodoAnterior AND c0.calculo=p.calculoAnterior AND c0.agrupacion=c.agrupacion AND c0.grupo=c.grupo; --Pk verificada
--FIN variacion en calgru
--FIN PARTE CalGru

--PARTE CalHogGru
 vAgrupacion = 'A';
 UPDATE CalHogGru SET CoefHogGru = null 
   WHERE periodo = vPeriodo AND calculo = vCalculo AND agrupacion = vAgrupacion AND grupo = 'A11'; 
 INSERT INTO CalHogGru (periodo, calculo,hogar, agrupacion, grupo, CoefHogGru)
  (SELECT vPeriodo as Periodo, vCalculo as Calculo, Hogar, g.Agrupacion, g.Grupo
         , CASE WHEN MIN(COALESCE(ABS(CoefHogPar)))>0 THEN EXP(SUM(LN(NULLIF(CoefHogPar,0)))) ELSE 0 END AS CoefHogGru
     FROM hogpar h JOIN parhoggru g ON h.parametro = g.parametro  AND g.agrupacion=vAgrupacion
          INNER JOIN agrupaciones a ON g.agrupacion=a.agrupacion --PK verificada
     WHERE a.paraVariosHogares AND substr(g.grupo,2,3) between '111' and '119'
     GROUP BY Hogar, g.Agrupacion, g.Grupo
     ORDER BY Hogar, g.Agrupacion, g.Grupo);
-- inserto los coeficientes que están marcados con AgrupacionOrigen en Grupos.
vAgrupacion = 'B';
 INSERT INTO CalHogGru (periodo, calculo,hogar, agrupacion, grupo, CoefHogGru)
   (SELECT cg.Periodo, cg.Calculo, cg.Hogar, g.Agrupacion, cg.Grupo, cg.CoefHogGru
      FROM CalHogGru cg 
           INNER JOIN grupos g ON g.grupo=cg.grupo AND cg.agrupacion=g.AgrupacionOrigen --PK verificada
           INNER JOIN agrupaciones a ON g.agrupacion=a.agrupacion --PK verificada
      WHERE a.paraVariosHogares AND substr(g.grupo,2,3) between '111' and '119'
        AND cg.Periodo=vPeriodo AND cg.Calculo=vCalculo  AND g.Agrupacion=vAgrupacion
      ORDER BY cg.Hogar, g.Agrupacion, cg.Grupo);
-- sube por niveles
 INSERT INTO CalHogGru (periodo, calculo, hogar, agrupacion, grupo)
   (SELECT DISTINCT periodo, calculo, hogar, agrupacion, grupopadre
      FROM (SELECT c.*, g.grupopadre, g.nivel
              FROM CalHogGru c, Grupos g
              WHERE c.periodo = vPeriodo AND c.calculo = vCalculo AND c.agrupacion = g.agrupacion AND c.grupo = g.grupo 
                AND g.nivel = 4 AND c.agrupacion=vAgrupacion  AND substr(g.grupo,2,3) between '111' and '119') AS x);

 FOR vhgru IN --toma los grupos-Hoja de CalHogGru
   SELECT h.periodo, h.calculo, h.Hogar, h.agrupacion, h.grupo, c.valorgru, h.coefhoggru, g.agrupacionOrigen 
     FROM CalHogGru h 
          INNER JOIN Grupos g ON g.grupo = h.grupo AND g.agrupacion=h.agrupacion  --PK verificada
          INNER JOIN CalGru c ON c.grupo=g.grupo AND c.agrupacion = COALESCE(g.agrupacionOrigen,g.agrupacion) 
                              AND c.periodo = h.periodo AND c.calculo = h.calculo --PK verificada
     WHERE h.coefhoggru IS NOT NULL
       AND h.periodo = vPeriodo 
       AND h.calculo = vCalculo
       AND h.agrupacion in ('A', 'B')
       AND substr(g.grupo,2,3) between '111' and '119'
 LOOP
   UPDATE CalHogGru x SET valorHogGru = 
        CASE WHEN vhgru.agrupacionOrigen IS NULL THEN vhgru.valorGru * vhgru.coefHogGru 
            ELSE (SELECT valorHogGru 
                    FROM CalHogGru z 
                    WHERE z.periodo=x.periodo AND z.calculo=x.calculo 
                      AND z.agrupacion=vhgru.AgrupacionOrigen AND z.grupo=x.grupo AND z.hogar=x.hogar)
        END
     WHERE periodo = vhgru.periodo 
       AND calculo = vhgru.calculo 
       AND hogar = vhgru.Hogar 
       AND agrupacion = vhgru.agrupacion 
       AND grupo = vhgru.grupo;
 END LOOP;
 FOR vhg IN 
    SELECT h.periodo, h.calculo, h.Hogar, h.agrupacion, h.grupo
     FROM Grupos g 
      INNER JOIN CalHogGru h ON g.agrupacion = h.agrupacion AND g.grupo = h.grupo --FK verificada
      WHERE g.nivel = 3
        AND h.periodo = vPeriodo 
        AND h.calculo = vCalculo
        AND h.ValorHogGru IS NULL
        AND h.agrupacion=vAgrupacion
    LOOP 
      UPDATE CalHogGru c SET valorhoggru = 
        (SELECT SUM(valorhoggru)
           FROM Grupos g
               INNER JOIN CalHogGru h ON g.agrupacion = h.agrupacion AND g.grupo = h.grupo --FK verificada
           WHERE c.grupo = g.grupopadre
             AND c.periodo = h.periodo 
             AND c.calculo = h.calculo
             AND c.hogar = h.hogar
             AND c.agrupacion = h.agrupacion)
        WHERE periodo = vhg.periodo
          AND calculo = vhg.calculo
          AND hogar = vhg.hogar
          AND agrupacion = vhg.agrupacion
          AND grupo = vhg.grupo;       
    END LOOP;
--FIN PARTE CalHogGru
END LOOP;
EXECUTE Cal_Mensajes(vPeriodo, vCalculo,'completar_calculo_canasta_alimentaria_haciaatras','finalizo');     
END;
$$;


--
-- Name: completar_indexacion_agrupacionr(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_indexacion_agrupacionr() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodosA RECORD;
BEGIN

EXECUTE Cal_Mensajes('a2010m01', 0,'Completar_Indexacion_AgrupacionR', pTipo:='comenzo');  
ALTER TABLE calculos DISABLE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg;
FOR vperiodosA IN 
    SELECT c.periodo, c.calculo
      FROM calculos c , agrupaciones a
      WHERE c.calculo=0 AND a.agrupacion='R' and  a.tipo_agrupacion='INDICE'  
    --    AND c.periodo >='a2010m01'
      ORDER BY  c.periodo, c.calculo
  LOOP
  --  DELETE FROM calGru
  --    WHERE periodo=vperiodosA.Periodo AND calculo=vperiodosA.Calculo AND agrupacion='R';
    EXECUTE cvp.CalGru_Indexar_Otro(vperiodosA.periodo, 0, 'R'); 
    EXECUTE cvp.CalGru_Info_Otro(vperiodosA.periodo, 0, 'R'); 
  END LOOP; 
ALTER TABLE calculos ENABLE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg;  
EXECUTE Cal_Mensajes('a2010m01', 0,'Completar_Indexacion_AgrupacionR', pTipo:='finalizo');  
END;
$$;


--
-- Name: completar_indexacion_haciaatras(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_indexacion_haciaatras() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodosAgrup RECORD;
BEGIN

EXECUTE Cal_Mensajes('a2010m01', 0,'Completar_Indexacion_HaciaAtras', pTipo:='comenzo');  
ALTER TABLE calculos DISABLE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg;
FOR vperiodosAgrup IN 
    SELECT c.periodo, c.calculo, a.agrupacion
      FROM calculos c , agrupaciones a
      WHERE c.calculo=0 AND a.valoriza IS FALSE AND a.calcular_junto_grupo='Z'
      ORDER BY  c.periodo, c.calculo, a.agrupacion
  LOOP
    DELETE FROM calgru
      WHERE periodo=vperiodosAgrup.periodo AND calculo=vperiodosAgrup.Calculo AND agrupacion=vperiodosAgrup.agrupacion;
    execute CalGru_Indexar_Otro(vperiodosAgrup.periodo, vperiodosAgrup.Calculo, vperiodosAgrup.agrupacion );
  END LOOP; 
ALTER TABLE calculos ENABLE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg;  
EXECUTE Cal_Mensajes('a2010m01', 0,'Completar_Indexacion_HaciaAtras', pTipo:='finalizo');  
END;
$$;


--
-- Name: completar_nueva_valorizacion(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_nueva_valorizacion() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodosAgrup RECORD;
BEGIN

EXECUTE Cal_Mensajes('a2010m01', 0,'completar_nueva_valorizacion ', pTipo:='comenzo');  
FOR vperiodosAgrup IN 
    SELECT c.periodo, c.calculo, a.agrupacion, case when a.agrupacion='A' then true else false end AS actualizaCalprod
      FROM calculos c , agrupaciones a
      WHERE c.calculo=0 AND a.valoriza IS TRUE AND a.calcular_junto_grupo='Z'
      ORDER BY  c.periodo, c.calculo, a.agrupacion
  LOOP
    --raise notice 'Periodo % - Calculo% - Agrupacion % ', vperiodosAgrup.periodo, vperiodosAgrup.calculo, vperiodosAgrup.agrupacion::character varying(1); 
    execute Cal_Canasta_Valorizar(vperiodosAgrup.periodo, vperiodosAgrup.Calculo, vperiodosAgrup.agrupacion, vperiodosAgrup.actualizacalprod );
  END LOOP;  
EXECUTE Cal_Mensajes('a2010m01', 0,'completar_nueva_valorizacion', pTipo:='finalizo');  

END;
$$;


--
-- Name: completar_ponderadoresz(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_ponderadoresz() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 vmaxniv integer;
 vEmpezo  time:=clock_timestamp();
 vTermino time;
BEGIN 
SELECT MAX(nivel) INTO vmaxniv
  FROM cvp.grupos
  WHERE agrupacion='Z';
FOR i IN REVERSE vmaxniv-1..0 LOOP

UPDATE cvp.grupos g SET ponderador=
  (SELECT  SUM(g2.ponderador)  
     FROM  cvp.grupos g2
     WHERE  g2.grupopadre=g.grupo  AND g2.agrupacion=g.agrupacion 
     GROUP BY g2.grupopadre)  
  WHERE g.agrupacion='Z' AND g.nivel=i;     

END LOOP ;

vTermino:=clock_timestamp();
raise notice '%',' Completar_ponderadoresZ: Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
END;
$$;


--
-- Name: completar_valorizacion_nuevoshogares_haciaatras(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_valorizacion_nuevoshogares_haciaatras() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodosA RECORD;
BEGIN

EXECUTE Cal_Mensajes('a2010m01', 0,'Completar_Valorizacion_NuevosHogares_HaciaAtras', pTipo:='comenzo');  
ALTER TABLE calculos DISABLE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg;
FOR vperiodosA IN 
    SELECT c.periodo, c.calculo, a.agrupacion
      FROM calculos c , agrupaciones a
      WHERE c.calculo=0 AND a.valoriza IS TRUE AND a.calcular_junto_grupo='Z' and paravarioshogares IS TRUE
      ORDER BY  c.periodo, c.calculo, a.agrupacion
  LOOP
    DELETE FROM calHogGru
      WHERE periodo=vperiodosA.Periodo AND calculo=vperiodosA.Calculo AND agrupacion=vperiodosA.Agrupacion;
    DELETE FROM CalHogSubtotales
      WHERE periodo=vperiodosA.Periodo AND calculo=vperiodosA.Calculo AND agrupacion=vperiodosA.Agrupacion;
  
    EXECUTE CalHog_Valorizar(vperiodosA.Periodo, vperiodosA.Calculo, vperiodosA.Agrupacion); 
    EXECUTE CalHog_Subtotalizar(vperiodosA.Periodo, vperiodosA.Calculo, vperiodosA.Agrupacion); 

  END LOOP; 
ALTER TABLE calculos ENABLE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg;  
EXECUTE Cal_Mensajes('a2010m01', 0,'Completar_Valorizacion_NuevosHogares_HaciaAtras', pTipo:='finalizo');  
END;
$$;


--
-- Name: completar_valorizacion_unhogar(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_valorizacion_unhogar(phogar text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodosA RECORD;
BEGIN

EXECUTE Cal_Mensajes('a2012m07', 0,'Completar_Valorizacion_UnHogar', pTipo:='comenzo');  
ALTER TABLE calculos DISABLE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg;
FOR vperiodosA IN 
    SELECT c.periodo, c.calculo, a.agrupacion
      FROM calculos c , agrupaciones a
      WHERE c.calculo=0 AND a.valoriza IS TRUE AND a.calcular_junto_grupo='Z' and paravarioshogares IS TRUE 
        AND c.periodo >='a2012m07'
      ORDER BY  c.periodo, c.calculo, a.agrupacion
  LOOP
    DELETE FROM calHogGru
      WHERE periodo=vperiodosA.Periodo AND calculo=vperiodosA.Calculo AND agrupacion=vperiodosA.Agrupacion AND hogar=phogar;
    DELETE FROM CalHogSubtotales
      WHERE periodo=vperiodosA.Periodo AND calculo=vperiodosA.Calculo AND agrupacion=vperiodosA.Agrupacion AND hogar=phogar;
  
    EXECUTE CalHog_Valorizar_UnHog(vperiodosA.Periodo, vperiodosA.Calculo, vperiodosA.Agrupacion, phogar); 
    EXECUTE CalHog_Subtotalizar_UnHog(vperiodosA.Periodo, vperiodosA.Calculo, vperiodosA.Agrupacion, phogar); 

  END LOOP; 
ALTER TABLE calculos ENABLE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg;  
EXECUTE Cal_Mensajes('a2012m07', 0,'Completar_Valorizacion_UnHogar', pTipo:='finalizo');  
END;
$$;


--
-- Name: completar_variacion_canasta(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.completar_variacion_canasta() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodosAgrup RECORD;
BEGIN

EXECUTE Cal_Mensajes('a2010m01', 0,'completar_variacion_canasta', pTipo:='comenzo');  
FOR vperiodosAgrup IN 
    SELECT c.periodo, c.calculo, a.agrupacion
      FROM calculos c , agrupaciones a
      WHERE c.calculo=0 AND a.valoriza IS TRUE AND a.calcular_junto_grupo='Z'
      ORDER BY  c.periodo, c.calculo, a.agrupacion
  LOOP
    execute CalGru_Canasta_Variacion(vperiodosAgrup.periodo, vperiodosAgrup.Calculo, vperiodosAgrup.agrupacion );
  END LOOP;  
EXECUTE Cal_Mensajes('a2010m01', 0,'completar_variacion_canasta', pTipo:='finalizo');  

END;
$$;


--
-- Name: concoeficientesnulos(character varying, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.concoeficientesnulos(pperiodo character varying, pcalculo integer, phogar character varying, pagrupacion character varying, pgrupo character varying) RETURNS character varying
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$  
declare
 vproducto character varying;
 vcoef RECORD;
begin
vproducto := 'N';

FOR vcoef IN
  SELECT pPeriodo, pCalculo, Hogar, Agrupacion, Grupo, CoefHogPar
    FROM hogparAgr h JOIN parhoggru g ON h.parametro = g.parametro AND h.agrupacion = g.agrupacion
    WHERE Hogar = pHogar 
      AND Agrupacion = pAgrupacion
      AND Grupo = pGrupo 
LOOP
  IF vcoef.CoefHogPar = 0 THEN
     vproducto := 'S';
	 EXIT;
  END IF;
END LOOP;
RETURN vproducto;
end;
$$;


--
-- Name: controlar_actualizacion_datos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.controlar_actualizacion_datos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$  
DECLARE
 vpositivoinf  cvp.razones.espositivoinformante%type; 
 vpositivoform cvp.razones.espositivoformulario%type;
 vrazon        cvp.razones.razon%type;
 
BEGIN
  IF TG_TABLE_NAME= 'relpre' THEN
    SELECT razon INTO vrazon
      FROM cvp.relvis
      WHERE periodo=NEW.periodo AND informante=NEW.informante AND visita=NEW.visita AND formulario=NEW.formulario;
  
    IF vrazon is NOT NULL THEN
      SELECT espositivoinformante, espositivoformulario INTO vpositivoinf, vpositivoform
          FROM cvp.razones
          WHERE razon=vrazon;
    END IF;
    IF (OLD.precio IS DISTINCT FROM NEW.precio) OR (OLD.tipoprecio IS DISTINCT FROM NEW.tipoprecio) OR (OLD.cambio IS DISTINCT FROM NEW.cambio) OR ( OLD.comentariosrelpre IS DISTINCT FROM NEW.comentariosrelpre )THEN
         IF vpositivoinf='N' OR vpositivoform='N' OR  vrazon is NULL  THEN
             RAISE EXCEPTION ' No es posible modificar los campos de precios cuando el valor de Razon No es Positivo';
             RETURN NULL;
         END IF;
    END IF;         
  ELSIF TG_TABLE_NAME= 'relatr' THEN
    SELECT razon INTO vrazon
      FROM cvp.relvis v 
        inner join cvp.relpre p ON v.periodo=p.periodo and v.informante=p.informante and v.visita=p.visita and p.formulario=v.formulario --PK:controlada (de relvis)
      WHERE p.periodo=NEW.periodo AND p.informante=NEW.informante AND p.visita=NEW.visita 
        AND p.producto=NEW.producto AND p.observacion=NEW.observacion; --PK:contolada (de relpre)
    IF vrazon is NOT NULL THEN
      SELECT espositivoinformante, espositivoformulario INTO vpositivoinf, vpositivoform
        FROM cvp.razones
        WHERE razon=vrazon;
    END IF;  
   
    IF OLD.valor IS DISTINCT FROM NEW.valor THEN
      IF vpositivoinf='N' OR vpositivoform='N' OR vrazon is NULL  THEN
        RAISE EXCEPTION ' No es posible modificar atributos cuando el valor de Razon No es Positivo';
        RETURN NULL;
      END IF; 
    END IF;
            
  END IF;
  RETURN NEW;
END;$$;


--
-- Name: controlar_existencia_visita_1_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.controlar_existencia_visita_1_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 vHay INTEGER; 
BEGIN
  IF new.visita > 1 THEN
    IF TG_TABLE_NAME= 'relvis' THEN
      SELECT 1 INTO vHay
        FROM cvp.relvis 
        WHERE periodo=new.periodo
          AND informante=new.informante
          AND formulario=new.formulario
          AND visita=new.visita-1;
      IF vHay is null THEN
        RAISE EXCEPTION 'Se quiere insertar la visita % y NO hay datos de la visita inmediata anterior % , en la tabla %: % i% f%'
          ,new.visita, new.visita-1,tg_table_name,new.periodo,new.informante,new.formulario;
        RETURN NULL;
      END IF;       
    ELSIF TG_TABLE_NAME= 'relpre' THEN
      SELECT 1 into vHay
        FROM cvp.relpre
        WHERE periodo=new.periodo
          AND informante=new.informante
          AND producto=new.producto
          AND observacion=new.observacion
          AND visita=new.visita-1;
      IF vHay is null THEN
        RAISE EXCEPTION 'Se quiere insertar la visita % y NO hay datos de la visita inmediata anterior % , en la tabla %: % i% % obs %'
          ,new.visita, new.visita-1,tg_table_name,new.periodo,new.informante,new.producto,new.observacion;
        RETURN NULL;
      END IF;       
    ELSIF TG_TABLE_NAME= 'relatr' THEN
      SELECT 1 into vHay
        FROM cvp.relatr
        WHERE periodo=new.periodo
          AND informante=new.informante
          AND producto=new.producto
          AND observacion=new.observacion
          AND atributo=new.atributo
          AND visita=new.visita-1;
      IF vHay is null THEN
        RAISE EXCEPTION 'Se quiere insertar la visita % y NO hay datos de la visita inmediata anterior % , en la tabla %: % i% % obs % atr %'
          ,new.visita, new.visita-1,tg_table_name,new.periodo,new.informante,new.producto,new.observacion,new.atributo;
        RETURN NULL;
      END IF;       
    END IF;
  END IF;
  RETURN NEW;
END;$$;


--
-- Name: controlar_revision_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.controlar_revision_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
IF OLD.revisado IS DISTINCT FROM NEW.revisado and NEW.calculo > 0 /*es una copia del calculo*/ THEN
   RAISE EXCEPTION ' No es posible modificar el valor de revisado en una copia del cálculo';
   RETURN NULL;
END IF;
RETURN NEW;
END;
$$;


--
-- Name: controlarrubforprod(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.controlarrubforprod() RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
repetidos integer;
faltan integer;
BEGIN
-- veamos que no hay productos repetidos en el nuevo estado

select max(cuenta) into repetidos from 
(select fp.producto, rf.rubro, comun.concato(fp.formulario||' ') as formularios, count(*) as cuenta
	,comun.concato(f.nombreformulario||' - ') as nombres_formularios ,p.nombreproducto, r.nombrerubro
  from cvp.tmp_v_rubfor rf inner join cvp.tmp_v_forprod fp on rf.formulario=fp.formulario
	inner join cvp.rubros r on r.rubro=rf.rubro
	inner join cvp.tmp_v_formularios f on f.formulario=rf.formulario
	inner join cvp.productos p on p.producto=fp.producto
  group by fp.producto, rf.rubro
	,p.nombreproducto, r.nombrerubro) as A;

-- Si arriba no aparece ningún renglón con el count>1 es porque no hay repetidos. OK!!
if repetidos> 1 then
return 1;
else
-- No debe faltar ningún Prod-Rub
    -- no lo consideramos erróneo según mail de Emilio
	--CCBA2011 -Continuamos con la descripcion del proceso de cambio RubForProd del 18/07/2011
	--select count(*) from cvp.tmp_v_EstadoActual_Faltan_en_Nuevo;
	
	-- debe estar vacio. 
	-- Envíamos por mail el 16/7 un excel llamado:
	-- ErroresRubForProd_en_excel.xls

	-- como ahora no está vacío veamos si tienen precio positivo:
    
	select count(*) into faltan from cvp.RelPre rp inner join cvp.informantes i on rp.informante=i.informante
	  inner join cvp.tmp_v_EstadoActual_Faltan_en_Nuevo x on x.producto=rp.producto and x.rubro=i.rubro
	  where periodo>='a2011m03';
	-- hubiera sido mejor que esto esté vacío pero no. Enviamos en el mismo mail el excel:
	-- ErroresRubForProd_en_precios.xls
	-- Excel coregido por Guille el 17/07/2011, no hay precios 
    if faltan > 0 THEN
	   return 1;
	  else
	   return 0;
	  end if;
end if;
END;
$$;


--
-- Name: copiarcalculo(text, integer, text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.copiarcalculo(p_periodo_origen text, p_calculo_origen integer, p_periodo_destino text, p_calculo_destino integer, p_motivocopia text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  -- V081116
  v_abierto_origen text;
BEGIN
  IF p_calculo_destino=0 THEN
    RAISE EXCEPTION 'El cálculo de destino no puede ser 0 para % % -> % %',p_periodo_origen , p_calculo_origen ,p_periodo_destino , p_calculo_destino;
  END IF;
  SELECT abierto INTO v_abierto_origen
    FROM calculos
    WHERE periodo=p_periodo_origen
      AND calculo=p_calculo_origen;
  -- Si el destino existe tiene que fallar 
  -- Inserto
  INSERT INTO calculos(periodo, calculo, 
                esperiodobase, fechacalculo, periodoanterior, calculoanterior, denominadordefinitivosegimp, descartedefinitivosegimp,
                abierto, modi_usu, modi_fec, modi_ope, agrupacionprincipal, 
                valido, pb_calculobase, motivocopia, fechageneracionexternos, estimacion, transmitir_canastas, fechatransmitircanastas)
        SELECT p_periodo_destino, p_calculo_destino, 
                esperiodobase,  fechacalculo, periodoanterior, calculoanterior, denominadordefinitivosegimp, descartedefinitivosegimp,
                abierto, modi_usu, modi_fec, modi_ope, agrupacionprincipal, 
                valido, pb_calculobase, p_motivocopia, fechageneracionexternos, estimacion, transmitir_canastas, fechatransmitircanastas
          FROM calculos
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  INSERT INTO calgru(periodo, calculo, 
                agrupacion, grupo, variacion, impgru, valorprel, 
                valorgru, grupopadre, nivel, esproducto, ponderador, indice, 
                indiceprel, incidencia, indiceredondeado, incidenciaredondeada, ponderadorimplicito)        
        SELECT p_periodo_destino, p_calculo_destino, 
               agrupacion, grupo, variacion, impgru, valorprel, 
                valorgru, grupopadre, nivel, esproducto, ponderador, indice, 
                indiceprel, incidencia, indiceredondeado, incidenciaredondeada, ponderadorimplicito
          FROM calgru
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  INSERT INTO calprod(periodo, calculo, 
               producto, promprod, impprod, valorprod, cantincluidos, 
               promprel, valorprel, cantaltas, promaltas, cantbajas, prombajas, 
               cantperaltaauto, cantperbajaauto, esexternohabitual, imputacon, 
               cantporunidcons, unidadmedidaporunidcons, pesovolumenporunidad, 
               cantidad, unidaddemedida, indice, indiceprel)
        SELECT p_periodo_destino, p_calculo_destino, 
               producto, promprod, impprod, valorprod, cantincluidos, 
           promprel, valorprel, cantaltas, promaltas, cantbajas, prombajas, 
           cantperaltaauto, cantperbajaauto, esexternohabitual, imputacon, 
           cantporunidcons, unidadmedidaporunidcons, pesovolumenporunidad, 
           cantidad, unidaddemedida, indice, indiceprel
          FROM calprod
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  INSERT INTO calProdResp(periodo, calculo, producto, responsable, revisado)
        SELECT p_periodo_destino, p_calculo_destino, producto, responsable, revisado
          FROM calProdResp
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  --para limpiar las revisiones: 
  DELETE FROM calProdResp WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  --
  INSERT INTO calprodAgr(periodo, calculo, agrupacion, 
               producto, cantporunidcons, valorprod, unidadmedidaporunidcons,
               cantidad, unidaddemedida, pesovolumenporunidad)
        SELECT p_periodo_destino, p_calculo_destino, agrupacion, 
               producto, cantporunidcons, valorprod, unidadmedidaporunidcons,
               cantidad, unidaddemedida, pesovolumenporunidad
          FROM calprodAgr
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  INSERT INTO caldiv(periodo, calculo,
                   producto, division, prompriimpact, prompriimpant, 
                   cantpriimp, promprel, promdiv, impdiv, cantincluidos, cantrealesincluidos, 
                   cantrealesexcluidos, promvar, cantaltas, promaltas, cantbajas, 
                   prombajas, cantimputados, ponderadordiv, umbralpriimp, umbraldescarte, 
                   umbralbajaauto, cantidadconprecio, profundidad, divisionpadre, 
                   tipo_promedio, raiz, cantexcluidos, promexcluidos, promimputados,
                   promrealesincluidos, promrealesexcluidos, promedioRedondeado, cantrealesdescartados,
				   cantpreciostotales, cantpreciosingresados, CantConPrecioParaCalEstac, promsinimpext, PromRealesSinCambio, PromRealesSinCambioAnt,
                   PromSinAltasBajas, PromSinAltasBajasAnt)
        SELECT p_periodo_destino, p_calculo_destino, 
                producto, division, prompriimpact, prompriimpant, 
               cantpriimp, promprel, promdiv, impdiv, cantincluidos, cantrealesincluidos, 
               cantrealesexcluidos, promvar, cantaltas, promaltas, cantbajas, 
               prombajas, cantimputados, ponderadordiv, umbralpriimp, umbraldescarte, 
               umbralbajaauto, cantidadconprecio, profundidad, divisionpadre, 
               tipo_promedio, raiz, cantexcluidos, promexcluidos, promimputados,
               promrealesincluidos, promrealesexcluidos, promedioRedondeado, cantrealesdescartados,
			   cantpreciostotales, cantpreciosingresados, CantConPrecioParaCalEstac, promsinimpext, PromRealesSinCambio, PromRealesSinCambioAnt,
               PromSinAltasBajas,PromSinAltasBajasAnt
          FROM caldiv
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  INSERT INTO calobs(periodo, calculo,
                producto, informante, observacion, division, 
                promobs, impobs, antiguedadconprecio, antiguedadsinprecio, antiguedadexcluido, 
                antiguedadincluido, sindatosestacional, muestra)
        SELECT p_periodo_destino, p_calculo_destino, 
               producto, informante, observacion, division, 
                promobs, impobs, antiguedadconprecio, antiguedadsinprecio, antiguedadexcluido, 
                antiguedadincluido, sindatosestacional, muestra
          FROM calobs
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  INSERT INTO calHogGru(periodo, calculo,
                        hogar, agrupacion, grupo, valorhoggru, coefhoggru)
        SELECT p_periodo_destino, p_calculo_destino, 
           hogar, agrupacion, grupo, valorhoggru, coefhoggru
          FROM calHogGru
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;
  INSERT INTO calHogSubtotales(periodo, calculo,
                               hogar, agrupacion, grupo, valorhogsub)
        SELECT p_periodo_destino, p_calculo_destino,
            hogar, agrupacion, grupo, valorhogsub
          FROM calHogSubtotales
          WHERE periodo=p_periodo_origen AND calculo=p_calculo_origen;

  RETURN 'Copia lista';
END;
$$;


--
-- Name: correr_normalizacion_moneda_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.correr_normalizacion_moneda_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vprodmoneda record;
BEGIN 
 FOR vprodmoneda IN
   SELECT producto, atributo
     FROM cvp.prodatr
     WHERE tiponormalizacion='Moneda'
 LOOP    
   UPDATE cvp.relatr ra SET valor=valor
     FROM cvp.relpre p 
     LEFT JOIN cvp.tipopre t ON p.tipoprecio = t.tipoprecio 
     WHERE ra.periodo=NEW.periodo AND ra.producto=vprodmoneda.producto AND ra.atributo=vprodmoneda.atributo
       and p.periodo = ra.periodo and p.producto = ra.producto and p.observacion = ra.observacion and p.informante = ra.informante and p.visita = ra.visita 
       and not t.registrablanqueo;  
 END LOOP;   
 RETURN NEW;
END;  
$$;


--
-- Name: crear_vista_calobs_periodos(integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.crear_vista_calobs_periodos(pcalculo integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_X$
DECLARE
vSql text;
vSql_parte1 text;
vSql_parte2 text;
i integer;
vperiodos RECORD;

BEGIN
/* Consulta básica versión optimizada
SELECT division, informante, observacion,
         avg(case when periodo='a2012m03' then promObs else null end) as a2012m03_prom,
         max(case when periodo='a2012m03' then coalesce(impObs,'')||':' else null end) as a2012m03_sennal,
         avg(case when periodo='a2012m04' then promObs else null end) as a2012m04_prom,
         max(case when periodo='a2012m04' then coalesce(impObs,'')||':' else null end) as a2012m04_sennal
   FROM cvp.calobs c -- left join cvp.relpre r 
   WHERE producto='" & Producto & "'
   GROUP BY division, informante, observacion
   ORDER BY 1,2,3"))
*/

vSql := $$ DROP VIEW IF EXISTS CalObs_Periodos; $$;
EXECUTE vSql;

vSql_parte1 := $$ CREATE OR REPLACE VIEW CalObs_Periodos AS SELECT c.producto, c.informante, c.observacion$$;

vSql_parte2 := $$ FROM CalObs c 
                    LEFT JOIN RelPre r ON c.periodo = r.periodo AND c.producto = r.producto AND c.informante = r.informante
                                        AND c.observacion = r.observacion AND r.visita = 1
                  WHERE calculo = $$||pCalculo||$$
                  GROUP BY c.producto, c.informante, c.observacion
                  ORDER BY c.producto, c.informante, c.observacion $$;

i:= 0;
for vperiodos in
   SELECT DISTINCT periodo
     FROM CalObs_vw --vista con cálculos 0 y -1
     WHERE calculo = pCalculo
     ORDER BY periodo     
Loop
   i := i+1;
   --vSql_parte1 := vSql_parte1 ||$$, c$$||i||$$.promobs $$||vperiodos.periodo||$$_prom,
   
  vSql_parte1 := vSql_parte1 ||$$, ROUND(avg(case when c.periodo='$$||vperiodos.periodo||$$' then c.promObs else null end)::DECIMAL,2) as $$||vperiodos.periodo||$$_prom, 
    MAX(CASE WHEN c.periodo='$$||vperiodos.periodo||$$' THEN 
           CASE WHEN c.antiguedadexcluido>0 THEN 'X' ELSE '' END
           ||coalesce(c.impobs,'')||CASE WHEN r.tipoprecio IS NOT NULL THEN ':' ELSE '' END
           ||coalesce(r.tipoprecio,'')||CASE WHEN r.cambio IS NOT NULL THEN ',' ELSE '' END
           ||coalesce(r.cambio,'')
        ELSE NULL END) as $$||vperiodos.periodo||$$_imp$$;
end loop;

vSql := vSql_parte1||vSql_parte2||$$;$$;

EXECUTE vSql;

vSql := $$GRANT ALL ON TABLE CalObs_Periodos TO cvpowner;
          GRANT SELECT ON TABLE CalObs_Periodos TO cvp_administrador;$$;
          
EXECUTE vSql;

 END;
$_X$;


--
-- Name: desp_actualizar_ultima_visita_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.desp_actualizar_ultima_visita_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vHay INTEGER; 
  vmaxvisita INTEGER;
  
BEGIN

IF NEW.ultima_visita IS NULL THEN 
  SELECT 1 INTO vmaxvisita
    FROM cvp.relpre 
    WHERE periodo = new.periodo and informante = new.informante and producto =new.producto and observacion = new.observacion
          AND visita = new.visita +1;
      
  IF vmaxvisita is null THEN
    INSERT INTO cvp.relpre(periodo, producto, observacion, informante, formulario, visita, especificacion, ultima_visita)
        VALUES(new.periodo, new.producto, new.observacion, new.informante, new.formulario, new.visita +1, new.especificacion, true); 
  END IF;
END IF;  
RETURN NEW;
END;
$$;


--
-- Name: devolver_mes(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.devolver_mes(pperiodo text) RETURNS text
    LANGUAGE sql
    AS $_$
    SELECT TO_CHAR(TO_DATE(SUBSTR($1,7,2)||'/'||SUBSTR($1,2,4),'mm'),'TMMonth') 
  $_$;


--
-- Name: devolver_mes_anio(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.devolver_mes_anio(pperiodo text) RETURNS text
    LANGUAGE sql
    AS $_$
    SELECT REPLACE(TO_CHAR(TO_DATE(SUBSTR($1,7,2)||'/'||SUBSTR($1,2,4),'mm/yyyy'),'TMMonth yyyy'), ' ', ' de ') 
  $_$;


--
-- Name: diferenciaentreperiodosparar(text, integer, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.diferenciaentreperiodosparar(periodoinicio text, pinformante integer, pperiododesde text, pperiodohasta text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
--calcula la cantidad de periodos que hay entre dos períodos pPeriodoDesde, pPeriodoHasta
--si pPeriodoDesde < PeriodoInicio, entonces se empieza a contar desde PeriodoInicio.
--si no se especifica pPeriodoDesde (pPeriodoDesde= null), entonces calcular la diferencia entre 
--primera_aparicion y periodo_hasta, siendo primera_aparicion el primer periodo en el que aparece el informante
  DECLARE
  intervalo integer;
  minper text;
  BEGIN
  if pPeriodoDesde is null then
    --periodo de aparición del informante:
    SELECT min(periodo) INTO minper 
	  from cvp.relpre
	  where informante = pInformante;
    select count(*) into intervalo
      from cvp.periodos 
      where PeriodoInicio <= periodo and minper <= periodo and periodo < pPeriodoHasta;
      --intervalo = intervalo + 1;
  else
    select count(*) into intervalo
      from cvp.periodos 
      where PeriodoInicio <= periodo and pPeriodoDesde < periodo and periodo < pPeriodoHasta;
  END IF;
  RETURN intervalo;
  END;
$$;


--
-- Name: distanciaperiodos(text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.distanciaperiodos(deperiodo text, aperiodo text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
--Retorna la cantidad de meses entre 2 periodos
declare
  DPeriodo date;
  HastaPeriodo date;
  CantPeriodos integer;
begin
DPeriodo := substr(deperiodo,2,4)||'-'||substr(deperiodo,7,2)||'-01' as date; --primer día del periodo deperiodo
HastaPeriodo := substr(aperiodo,2,4)||'-'||substr(aperiodo,7,2)||'-01' as date; --primer día del periodo aperiodo

CantPeriodos:= (DATE_PART('year', DPeriodo::date) - DATE_PART('year', HastaPeriodo::date)) * 12 +
               (DATE_PART('month', DPeriodo::date) - DATE_PART('month', HastaPeriodo::date));
return CantPeriodos;
end;
$$;


--
-- Name: ejecuta_act_precios_normalizados(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.ejecuta_act_precios_normalizados() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodos RECORD;
  cantnormalizados INTEGER;
  vRta TEXT:='';
  vEmpezo  time:=clock_timestamp();
  vTermino time; 
BEGIN
  FOR vperiodos IN 
    SELECT periodo
	  FROM cvp.periodos 
      ORDER BY periodo
  LOOP
    cantnormalizados=cvp.actualizacion_precionormalizado(vperiodos.periodo);
    raise notice 'Ejecuta_act_precionormaliz Periodo % Cantregistros % ', vperiodos.periodo, cantnormalizados;      
    vRta:=vRta || ', Periodo ' || vperiodos.periodo ||' '||cantnormalizados ;
  END LOOP;  
  vTermino:=clock_timestamp();
  raise notice '%','Ejecuta_act_precios_normalizados: Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
  RETURN '' || substr(vRta,2);
END;
$$;


--
-- Name: ejecuta_act_precios_normalizados_ph(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.ejecuta_act_precios_normalizados_ph(pproducto text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vperiodos RECORD;
  cantnormalizados INTEGER;
  vRta TEXT:='';
  vEmpezo  time:=clock_timestamp();
  vTermino time; 
BEGIN
  FOR vperiodos IN 
    SELECT periodo
	  FROM cvp.periodos 
      ORDER BY periodo
  LOOP
    cantnormalizados=cvp.actualizacion_precionormalizado_ph(vperiodos.periodo, pProducto);
    raise notice 'Ejecuta_act_precionormaliz Periodo % Cantregistros % ', vperiodos.periodo, cantnormalizados;      
    vRta:=vRta || ', Periodo ' || vperiodos.periodo ||' '||cantnormalizados ;
  END LOOP;  
  vTermino:=clock_timestamp();
  raise notice '%','Ejecuta_act_precios_normalizados: Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);
  RETURN '' || substr(vRta,2);
END;
$$;


--
-- Name: elegir_tarea_aleatoria_con_criterio(text, integer, cvp.tarea_puntos[]); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.elegir_tarea_aleatoria_con_criterio(pperiodo text, ppanel integer, ptareascandidatas cvp.tarea_puntos[]) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vx                double precision;
  vprob1            double precision;
  vprob2            double precision;
  vprobper          double precision;
  vprobpantar       double precision;
  vcriterio_elegido text;
  vtarea_elegida    integer;
  vperiodo          text;
  vencuestador      text;
  vorden            double precision;
  vrecenc           record;
  vrecpantar        record;
  rtp               cvp.tarea_puntos;
  vsuma             integer := 0;
  vr                double precision;

BEGIN
  --elijo el criterio
  vx=random();
  SELECT sup_aleat_prob1, sup_aleat_prob2, sup_aleat_prob_per, sup_aleat_prob_pantar
    INTO vprob1, vprob2, vprobper, vprobpantar
    FROM cvp.parametros;  
  IF vx < vprob1 THEN vcriterio_elegido = 'A';
    ELSIF vprob1 >= vx and vx <= vprob2 THEN vcriterio_elegido = 'B';
    ELSE vcriterio_elegido = 'C';
  END IF;
  RAISE NOTICE  'elegir_tarea_aleatoria_con_criterio criterio_elegido  % ', vcriterio_elegido;        

  FOREACH rtp IN ARRAY ptareascandidatas
  LOOP
      vsuma := vsuma + rtp.puntos;
  END LOOP;
  vx=random();       
  vr= vx*vsuma;
  
  CASE WHEN vcriterio_elegido= 'A' THEN --Equiprobable (todos los paneles-tarea tienen la misma probabilidad)
    --los ordeno por un número al azar y tomo el primero
    select r.periodo, tarea, encuestador, random() as orden INTO
        vperiodo, vtarea_elegida, vencuestador, vorden
    from cvp.reltar r left join cvp.periodos p on r.periodo = p.periodo 
    where p.ingresando = 'S' --and r.supervisor is null
    --y la tarea está entre las taras candidatas
    and array[(r.tarea,1)::cvp.tarea_puntos] <@ (ptareascandidatas)
    order by 4, periodo desc
    limit 1;
    RAISE NOTICE  'tarea  % esta en las tarea candidatas %', array[(vtarea_elegida,1)::cvp.tarea_puntos], ptareascandidatas;
  WHEN vcriterio_elegido= 'B' THEN --Pesado por tiempo que no se supervisó el encuestador
    --ordenar por supervisión del encuastador de la más vieja a la más nueva
    FOR vrecenc in
        SELECT r.tarea, r.encuestador, vfechaultsupencuestador 
        FROM cvp.reltar r 
          INNER JOIN cvp.relpan as c ON c.periodo= r.periodo AND c.panel=r.panel      
          LEFT JOIN (SELECT v.tarea, v.encuestador, max(CASE WHEN v.realizada='S' THEN p.fechasalida ELSE NULL END) vfechaultsupencuestador, MIN(p.fechasalida) vfechaprimerencuestador 
                        FROM cvp.reltar v   
                          JOIN cvp.relpan p ON p.periodo=v.periodo AND p.panel=v.panel --pk verificada
                          WHERE v.periodo > pinicio
                        GROUP by v.tarea, v.encuestador ) as b ON r.encuestador=b.encuestador 
        WHERE r.periodo=pperiodo AND r.panel=ppanel --and r.supervisor is null
        --y la tarea está entre las taras candidatas
        and array[(r.tarea,1)::cvp.tarea_puntos] <@ (ptareascandidatas)
        ORDER BY 3
    loop
      RAISE NOTICE  'tarea  % esta en las tarea candidatas %', array[(vrecenc.tarea,1)::cvp.tarea_puntos], ptareascandidatas;
      RAISE NOTICE  'Radom  % ProbPantar %', vx, vprobpantar;
      /*
      IF vx < vprobper THEN
         vtarea_elegida = vrecenc.tarea;
         EXIT;
      END IF;
      */
      IF vr >= 1 THEN
        vr= vr-1;
      ELSE
        vtarea_elegida= vrecenc.tarea;
        EXIT ;
      END IF;
 
          
   end loop;
  WHEN vcriterio_elegido= 'C' THEN --Pesado por tiempo que no se supervisó el panel-tarea
    --ordenar por la supervisión del panel-tarea de la más vieja a la más nueva
    FOR vrecpantar in
        SELECT r.tarea, r.encuestador, vfechaultsuperpaneltarea 
        FROM cvp.reltar r 
          INNER JOIN cvp.relpan as c ON c.periodo= r.periodo AND c.panel=r.panel      
          LEFT JOIN (SELECT r.tarea, MAX(CASE WHEN r.realizada='S' THEN fechasalida ELSE NULL END) vfechaultsuperpaneltarea, min(fechasalida) vfechaprimerpaneltarea
                       FROM cvp.reltar r
                         JOIN cvp.relpan p  ON  r.periodo=p.periodo and r.panel=p.panel
                       WHERE  r.panel=ppanel          
                       GROUP BY r.tarea ) as a ON r.tarea=a.tarea
        WHERE r.periodo=pperiodo AND r.panel=ppanel --and r.supervisor is null
        --y la tarea está entre las taras candidatas
        and array[(r.tarea,1)::cvp.tarea_puntos] <@ (ptareascandidatas)
        ORDER BY 3
    loop
       RAISE NOTICE  'Radom  % ProbPantar %', vx, vprobpantar;
       RAISE NOTICE  'tarea  % esta en las tarea candidatas %', array[(vrecpantar.tarea,1)::cvp.tarea_puntos], ptareascandidatas;
       /*
       IF vx < vprobpantar THEN
         vtarea_elegida = vrecpantar.tarea;
         EXIT;
       END IF;
       */
      IF vr >= 1 THEN
        vr= vr-1;
      ELSE
        vtarea_elegida= vrecpantar.tarea;
        EXIT ;
      END IF;
       
    end loop;
  END CASE;
  RAISE NOTICE  'elegir_tarea_aleatoria_con_criterio tarea_elegida  % ', vtarea_elegida;
  RETURN vtarea_elegida;
END;
$$;


--
-- Name: elegir_tarea_aleatoria_con_probabilidad_puntos(cvp.tarea_puntos[]); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.elegir_tarea_aleatoria_con_probabilidad_puntos(ptareaspuntos cvp.tarea_puntos[]) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vsuma integer := 0;
  rtp   cvp.tarea_puntos;
  r     double precision;
  x     double precision;
  tarea_elegida  integer;
BEGIN
  FOREACH rtp IN ARRAY ptareaspuntos
  LOOP
      vsuma := vsuma + rtp.puntos;
  END LOOP;
  x=random();       
  r= x*vsuma;
  FOREACH rtp IN ARRAY ptareaspuntos
    LOOP
       IF r>= rtp.puntos THEN
            r= r-rtp.puntos;
       ELSE
            tarea_elegida= rtp.tarea;
            EXIT ;
       END IF;
    END LOOP;
  --raise notice 'random %  suma %  R %', x, vsuma, r; 
  RETURN tarea_elegida;
END;
$$;


--
-- Name: estadoinformante(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.estadoinformante(pperiodo text, pinformante integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
vInformantes RECORD;
vEstado TEXT:='Inactivo';
mperiodo character varying(11);
mvisita integer;
vicierre cvp.sino_dom;

BEGIN

FOR vInformantes IN
  SELECT DISTINCT informante, formulario
    FROM cvp.relvis
    WHERE informante = pinformante
LOOP    
  SELECT max(periodo) INTO mperiodo
    FROM cvp.relvis
    WHERE informante = vInformantes.informante 
          AND formulario = vInformantes.formulario 
          AND periodo <= pperiodo;

  IF mperiodo is not null THEN
    SELECT max(visita) INTO mvisita
      FROM cvp.relvis
      WHERE informante = vInformantes.informante 
            AND formulario = vInformantes.formulario 
            AND periodo = mperiodo;

    SELECT z.escierredefinitivoinf INTO vicierre
      FROM cvp.relvis r
        LEFT JOIN cvp.razones z ON r.razon = z.razon           
      WHERE r.periodo = mperiodo 
            AND r.visita = mvisita 
            AND informante = vInformantes.informante  
            AND formulario = vInformantes.formulario;
    IF COALESCE(vicierre,'N') = 'S' THEN
      vEstado = 'De Baja';
      EXIT;
    ELSE
      vEstado = 'Activo';
    END IF;
  END IF;
END LOOP;

RETURN vEstado;
 
end;
$$;


--
-- Name: formularioshdr(text, integer, integer, date, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.formularioshdr(pperiodo text, pinformante integer, pvisita integer, pfechasalida date, pencuestador text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  vForm record;
  vRta text:='';
begin
  for vForm in 
    select f.formulario, f.nombreformulario
	  from cvp.relvis r inner join cvp.formularios f on r.formulario=f.formulario
	  where r.periodo=pPeriodo
	    and r.informante=pInformante
		and r.visita=pVisita
		and r.fechasalida = pFechasalida
		and r.encuestador = pEncuestador
	  order by f.formulario
  loop
    vRta:=vRta || chr(10) || vForm.formulario || ' ' || vForm.nombreformulario;
  end loop;  
  if vRta='' then
    return '';
  else
    return substr(vRta,2);
  end if;
end;
$$;


--
-- Name: generar_direccion_informante_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.generar_direccion_informante_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
IF TG_OP = 'INSERT' THEN 
  NEW.direccion := TRIM(COALESCE(NEW.nombrecalle||' ','')||COALESCE(NEW.altura||' ','')||COALESCE('PISO '||NEW.piso||' ','')||COALESCE('DPTO '||NEW.departamento,''));
  ELSIF TG_OP = 'UPDATE' THEN
   IF COALESCE(NEW.nombrecalle,'') <> COALESCE(OLD.nombrecalle,'') 
     OR COALESCE(NEW.altura,'') <> COALESCE(OLD.altura,'') 
     OR COALESCE(NEW.piso,'') <> COALESCE(OLD.piso,'') 
     OR COALESCE(NEW.departamento,'') <> COALESCE(OLD.departamento,'') THEN
     NEW.direccion := TRIM(COALESCE(NEW.nombrecalle||' ','')||COALESCE(NEW.altura||' ','')||COALESCE('PISO '||NEW.piso||' ','')||COALESCE('DPTO '||NEW.departamento,''));
   END IF;
END IF;
RETURN NEW;
END;
$$;


--
-- Name: generar_formulario(text, integer, integer, timestamp without time zone); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.generar_formulario(pperiodo text, pinformante integer, pformulario integer, pfechageneracion timestamp without time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  /* v100713
       genera los atributos según prodatr
     v100301
     la inclusión forzosa de nuevos productos verifica que eno esté presente el producto en el periodo anterior
       (esto para arreglar un posible problema con los productos que están en dos formularios asignados al mismo informante)
     v100224
     con inclusión forzosa de nuevos productos para determinado formulario (según forprod)
     v080924  
     con búsqueda de visita anterior
  */
  vcantidadpreciosgenerados integer;
  vvisita INTEGER := 1;
begin
  --raise notice 'pap 1';
  insert into cvp.bitacora (que) values ('nueva generacion '||pperiodo||' i:'||pinformante||' f:'||pformulario||' g:'||pfechageneracion);

  --raise notice 'pap 2-- Insercion en relpre';
    insert into cvp.relpre(periodo, producto, observacion, informante, visita, formulario, precio, tipoprecio, especificacion, ultima_visita)
      select pperiodo, f.producto, f.observacion, pinformante, vvisita, f.formulario, null, null, f.especificacion, true
        from cvp.forobsinf f
          inner join cvp.informantes i on f.informante = i.informante and i.informante=pinformante
          inner join cvp.rubros ru on i.rubro=ru.rubro
          left join cvp.relpre r 
            on r.informante=pinformante 
              and r.formulario=f.formulario 
              and r.producto=f.producto 
              and r.observacion=f.observacion
              and r.periodo=pperiodo
              and r.visita=vvisita
        where f.formulario=pformulario
          and --(ru.despacho='A' or f.observacion=1)
            (f.dependedeldespacho = 'N' or ru.despacho = 'A' OR f.observacion = 1)
            and r.periodo is null;
  -- verifico que se haya generado al menos algún precio
  --raise notice 'pap 3';
  select count(*)
    into vcantidadpreciosgenerados
    from cvp.relpre
    where periodo=pperiodo
      and informante=pinformante
      and formulario=pformulario
      and visita=vvisita;
  -- Debe ser una excepcion  
  IF vcantidadpreciosgenerados=0 THEN
    --raise Exception 'Error, No se generaron filas del formulario del periodo %, informante%, formulario%  sin registros en relpre', pperiodo, pinformante, pformulario;  
    raise Notice 'ADVERTENCIA, No se generaron filas del formulario del periodo %, informante%, formulario%  sin registros en relpre', pperiodo, pinformante, pformulario;  
    
  END IF;
  
  --raise notice 'pap 4';
    insert into cvp.relatr (periodo , producto  , observacion     , informante , atributo  , valor, visita, validar_con_valvalatr)
      select                rp.periodo, rp.producto, rp.observacion, rp.informante, f.atributo,
                               CASE WHEN a.es_vigencia THEN 
                                 --1::text
                                 date_part('day'::text, ((((substr(cvp.moverperiodos(rp.periodo::text, 1), 2, 4) || '-'::text) || substr(cvp.moverperiodos(rp.periodo::text, 1), 7, 2)) || '-01'::text)::date) - '1 day'::interval)::text
                                 WHEN r_1.atributo IS NULL THEN a.valorInicial 
                                 ELSE r_1.valor END ,  rp.visita, vv.validar
      from cvp.prodatr f 
        inner join cvp.relpre rp
          on rp.producto=f.producto 
            and rp.informante=pinformante
            and rp.formulario=pformulario
            and rp.periodo=pperiodo
            and rp.visita=vvisita
        INNER JOIN cvp.atributos a ON a.atributo=f.atributo    
        left join cvp.relatr ra 
          on ra.informante=rp.informante 
            and ra.atributo=f.atributo
            and ra.producto=rp.producto 
            and ra.observacion=rp.observacion
            and ra.periodo=rp.periodo
            and ra.visita=rp.visita
        left join cvp.relpre p_1
          on p_1.informante=rp.informante 
            and p_1.producto=rp.producto 
            and p_1.observacion=rp.observacion
            and p_1.periodo= (SELECT MAX(periodo)
                                FROM cvp.relatr
                                WHERE periodo < rp.periodo
                                  AND producto = rp.producto AND observacion = rp.observacion 
                                  AND informante = rp.informante AND atributo=f.atributo)
            and p_1.ultima_visita=true
        left join cvp.relatr r_1 
          on r_1.informante=rp.informante 
            and r_1.atributo=f.atributo
            and r_1.producto=rp.producto 
            and r_1.observacion=rp.observacion
            and r_1.periodo=p_1.periodo
            and r_1.visita=p_1.visita
        LEFT JOIN cvp.ValValAtr vv ON f.producto = vv.producto
            AND f.atributo = vv.atributo
            AND r_1.valor = vv.valor
      where ra.periodo is null
        and rp.informante=pinformante
        and rp.formulario=pformulario
        and rp.periodo=pperiodo
        and rp.visita=vvisita;

  --raise notice 'pap 5';
  return null;
end
$$;


--
-- Name: generar_panel(text, integer, date, timestamp without time zone); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.generar_panel(pperiodo text, ppanel integer, pfechasalida date, pfechageneracionpanel timestamp without time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  f_hoy date= current_date;
BEGIN
  /*
   V190117
      genera el encuestador a partir de la tabla reltar
   V161201
      genera el encuestador a partir de la tabla relenc (si no hay relenc, entonces en tareas)
   V100730
      con borrado previo al insert por considerar re-generacion   
   V100726
      genera también las altas manuales. 
   V100527
      genera con última visita periodo anterior, única razon en relvis (informante-formulario)
   V100515
      genera el encuestador a partir de la tabla tareas
   V100508
      sin generar informantes con cierre definitivo en visita 1 del periodo anterior
     V080924
      sin generar de baja
  */
  if pFechaSalida is null then
    RAISE EXCEPTION 'no se puede generar un panel sin fecha de salida';
  end if;
  insert into cvp.bitacora (que) values ('nueva generacion panel '||pPeriodo||' p:'||pPanel||' g:'||pFechaGeneracionPanel);

  DELETE FROM cvp.relvis rd USING
    (SELECT r.periodo, r.informante, r.formulario, r.visita
      FROM cvp.relvis r
         LEFT JOIN cvp.informantes i ON r.informante = i.informante
         LEFT JOIN cvp.periodos p ON r.periodo=p.periodo
         LEFT JOIN cvp.relvis r_1 ON r_1.periodo = p.periodoanterior
                                    AND r_1.informante = r.informante 
                                    AND r_1.formulario = r.formulario
                                    AND r_1.visita = r.visita          
 
         --LEFT JOIN cvp.relvis r_1 ON r_1.periodo = r.periodo_1
         --                           AND r_1.informante = r.informante 
         --                           AND r_1.formulario = r.formulario
         --                           AND r_1.visita = r.visita_1          
         LEFT JOIN cvp.razones z ON r_1.razon = z.razon
         LEFT JOIN (SELECT distinct periodo, informante, visita, formulario, 'S' hayprecios 
                      FROM cvp.relpre) pr ON pr.periodo = r.periodo
                        AND pr.informante = r.informante
                        AND pr.visita = r.visita 
                        AND pr.formulario = r.formulario 
       WHERE r.periodo = Pperiodo
         AND r.panel= pPanel
         --AltaManualPeriodo no es el periodo actual
         AND (i.AltaManualPeriodo IS DISTINCT FROM Pperiodo OR NOT EXISTS (SELECT 1 FROM cvp.forinf fi WHERE fi.informante=r.informante AND fi.formulario=r.formulario))
         --periodo anterior sin visita en relvis o con cierre definitivo  
         AND (r_1.periodo IS NULL OR COALESCE(z.escierredefinitivoinf,'N')='S' OR COALESCE(z.escierredefinitivofor,'N')='S')
         -- periodo actual sin razon ingresada y sin precios
         AND r.razon IS NULL AND COALESCE(hayprecios,'N') = 'N') d
  WHERE rd.periodo = d.periodo and rd.informante = d.informante and rd.formulario = d.formulario and rd.visita = d.visita ;
  /*
  DELETE FROM cvp.relinf ri USING
     (SELECT DISTINCT i.periodo, i.informante, i.visita
        FROM cvp.relinf i
        LEFT JOIN (SELECT periodo, informante, visita 
                    FROM cvp.relvis
                    WHERE periodo = pPeriodo  AND panel = pPanel) v on i.periodo = v.periodo and i.informante = v.informante and i.visita = v.visita 
        WHERE i.periodo = pPeriodo 
          AND v.periodo is null) d
  WHERE ri.periodo = d.periodo and ri.informante = d.informante and ri.visita = d.visita;
  */
  --08/01/19: todas las tareas a reltar en el momento de la generación del panel (hasta ahora se insertaban en el momento de preparar la supervisión):
  --14/02/19: las tareas que tuvieron por lo menos una respuesta positiva (o nula) el periodo anterior
  INSERT INTO cvp.relTar(periodo, panel, tarea, encuestador)
      SELECT p.periodo, p.panel, t.tarea, a.encuestador
        FROM cvp.relpan p 
          INNER JOIN cvp.pantar t ON p.panel= t.panel  
          INNER JOIN cvp.tareas a ON a.tarea= t.tarea -- pk verificada
          INNER JOIN cvp.relvis r_1 ON r_1.periodo = cvp.moverperiodos(p.periodo, -1) AND r_1.panel = p.panel and r_1.tarea = t.tarea
          LEFT JOIN cvp.razones z ON r_1.razon = z.razon           
          LEFT JOIN cvp.reltar x ON x.periodo= p.periodo AND x.panel=p.panel AND x.tarea= t.tarea --pk verificada
        WHERE p.periodo=pperiodo AND p.panel= ppanel AND a.activa = 'S' --tareas activas
              AND x.periodo IS NULL
        GROUP BY p.periodo, p.panel, t.tarea, a.encuestador
        HAVING string_agg(COALESCE(z.escierredefinitivoinf,'N'),'') like '%N%' AND string_agg(COALESCE(z.escierredefinitivofor,'N'),'') like'%N%'
        ORDER BY p.periodo, p.panel, t.tarea;

  INSERT INTO cvp.relvis(periodo, informante, visita, formulario, panel, tarea, fechasalida, fechageneracion, encuestador, ultima_visita)
    SELECT p.periodo, r_1.informante, 1, r_1.formulario, r_1.panel, r_1.tarea, pFechasalida, pFechaGeneracionPanel, e.encuestador, true
      FROM cvp.relvis r_1 INNER JOIN cvp.periodos p ON r_1.periodo=p.periodoanterior
        INNER JOIN cvp.formularios f ON f.formulario=r_1.formulario
        --INNER JOIN cvp.tareas t ON t.tarea=r_1.tarea
        LEFT JOIN cvp.reltar e ON e.periodo = p.periodo and e.panel=r_1.panel and e.tarea=r_1.tarea
        LEFT JOIN (SELECT periodo, informante, formulario, max(visita) AS maxvisita
                     FROM cvp.relvis
                     WHERE panel = pPanel
                     GROUP BY  periodo, informante, formulario) v ON v.periodo=r_1.periodo and v.informante = r_1.informante and v.formulario = r_1.formulario
        LEFT JOIN cvp.razones z ON r_1.razon = z.razon         
        LEFT JOIN cvp.relvis r ON r.periodo=p.periodo AND r.informante=r_1.informante AND r.visita=1 AND r.formulario=r_1.formulario 
      WHERE p.periodo=pPeriodo
        AND r_1.panel=pPanel
        AND r_1.visita=maxvisita
        AND COALESCE(z.escierredefinitivoinf,'N')='N'
        AND COALESCE(z.escierredefinitivofor,'N')='N'
        AND f.activo='S'
        AND r.periodo IS NULL;
  INSERT INTO cvp.relvis(periodo, informante, visita, formulario, panel, tarea, fechasalida, fechageneracion, encuestador, ultima_visita)
    SELECT i.altaManualPeriodo, i.informante, 1, fi.formulario, i.altaManualPanel, i.altaManualTarea, 
           pFechasalida, pFechaGeneracionPanel, e.encuestador, true
      FROM cvp.informantes i 
        INNER JOIN cvp.forinf fi ON i.informante=fi.informante 
        INNER JOIN cvp.formularios f ON f.formulario=fi.formulario
        INNER JOIN cvp.periodos p ON p.periodo=i.altaManualPeriodo
        --INNER JOIN cvp.tareas t ON t.tarea=i.altaManualTarea
        LEFT JOIN cvp.reltar e ON e.periodo = p.periodo and e.panel=i.altaManualPanel and e.tarea=i.altaManualTarea
        LEFT JOIN cvp.relvis r ON r.periodo=i.altaManualPeriodo AND r.informante=i.informante AND r.visita=1 AND r.formulario=fi.formulario 
      WHERE p.periodo=pPeriodo
        AND r.periodo IS NULL
        AND f.activo='S'
        AND fi.altaManualPeriodo=pPeriodo
        AND i.altaManualPeriodo=pPeriodo
        AND i.altaManualPanel=pPanel;
  INSERT INTO cvp.relinf(periodo, informante, visita, panel, tarea)
    SELECT DISTINCT v.periodo, v.informante, v.visita, v.panel, v.tarea
      FROM cvp.relvis v
      LEFT JOIN cvp.relinf i on v.periodo = i.periodo and v.informante = i.informante and v.visita = i.visita 
	  and v.panel = i.panel and v.tarea = i.tarea 
    WHERE v.periodo = pPeriodo
      AND v.panel = ppanel
      AND i.periodo IS NULL;

  --Si se modifica el encuestador de una tarea, hay que volver a generar el panel que aún no haya salido,
  --se cambiarán los encuestadores de los paneles siguientes para las tareas correspondientes
  UPDATE cvp.reltar r SET encuestador= s.encuestador
        FROM (SELECT p.periodo, p.panel, t.tarea, a.encuestador 
                FROM cvp.relpan p 
                  INNER JOIN cvp.pantar t ON p.panel= t.panel  
                  INNER JOIN cvp.tareas a ON a.tarea= t.tarea -- pk verificada
                  LEFT JOIN cvp.reltar x ON x.periodo= p.periodo AND x.panel=p.panel AND x.tarea= t.tarea --pk verificada
                  WHERE p.periodo=pperiodo AND p.panel= ppanel AND p.fechasalida > f_hoy AND a.activa = 'S' AND   --tareas activas
                        x.periodo IS NOT NULL
              ) as s
        WHERE r.periodo=s.periodo AND r.panel= s.panel and r.tarea=s.tarea AND s.encuestador IS DISTINCT FROM r.encuestador ;

  --Si se modifica la fecha de salida de un panel, hay que volver a generar el panel
  UPDATE cvp.relvis SET fechasalida=pfechasalida
    WHERE periodo=pPeriodo AND panel=pPanel AND razon IS NULL AND fechasalida IS DISTINCT FROM pFechaSalida;
  RETURN NULL;
END
$$;


--
-- Name: generar_para_supervisiones(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.generar_para_supervisiones(pperiodo text, ppanel integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE 
  vcanttareascandidatas integer;
BEGIN
 --relsup
    INSERT INTO cvp.relsup(periodo,panel,supervisor)
        SELECT p.periodo, p.panel, p.supervisor
            FROM (SELECT p.periodo, p.panel, s.persona AS supervisor
                        FROM cvp.relpan p, cvp.personal s  
                        WHERE p.periodo=pperiodo AND p.panel= ppanel AND s.labor='S' and s.activo='S') as p
                 LEFT JOIN cvp.relsup x ON  x.periodo=p.periodo AND x.panel= p.panel AND x.supervisor= p.supervisor -- pk verificada
            WHERE x.periodo IS NULL;

  --reltar 08/01/19 ahora se hace en la generación del panel:
  /*
    INSERT INTO cvp.relTar(periodo, panel, tarea, encuestador)
        SELECT p.periodo, p.panel, t.tarea, a.encuestador
            FROM cvp.relpan p INNER JOIN cvp.pantar t ON p.panel= t.panel  
                              INNER JOIN cvp.tareas a ON a.tarea= t.tarea -- pk verificada
                              INNER JOIN (SELECT periodo, panel, tarea, count(*) as cantvisitas
                                            FROM cvp.relvis re 
                                            LEFT JOIN cvp.razones ra on re.razon = ra.razon --pk verificada
                                            WHERE periodo = pperiodo and panel = ppanel and coalesce(ra.espositivoformulario, 'S') = 'S'
                                            GROUP BY periodo, panel, tarea) vis 
                                            ON p.periodo = vis.periodo and p.panel = vis.panel and t.tarea = vis.tarea --periodo-panel-tarea con visitas generadas (no vacías)
                                                                                                                       --y con por lo menos 1 respondente: REQ IPCBA*335
                              LEFT JOIN cvp.reltar x ON x.periodo= p.periodo AND x.panel=p.panel AND x.tarea= t.tarea --pk verificada
            WHERE p.periodo=pperiodo AND p.panel= ppanel AND t.tamannosupervision IS NOT NULL 
                  AND a.operativo = 'C' and a.activa = 'S' AND   --tareas de campo y activas
                  x.periodo IS NULL;
*/
--ver si hay tareas generadas candidatas a ser supervisadas
    SELECT COUNT(*) INTO vcanttareascandidatas
        FROM cvp.reltar p
        INNER JOIN cvp.pantar t ON p.panel = t.panel AND p.tarea = t.tarea
        INNER JOIN cvp.tareas a ON a.tarea = t.tarea
        INNER JOIN (SELECT periodo, panel, tarea, count(*) as cantvisitas
                        FROM cvp.relvis re 
                        LEFT JOIN cvp.razones ra on re.razon = ra.razon --pk verificada
                        WHERE periodo = pperiodo and panel = ppanel and coalesce(ra.espositivoformulario, 'S') = 'S'
                        GROUP BY periodo, panel, tarea) vis 
                        ON p.periodo = vis.periodo and p.panel = vis.panel and t.tarea = vis.tarea --periodo-panel-tarea con visitas generadas (no vacías)
                                                                                                   --y con por lo menos 1 respondente: REQ IPCBA*335
        WHERE p.periodo=pperiodo AND p.panel= ppanel AND t.tamannosupervision IS NOT NULL 
            AND a.operativo = 'C' and a.activa = 'S';   --tareas de campo y activas y con tamannosupervision definido
    IF vcanttareascandidatas=0 THEN
      --no se encontraron tareas con las condiciones requeridadas (activas, operativo C y con visitas generadas)
      raise Exception 'Error, No hay tareas candidatas para el periodo %, panel %', pperiodo, ppanel;  
    END IF;
/* 08/01/19 ahora se hace en la genración del panel:                  
    UPDATE cvp.reltar r
        SET encuestador= s.encuestador
        FROM (SELECT p.periodo, p.panel, t.tarea, a.encuestador 
                  FROM cvp.relpan p INNER JOIN cvp.pantar t ON p.panel= t.panel  
                              INNER JOIN cvp.tareas a ON a.tarea= t.tarea -- pk verificada
                              LEFT JOIN cvp.reltar x ON x.periodo= p.periodo AND x.panel=p.panel AND x.tarea= t.tarea --pk verificada
                  WHERE p.periodo=pperiodo AND p.panel= ppanel AND t.tamannosupervision IS NOT NULL AND
                        p.generacionsupervisiones IS NULL AND p.fechasalida > f_hoy
                        AND a.operativo = 'C' and a.activa = 'S' AND   --tareas de campo y activas
                        x.periodo IS NOT NULL
              ) as s
        WHERE r.periodo=s.periodo AND r.panel= s.panel and r.tarea=s.tarea AND s.encuestador IS DISTINCT FROM r.encuestador ;
*/        
    --raise notice 'Periodo % panel %', pperiodo, ppanel;
END
$$;


--
-- Name: generar_periodo(text, timestamp without time zone); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.generar_periodo(pperiodo text, pfechageneracionperiodo timestamp without time zone) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  INSERT INTO cvp.bitacora (que) VALUES ('nueva generacion periodo '||pPeriodo||' g:'||pFechaGeneracionPeriodo);
  INSERT INTO cvp.relpan(periodo,panel,PeriodoParaPanelRotativo)
    SELECT p.periodo, r_1.panel,p.periodoanterior
      FROM cvp.relpan r_1 INNER JOIN cvp.periodos p ON r_1.periodo=p.periodoanterior
        LEFT JOIN cvp.relpan r ON r.periodo=p.periodo AND r.panel=r_1.panel 
      WHERE p.periodo=pPeriodo
        AND r.periodo IS NULL;        
  INSERT INTO cvp.relmon(periodo, moneda, valor_pesos)
    SELECT pPeriodo,m.moneda, CASE WHEN m.es_nacional THEN 1 ELSE null END
      FROM cvp.monedas m     
        LEFT JOIN cvp.relmon x ON x.periodo=pPeriodo AND x.moneda=m.moneda 
      WHERE x.periodo is null; 
  RETURN NULL;
END
$$;


--
-- Name: generar_visitas_reemplazo_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.generar_visitas_reemplazo_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vcantvisitapos integer;
  vformularios RECORD;
  vconjuntomuestral integer;
  vcantvisitaningr integer;
BEGIN
  
  IF NEW.informantereemplazante IS DISTINCT FROM OLD.informantereemplazante  AND NEW.informantereemplazante IS NOT NULL THEN
    SELECT conjuntomuestral into vconjuntomuestral
      FROM cvp.informantes
      WHERE informante=NEW.informante;
    SELECT count(*) INTO vcantvisitapos
      FROM cvp.relvis c, cvp.informantes i, cvp.razones r
         WHERE c.periodo=NEW.periodo AND
            c.visita=NEW.visita AND  --observo para todos los formularios
            c.informante=i.informante  AND
            i.conjuntomuestral=vconjuntomuestral AND
            c.razon=r.razon AND
            (r.escierredefinitivoinf='N' OR --or por la razon 11
            r.escierredefinitivofor='N') ;
    IF vcantvisitapos <> 0 THEN
       RAISE EXCEPTION 'Ya existe una o mas visitas con razon positiva ó negativa temporaria para el mismo conjunto muestral';
       RETURN NULL;
    ELSE
      SELECT count(*) INTO vcantvisitaningr
        FROM cvp.relvis c, cvp.informantes i
        WHERE c.periodo=NEW.periodo AND
              c.visita=NEW.visita AND  --observo para todos los formularios
              c.informante=i.informante  AND
              i.conjuntomuestral=vconjuntomuestral AND
              c.razon IS NULL;
      IF vcantvisitaningr <> 0 THEN
        RAISE EXCEPTION 'Ya existe una o más visitas sin ingresar para el mismo conjunto muestral';
        RETURN NULL;
      ELSE
        FOR vformularios IN
          SELECT formulario
            FROM cvp.forinf
            WHERE informante=NEW.informante
        LOOP    
          INSERT INTO cvp.relvis(periodo, informante , visita, formulario, panel, tarea)
          VALUES( NEW.periodo, NEW.informantereemplazante, NEW.visita, NEW.formulario, NEW.panel, NEW.tarea); 
        END LOOP;  
       --'Se insertara la visita';
      END IF;  
    END IF;
  END IF;
  RETURN NEW;
END;
$$;


--
-- Name: generarordenparaformulario(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.generarordenparaformulario() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  vorden integer;
  vforprod RECORD;
begin
  FOR vforprod IN
  select formulario, producto 
  from cvp.forprod
  order by formulario, producto
  LOOP
    select max(orden) INTO vorden from cvp.forprod where formulario = vforprod.formulario;
    if vorden is null then 
      vorden = 0;
    end if;
    UPDATE cvp.forprod set orden = vorden + 1 where formulario = vforprod.formulario and producto = vforprod.producto;    
  END LOOP;
end;
$$;


--
-- Name: hisc_agrupaciones_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_agrupaciones_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','agrupaciones','agrupacion','I',new.agrupacion,new.agrupacion,'I:'||comun.a_texto(new.agrupacion),new.agrupacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','agrupaciones','nombreagrupacion','I',new.agrupacion,new.agrupacion,'I:'||comun.a_texto(new.nombreagrupacion),new.nombreagrupacion);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.agrupacion IS DISTINCT FROM old.agrupacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','agrupaciones','agrupacion','U',new.agrupacion,new.agrupacion,comun.A_TEXTO(old.agrupacion)||'->'||comun.a_texto(new.agrupacion),old.agrupacion,new.agrupacion);
            END IF;    
            IF new.nombreagrupacion IS DISTINCT FROM old.nombreagrupacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','agrupaciones','nombreagrupacion','U',new.agrupacion,new.agrupacion,comun.A_TEXTO(old.nombreagrupacion)||'->'||comun.a_texto(new.nombreagrupacion),old.nombreagrupacion,new.nombreagrupacion);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','agrupaciones','agrupacion','D',old.agrupacion,old.agrupacion,'D:'||comun.a_texto(old.agrupacion),old.agrupacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','agrupaciones','nombreagrupacion','D',old.agrupacion,old.agrupacion,'D:'||comun.a_texto(old.nombreagrupacion),old.nombreagrupacion);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_atributos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_atributos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  DECLARE
    v_operacion text:=substr(TG_OP,1,1);
  BEGIN
    
  IF v_operacion='I' THEN
    
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
             VALUES ('cvp','atributos','atributo','I',new.atributo,new.atributo,'I:'||comun.a_texto(new.atributo),new.atributo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
             VALUES ('cvp','atributos','nombreatributo','I',new.atributo,new.atributo,'I:'||comun.a_texto(new.nombreatributo),new.nombreatributo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
             VALUES ('cvp','atributos','tipodato','I',new.atributo,new.atributo,'I:'||comun.a_texto(new.tipodato),new.tipodato);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
             VALUES ('cvp','atributos','abratributo','I',new.atributo,new.atributo,'I:'||comun.a_texto(new.abratributo),new.abratributo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
             VALUES ('cvp','atributos','escantidad','I',new.atributo,new.atributo,'I:'||comun.a_texto(new.escantidad),new.escantidad);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
             VALUES ('cvp','atributos','unidaddemedida','I',new.atributo,new.atributo,'I:'||comun.a_texto(new.unidaddemedida),new.unidaddemedida);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_bool)
             VALUES ('cvp','atributos','es_vigencia','I',new.atributo,new.atributo,'I:'||comun.a_texto(new.es_vigencia),new.es_vigencia);

  END IF;
  IF v_operacion='U' THEN
        
        IF new.atributo IS DISTINCT FROM old.atributo THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                 VALUES ('cvp','atributos','atributo','U',new.atributo,new.atributo,comun.A_TEXTO(old.atributo)||'->'||comun.a_texto(new.atributo),old.atributo,new.atributo);
        END IF;    
        IF new.nombreatributo IS DISTINCT FROM old.nombreatributo THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                 VALUES ('cvp','atributos','nombreatributo','U',new.atributo,new.atributo,comun.A_TEXTO(old.nombreatributo)||'->'||comun.a_texto(new.nombreatributo),old.nombreatributo,new.nombreatributo);
        END IF;    
        IF new.tipodato IS DISTINCT FROM old.tipodato THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                 VALUES ('cvp','atributos','tipodato','U',new.atributo,new.atributo,comun.A_TEXTO(old.tipodato)||'->'||comun.a_texto(new.tipodato),old.tipodato,new.tipodato);
        END IF;    
        IF new.abratributo IS DISTINCT FROM old.abratributo THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                 VALUES ('cvp','atributos','abratributo','U',new.atributo,new.atributo,comun.A_TEXTO(old.abratributo)||'->'||comun.a_texto(new.abratributo),old.abratributo,new.abratributo);
        END IF;    
        IF new.escantidad IS DISTINCT FROM old.escantidad THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                 VALUES ('cvp','atributos','escantidad','U',new.atributo,new.atributo,comun.A_TEXTO(old.escantidad)||'->'||comun.a_texto(new.escantidad),old.escantidad,new.escantidad);
        END IF;    
        IF new.unidaddemedida IS DISTINCT FROM old.unidaddemedida THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                 VALUES ('cvp','atributos','unidaddemedida','U',new.atributo,new.atributo,comun.A_TEXTO(old.unidaddemedida)||'->'||comun.a_texto(new.unidaddemedida),old.unidaddemedida,new.unidaddemedida);
        END IF;
        IF new.es_vigencia IS DISTINCT FROM old.es_vigencia THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_bool,new_bool)
                 VALUES ('cvp','atributos','es_vigencia','U',new.atributo,new.atributo,comun.A_TEXTO(old.es_vigencia)||'->'||comun.a_texto(new.es_vigencia),old.es_vigencia,new.es_vigencia);
        END IF;

  END IF;
  IF v_operacion='D' THEN
    
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
             VALUES ('cvp','atributos','atributo','D',old.atributo,old.atributo,'D:'||comun.a_texto(old.atributo),old.atributo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
             VALUES ('cvp','atributos','nombreatributo','D',old.atributo,old.atributo,'D:'||comun.a_texto(old.nombreatributo),old.nombreatributo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
             VALUES ('cvp','atributos','tipodato','D',old.atributo,old.atributo,'D:'||comun.a_texto(old.tipodato),old.tipodato);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
             VALUES ('cvp','atributos','abratributo','D',old.atributo,old.atributo,'D:'||comun.a_texto(old.abratributo),old.abratributo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
             VALUES ('cvp','atributos','escantidad','D',old.atributo,old.atributo,'D:'||comun.a_texto(old.escantidad),old.escantidad);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
             VALUES ('cvp','atributos','unidaddemedida','D',old.atributo,old.atributo,'D:'||comun.a_texto(old.unidaddemedida),old.unidaddemedida);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
             VALUES ('cvp','atributos','es_vigencia','D',old.atributo,old.atributo,'D:'||comun.a_texto(old.es_vigencia),old.es_vigencia);
  END IF;
  
  IF v_operacion<>'D' THEN
      RETURN new;
  ELSE
      RETURN old;  
  END IF;
  END;
$$;


--
-- Name: hisc_calculos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_calculos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','periodo','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','calculos','calculo','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.calculo),new.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','esperiodobase','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.esperiodobase),new.esperiodobase);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','periodoanterior','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.periodoanterior),new.periodoanterior);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','calculos','fechacalculo','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.fechacalculo),new.fechacalculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','calculos','calculoanterior','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.calculoanterior),new.calculoanterior);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','abierto','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.abierto),new.abierto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','modi_usu','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','calculos','modi_fec','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','modi_ope','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','agrupacionprincipal','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.agrupacionprincipal),new.agrupacionprincipal);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','valido','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.valido),new.valido);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','calculos','pb_calculobase','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.pb_calculobase),new.pb_calculobase);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','motivocopia','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.motivocopia),new.motivocopia);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','calculos','fechageneracionexternos','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.fechageneracionexternos),new.fechageneracionexternos);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','calculos','estimacion','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.estimacion),new.estimacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','transmitir_canastas','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.transmitir_canastas),new.transmitir_canastas);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','calculos','fechatransmitircanastas','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.fechatransmitircanastas),new.fechatransmitircanastas);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','denominadordefinitivosegimp','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.denominadordefinitivosegimp),new.denominadordefinitivosegimp);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','calculos','descartedefinitivosegimp','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.descartedefinitivosegimp),new.descartedefinitivosegimp);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','calculos','hasta_panel','I',new.periodo||'|'||new.calculo,new.periodo,new.calculo,'I:'||comun.a_texto(new.hasta_panel),new.hasta_panel);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','periodo','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.calculo IS DISTINCT FROM old.calculo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','calculos','calculo','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.calculo)||'->'||comun.a_texto(new.calculo),old.calculo,new.calculo);
            END IF;    
            IF new.esperiodobase IS DISTINCT FROM old.esperiodobase THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','esperiodobase','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.esperiodobase)||'->'||comun.a_texto(new.esperiodobase),old.esperiodobase,new.esperiodobase);
            END IF;    
            IF new.periodoanterior IS DISTINCT FROM old.periodoanterior THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','periodoanterior','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.periodoanterior)||'->'||comun.a_texto(new.periodoanterior),old.periodoanterior,new.periodoanterior);
            END IF;    
            IF new.fechacalculo IS DISTINCT FROM old.fechacalculo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','calculos','fechacalculo','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.fechacalculo)||'->'||comun.a_texto(new.fechacalculo),old.fechacalculo,new.fechacalculo);
            END IF;    
            IF new.calculoanterior IS DISTINCT FROM old.calculoanterior THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','calculos','calculoanterior','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.calculoanterior)||'->'||comun.a_texto(new.calculoanterior),old.calculoanterior,new.calculoanterior);
            END IF;    
            IF new.abierto IS DISTINCT FROM old.abierto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','abierto','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.abierto)||'->'||comun.a_texto(new.abierto),old.abierto,new.abierto);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','modi_usu','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','calculos','modi_fec','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','modi_ope','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
            IF new.agrupacionprincipal IS DISTINCT FROM old.agrupacionprincipal THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','agrupacionprincipal','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.agrupacionprincipal)||'->'||comun.a_texto(new.agrupacionprincipal),old.agrupacionprincipal,new.agrupacionprincipal);
            END IF;    
            IF new.valido IS DISTINCT FROM old.valido THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','valido','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.valido)||'->'||comun.a_texto(new.valido),old.valido,new.valido);
            END IF;    
            IF new.pb_calculobase IS DISTINCT FROM old.pb_calculobase THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','calculos','pb_calculobase','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.pb_calculobase)||'->'||comun.a_texto(new.pb_calculobase),old.pb_calculobase,new.pb_calculobase);
            END IF;    
            IF new.motivocopia IS DISTINCT FROM old.motivocopia THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','motivocopia','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.motivocopia)||'->'||comun.a_texto(new.motivocopia),old.motivocopia,new.motivocopia);
            END IF;    
            IF new.fechageneracionexternos IS DISTINCT FROM old.fechageneracionexternos THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','fechageneracionexternos','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.fechageneracionexternos)||'->'||comun.a_texto(new.fechageneracionexternos),old.fechageneracionexternos,new.fechageneracionexternos);
            END IF;
            IF new.estimacion IS DISTINCT FROM old.estimacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','calculos','estimacion','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.estimacion)||'->'||comun.a_texto(new.estimacion),old.estimacion,new.estimacion);
            END IF;    
            IF new.transmitir_canastas IS DISTINCT FROM old.transmitir_canastas THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','transmitir_canastas','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.transmitir_canastas)||'->'||comun.a_texto(new.transmitir_canastas),old.transmitir_canastas,new.transmitir_canastas);
            END IF;    
            IF new.fechatransmitircanastas IS DISTINCT FROM old.fechatransmitircanastas THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','fechatransmitircanastas','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.fechatransmitircanastas)||'->'||comun.a_texto(new.fechatransmitircanastas),old.fechatransmitircanastas,new.fechatransmitircanastas);
            END IF;
            IF new.denominadordefinitivosegimp IS DISTINCT FROM old.denominadordefinitivosegimp THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','denominadordefinitivosegimp','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.denominadordefinitivosegimp)||'->'||comun.a_texto(new.denominadordefinitivosegimp),old.denominadordefinitivosegimp,new.denominadordefinitivosegimp);
            END IF;    
            IF new.descartedefinitivosegimp IS DISTINCT FROM old.descartedefinitivosegimp THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','calculos','descartedefinitivosegimp','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.descartedefinitivosegimp)||'->'||comun.a_texto(new.descartedefinitivosegimp),old.descartedefinitivosegimp,new.descartedefinitivosegimp);
            END IF;    
            IF new.hasta_panel IS DISTINCT FROM old.hasta_panel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','calculos','hasta_panel','U',new.periodo||'|'||new.calculo,new.periodo,new.calculo,comun.A_TEXTO(old.hasta_panel)||'->'||comun.a_texto(new.hasta_panel),old.hasta_panel,new.hasta_panel);
            END IF;    
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','periodo','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','calculos','calculo','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.calculo),old.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','esperiodobase','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.esperiodobase),old.esperiodobase);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','periodoanterior','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.periodoanterior),old.periodoanterior);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','calculos','fechacalculo','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.fechacalculo),old.fechacalculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','calculos','calculoanterior','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.calculoanterior),old.calculoanterior);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','abierto','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.abierto),old.abierto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','modi_usu','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','calculos','modi_fec','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','modi_ope','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','agrupacionprincipal','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.agrupacionprincipal),old.agrupacionprincipal);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','valido','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.valido),old.valido);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','calculos','pb_calculobase','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.pb_calculobase),old.pb_calculobase);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','motivocopia','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.motivocopia),old.motivocopia);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','calculos','fechageneracionexternos','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.fechageneracionexternos),old.fechageneracionexternos);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','calculos','estimacion','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.estimacion),old.estimacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','transmitir_canastas','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.transmitir_canastas),old.transmitir_canastas);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','calculos','fechatransmitircanastas','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.fechatransmitircanastas),old.fechatransmitircanastas);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','denominadordefinitivosegimp','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.denominadordefinitivosegimp),old.denominadordefinitivosegimp);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','calculos','descartedefinitivosegimp','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.descartedefinitivosegimp),old.descartedefinitivosegimp);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','calculos','hasta_panel','D',old.periodo||'|'||old.calculo,old.periodo,old.calculo,'D:'||comun.a_texto(old.hasta_panel),old.hasta_panel);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_conjuntomuestral_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_conjuntomuestral_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','conjuntomuestral','conjuntomuestral','I',new.conjuntomuestral,new.conjuntomuestral,'I:'||comun.a_texto(new.conjuntomuestral),new.conjuntomuestral);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','conjuntomuestral','panel','I',new.conjuntomuestral,new.conjuntomuestral,'I:'||comun.a_texto(new.panel),new.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','conjuntomuestral','encuestador','I',new.conjuntomuestral,new.conjuntomuestral,'I:'||comun.a_texto(new.encuestador),new.encuestador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','conjuntomuestral','tiponegociomuestra','I',new.conjuntomuestral,new.conjuntomuestral,'I:'||comun.a_texto(new.tiponegociomuestra),new.tiponegociomuestra);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.conjuntomuestral IS DISTINCT FROM old.conjuntomuestral THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','conjuntomuestral','conjuntomuestral','U',new.conjuntomuestral,new.conjuntomuestral,comun.A_TEXTO(old.conjuntomuestral)||'->'||comun.a_texto(new.conjuntomuestral),old.conjuntomuestral,new.conjuntomuestral);
            END IF;    
            IF new.panel IS DISTINCT FROM old.panel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','conjuntomuestral','panel','U',new.conjuntomuestral,new.conjuntomuestral,comun.A_TEXTO(old.panel)||'->'||comun.a_texto(new.panel),old.panel,new.panel);
            END IF;    
            IF new.encuestador IS DISTINCT FROM old.encuestador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','conjuntomuestral','encuestador','U',new.conjuntomuestral,new.conjuntomuestral,comun.A_TEXTO(old.encuestador)||'->'||comun.a_texto(new.encuestador),old.encuestador,new.encuestador);
            END IF;    
            IF new.tiponegociomuestra IS DISTINCT FROM old.tiponegociomuestra THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','conjuntomuestral','tiponegociomuestra','U',new.conjuntomuestral,new.conjuntomuestral,comun.A_TEXTO(old.tiponegociomuestra)||'->'||comun.a_texto(new.tiponegociomuestra),old.tiponegociomuestra,new.tiponegociomuestra);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','conjuntomuestral','conjuntomuestral','D',old.conjuntomuestral,old.conjuntomuestral,'D:'||comun.a_texto(old.conjuntomuestral),old.conjuntomuestral);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','conjuntomuestral','panel','D',old.conjuntomuestral,old.conjuntomuestral,'D:'||comun.a_texto(old.panel),old.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','conjuntomuestral','encuestador','D',old.conjuntomuestral,old.conjuntomuestral,'D:'||comun.a_texto(old.encuestador),old.encuestador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','conjuntomuestral','tiponegociomuestra','D',old.conjuntomuestral,old.conjuntomuestral,'D:'||comun.a_texto(old.tiponegociomuestra),old.tiponegociomuestra);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_especificaciones_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_especificaciones_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','especificaciones','producto','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','especificaciones','especificacion','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.especificacion),new.especificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','especificaciones','nombreespecificacion','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.nombreespecificacion),new.nombreespecificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','especificaciones','tamannonormal','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.tamannonormal),new.tamannonormal);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','especificaciones','ponderadoresp','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.ponderadoresp),new.ponderadoresp);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','especificaciones','modi_usu','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','especificaciones','modi_fec','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','especificaciones','modi_ope','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','especificaciones','envase','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.envase),new.envase);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','especificaciones','excluir','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.excluir),new.excluir);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','especificaciones','unidaddemedida','I',new.producto||'|'||new.especificacion,new.producto,new.especificacion,'I:'||comun.a_texto(new.unidaddemedida),new.unidaddemedida);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','especificaciones','producto','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.especificacion IS DISTINCT FROM old.especificacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','especificaciones','especificacion','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.especificacion)||'->'||comun.a_texto(new.especificacion),old.especificacion,new.especificacion);
            END IF;    
            IF new.nombreespecificacion IS DISTINCT FROM old.nombreespecificacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','especificaciones','nombreespecificacion','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.nombreespecificacion)||'->'||comun.a_texto(new.nombreespecificacion),old.nombreespecificacion,new.nombreespecificacion);
            END IF;    
            IF new.tamannonormal IS DISTINCT FROM old.tamannonormal THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','especificaciones','tamannonormal','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.tamannonormal)||'->'||comun.a_texto(new.tamannonormal),old.tamannonormal,new.tamannonormal);
            END IF;    
            IF new.ponderadoresp IS DISTINCT FROM old.ponderadoresp THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','especificaciones','ponderadoresp','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.ponderadoresp)||'->'||comun.a_texto(new.ponderadoresp),old.ponderadoresp,new.ponderadoresp);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','especificaciones','modi_usu','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','especificaciones','modi_fec','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','especificaciones','modi_ope','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;    
            IF new.envase IS DISTINCT FROM old.envase THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','especificaciones','envase','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.envase)||'->'||comun.a_texto(new.envase),old.envase,new.envase);
            END IF;    
            IF new.excluir IS DISTINCT FROM old.excluir THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','especificaciones','excluir','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.excluir)||'->'||comun.a_texto(new.excluir),old.excluir,new.excluir);
            END IF;    
            IF new.unidaddemedida IS DISTINCT FROM old.unidaddemedida THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','especificaciones','unidaddemedida','U',new.producto||'|'||new.especificacion,new.producto,new.especificacion,comun.A_TEXTO(old.unidaddemedida)||'->'||comun.a_texto(new.unidaddemedida),old.unidaddemedida,new.unidaddemedida);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','especificaciones','producto','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','especificaciones','especificacion','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.especificacion),old.especificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','especificaciones','nombreespecificacion','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.nombreespecificacion),old.nombreespecificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','especificaciones','tamannonormal','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.tamannonormal),old.tamannonormal);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','especificaciones','ponderadoresp','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.ponderadoresp),old.ponderadoresp);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','especificaciones','modi_usu','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','especificaciones','modi_fec','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','especificaciones','modi_ope','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','especificaciones','envase','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.envase),old.envase);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','especificaciones','excluir','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.excluir),old.excluir);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','especificaciones','unidaddemedida','D',old.producto||'|'||old.especificacion,old.producto,old.especificacion,'D:'||comun.a_texto(old.unidaddemedida),old.unidaddemedida);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_foresp_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_foresp_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,new_number)
                     VALUES ('cvp','foresp','formulario','I',new.formulario||'|'||new.producto||'|'||new.especificacion,new.formulario,new.producto,new.especificacion,'I:'||comun.a_texto(new.formulario),new.formulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','foresp','producto','I',new.formulario||'|'||new.producto||'|'||new.especificacion,new.formulario,new.producto,new.especificacion,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,new_number)
                     VALUES ('cvp','foresp','especificacion','I',new.formulario||'|'||new.producto||'|'||new.especificacion,new.formulario,new.producto,new.especificacion,'I:'||comun.a_texto(new.especificacion),new.especificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,new_number)
                     VALUES ('cvp','foresp','orden','I',new.formulario||'|'||new.producto||'|'||new.especificacion,new.formulario,new.producto,new.especificacion,'I:'||comun.a_texto(new.orden),new.orden);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.formulario IS DISTINCT FROM old.formulario THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','foresp','formulario','U',new.formulario||'|'||new.producto||'|'||new.especificacion,new.formulario,new.producto,new.especificacion,comun.A_TEXTO(old.formulario)||'->'||comun.a_texto(new.formulario),old.formulario,new.formulario);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','foresp','producto','U',new.formulario||'|'||new.producto||'|'||new.especificacion,new.formulario,new.producto,new.especificacion,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.especificacion IS DISTINCT FROM old.especificacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','foresp','especificacion','U',new.formulario||'|'||new.producto||'|'||new.especificacion,new.formulario,new.producto,new.especificacion,comun.A_TEXTO(old.especificacion)||'->'||comun.a_texto(new.especificacion),old.especificacion,new.especificacion);
            END IF;    
            IF new.orden IS DISTINCT FROM old.orden THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','foresp','orden','U',new.formulario||'|'||new.producto||'|'||new.especificacion,new.formulario,new.producto,new.especificacion,comun.A_TEXTO(old.orden)||'->'||comun.a_texto(new.orden),old.orden,new.orden);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,old_number)
                     VALUES ('cvp','foresp','formulario','D',old.formulario||'|'||old.producto||'|'||old.especificacion,old.formulario,old.producto,old.especificacion,'D:'||comun.a_texto(old.formulario),old.formulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','foresp','producto','D',old.formulario||'|'||old.producto||'|'||old.especificacion,old.formulario,old.producto,old.especificacion,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,old_number)
                     VALUES ('cvp','foresp','especificacion','D',old.formulario||'|'||old.producto||'|'||old.especificacion,old.formulario,old.producto,old.especificacion,'D:'||comun.a_texto(old.especificacion),old.especificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_text_2,pk_number_3,change_value,old_number)
                     VALUES ('cvp','foresp','orden','D',old.formulario||'|'||old.producto||'|'||old.especificacion,old.formulario,old.producto,old.especificacion,'D:'||comun.a_texto(old.orden),old.orden);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_forinf_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_forinf_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','forinf','formulario','I',new.formulario||'|'||new.informante,new.formulario,new.informante,'I:'||comun.a_texto(new.formulario),new.formulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','forinf','informante','I',new.formulario||'|'||new.informante,new.formulario,new.informante,'I:'||comun.a_texto(new.informante),new.informante);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.formulario IS DISTINCT FROM old.formulario THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','forinf','formulario','U',new.formulario||'|'||new.informante,new.formulario,new.informante,comun.A_TEXTO(old.formulario)||'->'||comun.a_texto(new.formulario),old.formulario,new.formulario);
            END IF;    
            IF new.informante IS DISTINCT FROM old.informante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','forinf','informante','U',new.formulario||'|'||new.informante,new.formulario,new.informante,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','forinf','formulario','D',old.formulario||'|'||old.informante,old.formulario,old.informante,'D:'||comun.a_texto(old.formulario),old.formulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','forinf','informante','D',old.formulario||'|'||old.informante,old.formulario,old.informante,'D:'||comun.a_texto(old.informante),old.informante);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_formularios_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_formularios_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','formularios','formulario','I',new.formulario,new.formulario,'I:'||comun.a_texto(new.formulario),new.formulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','formularios','nombreformulario','I',new.formulario,new.formulario,'I:'||comun.a_texto(new.nombreformulario),new.nombreformulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','formularios','soloparatipo','I',new.formulario,new.formulario,'I:'||comun.a_texto(new.soloparatipo),new.soloparatipo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','formularios','operativo','I',new.formulario,new.formulario,'I:'||comun.a_texto(new.operativo),new.operativo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','formularios','activo','I',new.formulario,new.formulario,'I:'||comun.a_texto(new.activo),new.activo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','formularios','despacho','I',new.formulario,new.formulario,'I:'||comun.a_texto(new.despacho),new.despacho);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.formulario IS DISTINCT FROM old.formulario THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','formularios','formulario','U',new.formulario,new.formulario,comun.A_TEXTO(old.formulario)||'->'||comun.a_texto(new.formulario),old.formulario,new.formulario);
            END IF;    
            IF new.nombreformulario IS DISTINCT FROM old.nombreformulario THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','formularios','nombreformulario','U',new.formulario,new.formulario,comun.A_TEXTO(old.nombreformulario)||'->'||comun.a_texto(new.nombreformulario),old.nombreformulario,new.nombreformulario);
            END IF;    
            IF new.soloparatipo IS DISTINCT FROM old.soloparatipo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','formularios','soloparatipo','U',new.formulario,new.formulario,comun.A_TEXTO(old.soloparatipo)||'->'||comun.a_texto(new.soloparatipo),old.soloparatipo,new.soloparatipo);
            END IF;    
            IF new.operativo IS DISTINCT FROM old.operativo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','formularios','operativo','U',new.formulario,new.formulario,comun.A_TEXTO(old.operativo)||'->'||comun.a_texto(new.operativo),old.operativo,new.operativo);
            END IF;    
            IF new.activo IS DISTINCT FROM old.activo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','formularios','activo','U',new.formulario,new.formulario,comun.A_TEXTO(old.activo)||'->'||comun.a_texto(new.activo),old.activo,new.activo);
            END IF;    
            IF new.despacho IS DISTINCT FROM old.despacho THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','formularios','despacho','U',new.formulario,new.formulario,comun.A_TEXTO(old.despacho)||'->'||comun.a_texto(new.despacho),old.despacho,new.despacho);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','formularios','formulario','D',old.formulario,old.formulario,'D:'||comun.a_texto(old.formulario),old.formulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','formularios','nombreformulario','D',old.formulario,old.formulario,'D:'||comun.a_texto(old.nombreformulario),old.nombreformulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','formularios','soloparatipo','D',old.formulario,old.formulario,'D:'||comun.a_texto(old.soloparatipo),old.soloparatipo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','formularios','operativo','D',old.formulario,old.formulario,'D:'||comun.a_texto(old.operativo),old.operativo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','formularios','activo','D',old.formulario,old.formulario,'D:'||comun.a_texto(old.activo),old.activo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','formularios','despacho','D',old.formulario,old.formulario,'D:'||comun.a_texto(old.despacho),old.despacho);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_formulariosimportados_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_formulariosimportados_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_number)
                     VALUES ('cvp','formulariosimportados','ano','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.ano),new.ano);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_number)
                     VALUES ('cvp','formulariosimportados','mes','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.mes),new.mes);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_number)
                     VALUES ('cvp','formulariosimportados','razon','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.razon),new.razon);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_number)
                     VALUES ('cvp','formulariosimportados','informante','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.informante),new.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_text)
                     VALUES ('cvp','formulariosimportados','producto','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_text)
                     VALUES ('cvp','formulariosimportados','nombre','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.nombre),new.nombre);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_number)
                     VALUES ('cvp','formulariosimportados','observacion','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.observacion),new.observacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_text)
                     VALUES ('cvp','formulariosimportados','atributo','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.atributo),new.atributo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,new_text)
                     VALUES ('cvp','formulariosimportados','valor','I',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,'I:'||comun.a_texto(new.valor),new.valor);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.ano IS DISTINCT FROM old.ano THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number,new_number)
                     VALUES ('cvp','formulariosimportados','ano','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.ano)||'->'||comun.a_texto(new.ano),old.ano,new.ano);
            END IF;    
            IF new.mes IS DISTINCT FROM old.mes THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number,new_number)
                     VALUES ('cvp','formulariosimportados','mes','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.mes)||'->'||comun.a_texto(new.mes),old.mes,new.mes);
            END IF;    
            IF new.razon IS DISTINCT FROM old.razon THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number,new_number)
                     VALUES ('cvp','formulariosimportados','razon','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.razon)||'->'||comun.a_texto(new.razon),old.razon,new.razon);
            END IF;    
            IF new.informante IS DISTINCT FROM old.informante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number,new_number)
                     VALUES ('cvp','formulariosimportados','informante','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_text,new_text)
                     VALUES ('cvp','formulariosimportados','producto','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.nombre IS DISTINCT FROM old.nombre THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_text,new_text)
                     VALUES ('cvp','formulariosimportados','nombre','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.nombre)||'->'||comun.a_texto(new.nombre),old.nombre,new.nombre);
            END IF;    
            IF new.observacion IS DISTINCT FROM old.observacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number,new_number)
                     VALUES ('cvp','formulariosimportados','observacion','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.observacion)||'->'||comun.a_texto(new.observacion),old.observacion,new.observacion);
            END IF;    
            IF new.atributo IS DISTINCT FROM old.atributo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_text,new_text)
                     VALUES ('cvp','formulariosimportados','atributo','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.atributo)||'->'||comun.a_texto(new.atributo),old.atributo,new.atributo);
            END IF;    
            IF new.valor IS DISTINCT FROM old.valor THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_text,new_text)
                     VALUES ('cvp','formulariosimportados','valor','U',new.ano||'|'||new.mes||'|'||new.informante||'|'||new.producto||'|'||new.observacion||'|'||new.atributo,new.ano,new.mes,new.informante,new.producto,new.observacion,new.atributo,comun.A_TEXTO(old.valor)||'->'||comun.a_texto(new.valor),old.valor,new.valor);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number)
                     VALUES ('cvp','formulariosimportados','ano','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.ano),old.ano);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number)
                     VALUES ('cvp','formulariosimportados','mes','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.mes),old.mes);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number)
                     VALUES ('cvp','formulariosimportados','razon','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.razon),old.razon);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number)
                     VALUES ('cvp','formulariosimportados','informante','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.informante),old.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_text)
                     VALUES ('cvp','formulariosimportados','producto','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_text)
                     VALUES ('cvp','formulariosimportados','nombre','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.nombre),old.nombre);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_number)
                     VALUES ('cvp','formulariosimportados','observacion','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.observacion),old.observacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_text)
                     VALUES ('cvp','formulariosimportados','atributo','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.atributo),old.atributo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,pk_number_3,pk_text_4,pk_number_5,pk_text_6,change_value,old_text)
                     VALUES ('cvp','formulariosimportados','valor','D',old.ano||'|'||old.mes||'|'||old.informante||'|'||old.producto||'|'||old.observacion||'|'||old.atributo,old.ano,old.mes,old.informante,old.producto,old.observacion,old.atributo,'D:'||comun.a_texto(old.valor),old.valor);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_grupos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_grupos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','grupos','agrupacion','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.agrupacion),new.agrupacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','grupos','grupo','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.grupo),new.grupo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','grupos','nombregrupo','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.nombregrupo),new.nombregrupo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','grupos','grupopadre','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.grupopadre),new.grupopadre);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_number)
                     VALUES ('cvp','grupos','ponderador','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.ponderador),new.ponderador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_number)
                     VALUES ('cvp','grupos','nivel','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.nivel),new.nivel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','grupos','esproducto','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.esproducto),new.esproducto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','grupos','modi_usu','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_datetime)
                     VALUES ('cvp','grupos','modi_fec','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','grupos','modi_ope','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','grupos','nombrecanasta','I',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,'I:'||comun.a_texto(new.nombrecanasta),new.nombrecanasta);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.agrupacion IS DISTINCT FROM old.agrupacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','grupos','agrupacion','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.agrupacion)||'->'||comun.a_texto(new.agrupacion),old.agrupacion,new.agrupacion);
            END IF;    
            IF new.grupo IS DISTINCT FROM old.grupo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','grupos','grupo','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.grupo)||'->'||comun.a_texto(new.grupo),old.grupo,new.grupo);
            END IF;    
            IF new.nombregrupo IS DISTINCT FROM old.nombregrupo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','grupos','nombregrupo','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.nombregrupo)||'->'||comun.a_texto(new.nombregrupo),old.nombregrupo,new.nombregrupo);
            END IF;    
            IF new.grupopadre IS DISTINCT FROM old.grupopadre THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','grupos','grupopadre','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.grupopadre)||'->'||comun.a_texto(new.grupopadre),old.grupopadre,new.grupopadre);
            END IF;    
            IF new.ponderador IS DISTINCT FROM old.ponderador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_number,new_number)
                     VALUES ('cvp','grupos','ponderador','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.ponderador)||'->'||comun.a_texto(new.ponderador),old.ponderador,new.ponderador);
            END IF;    
            IF new.nivel IS DISTINCT FROM old.nivel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_number,new_number)
                     VALUES ('cvp','grupos','nivel','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.nivel)||'->'||comun.a_texto(new.nivel),old.nivel,new.nivel);
            END IF;    
            IF new.esproducto IS DISTINCT FROM old.esproducto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','grupos','esproducto','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.esproducto)||'->'||comun.a_texto(new.esproducto),old.esproducto,new.esproducto);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','grupos','modi_usu','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','grupos','modi_fec','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','grupos','modi_ope','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
            IF new.nombrecanasta IS DISTINCT FROM old.nombrecanasta THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','grupos','nombrecanasta','U',new.agrupacion||'|'||new.grupo,new.agrupacion,new.grupo,comun.A_TEXTO(old.nombrecanasta)||'->'||comun.a_texto(new.nombrecanasta),old.nombrecanasta,new.nombrecanasta);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','grupos','agrupacion','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.agrupacion),old.agrupacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','grupos','grupo','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.grupo),old.grupo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','grupos','nombregrupo','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.nombregrupo),old.nombregrupo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','grupos','grupopadre','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.grupopadre),old.grupopadre);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_number)
                     VALUES ('cvp','grupos','ponderador','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.ponderador),old.ponderador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_number)
                     VALUES ('cvp','grupos','nivel','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.nivel),old.nivel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','grupos','esproducto','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.esproducto),old.esproducto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','grupos','modi_usu','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_datetime)
                     VALUES ('cvp','grupos','modi_fec','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','grupos','modi_ope','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','grupos','nombrecanasta','D',old.agrupacion||'|'||old.grupo,old.agrupacion,old.grupo,'D:'||comun.a_texto(old.nombrecanasta),old.nombrecanasta);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_informantes_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_informantes_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','informantes','informante','I',new.informante,new.informante,'I:'||comun.a_texto(new.informante),new.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','nombreinformante','I',new.informante,new.informante,'I:'||comun.a_texto(new.nombreinformante),new.nombreinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','tipoinformante','I',new.informante,new.informante,'I:'||comun.a_texto(new.tipoinformante),new.tipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','rubroclanae','I',new.informante,new.informante,'I:'||comun.a_texto(new.rubroclanae),new.rubroclanae);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','cadena','I',new.informante,new.informante,'I:'||comun.a_texto(new.cadena),new.cadena);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','direccion','I',new.informante,new.informante,'I:'||comun.a_texto(new.direccion),new.direccion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','modi_usu','I',new.informante,new.informante,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_datetime)
                     VALUES ('cvp','informantes','modi_fec','I',new.informante,new.informante,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','modi_ope','I',new.informante,new.informante,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','altamanualperiodo','I',new.informante,new.informante,'I:'||comun.a_texto(new.altamanualperiodo),new.altamanualperiodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','informantes','altamanualpanel','I',new.informante,new.informante,'I:'||comun.a_texto(new.altamanualpanel),new.altamanualpanel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','informantes','altamanualtarea','I',new.informante,new.informante,'I:'||comun.a_texto(new.altamanualtarea),new.altamanualtarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_datetime)
                     VALUES ('cvp','informantes','altamanualconfirmar','I',new.informante,new.informante,'I:'||comun.a_texto(new.altamanualconfirmar),new.altamanualconfirmar);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','razonsocial','I',new.informante,new.informante,'I:'||comun.a_texto(new.razonsocial),new.razonsocial);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','nombrecalle','I',new.informante,new.informante,'I:'||comun.a_texto(new.nombrecalle),new.nombrecalle);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','altura','I',new.informante,new.informante,'I:'||comun.a_texto(new.altura),new.altura);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','piso','I',new.informante,new.informante,'I:'||comun.a_texto(new.piso),new.piso);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','departamento','I',new.informante,new.informante,'I:'||comun.a_texto(new.departamento),new.departamento);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','cp','I',new.informante,new.informante,'I:'||comun.a_texto(new.cp),new.cp);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','obs_listador','I',new.informante,new.informante,'I:'||comun.a_texto(new.obs_listador),new.obs_listador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','nr_listador','I',new.informante,new.informante,'I:'||comun.a_texto(new.nr_listador),new.nr_listador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_datetime)
                     VALUES ('cvp','informantes','fecha_listado','I',new.informante,new.informante,'I:'||comun.a_texto(new.fecha_listado),new.fecha_listado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','informantes','grupo_listado','I',new.informante,new.informante,'I:'||comun.a_texto(new.grupo_listado),new.grupo_listado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','informantes','conjuntomuestral','I',new.informante,new.informante,'I:'||comun.a_texto(new.conjuntomuestral),new.conjuntomuestral);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','informantes','rubro','I',new.informante,new.informante,'I:'||comun.a_texto(new.rubro),new.rubro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','informantes','ordenhdr','I',new.informante,new.informante,'I:'||comun.a_texto(new.ordenhdr),new.ordenhdr);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.informante IS DISTINCT FROM old.informante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','informantes','informante','U',new.informante,new.informante,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
            END IF;    
            IF new.nombreinformante IS DISTINCT FROM old.nombreinformante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','nombreinformante','U',new.informante,new.informante,comun.A_TEXTO(old.nombreinformante)||'->'||comun.a_texto(new.nombreinformante),old.nombreinformante,new.nombreinformante);
            END IF;    
            IF new.tipoinformante IS DISTINCT FROM old.tipoinformante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','tipoinformante','U',new.informante,new.informante,comun.A_TEXTO(old.tipoinformante)||'->'||comun.a_texto(new.tipoinformante),old.tipoinformante,new.tipoinformante);
            END IF;    
            IF new.rubroclanae IS DISTINCT FROM old.rubroclanae THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','rubroclanae','U',new.informante,new.informante,comun.A_TEXTO(old.rubroclanae)||'->'||comun.a_texto(new.rubroclanae),old.rubroclanae,new.rubroclanae);
            END IF;    
            IF new.cadena IS DISTINCT FROM old.cadena THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','cadena','U',new.informante,new.informante,comun.A_TEXTO(old.cadena)||'->'||comun.a_texto(new.cadena),old.cadena,new.cadena);
            END IF;    
            IF new.direccion IS DISTINCT FROM old.direccion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','direccion','U',new.informante,new.informante,comun.A_TEXTO(old.direccion)||'->'||comun.a_texto(new.direccion),old.direccion,new.direccion);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','modi_usu','U',new.informante,new.informante,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','informantes','modi_fec','U',new.informante,new.informante,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','modi_ope','U',new.informante,new.informante,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;    
            IF new.altamanualperiodo IS DISTINCT FROM old.altamanualperiodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','altamanualperiodo','U',new.informante,new.informante,comun.A_TEXTO(old.altamanualperiodo)||'->'||comun.a_texto(new.altamanualperiodo),old.altamanualperiodo,new.altamanualperiodo);
            END IF;    
            IF new.altamanualpanel IS DISTINCT FROM old.altamanualpanel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','informantes','altamanualpanel','U',new.informante,new.informante,comun.A_TEXTO(old.altamanualpanel)||'->'||comun.a_texto(new.altamanualpanel),old.altamanualpanel,new.altamanualpanel);
            END IF;    
            IF new.altamanualtarea IS DISTINCT FROM old.altamanualtarea THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','informantes','altamanualtarea','U',new.informante,new.informante,comun.A_TEXTO(old.altamanualtarea)||'->'||comun.a_texto(new.altamanualtarea),old.altamanualtarea,new.altamanualtarea);
            END IF;    
            IF new.altamanualconfirmar IS DISTINCT FROM old.altamanualconfirmar THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','informantes','altamanualconfirmar','U',new.informante,new.informante,comun.A_TEXTO(old.altamanualconfirmar)||'->'||comun.a_texto(new.altamanualconfirmar),old.altamanualconfirmar,new.altamanualconfirmar);
            END IF;    
            IF new.razonsocial IS DISTINCT FROM old.razonsocial THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','razonsocial','U',new.informante,new.informante,comun.A_TEXTO(old.razonsocial)||'->'||comun.a_texto(new.razonsocial),old.razonsocial,new.razonsocial);
            END IF;    
            IF new.nombrecalle IS DISTINCT FROM old.nombrecalle THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','nombrecalle','U',new.informante,new.informante,comun.A_TEXTO(old.nombrecalle)||'->'||comun.a_texto(new.nombrecalle),old.nombrecalle,new.nombrecalle);
            END IF;    
            IF new.altura IS DISTINCT FROM old.altura THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','altura','U',new.informante,new.informante,comun.A_TEXTO(old.altura)||'->'||comun.a_texto(new.altura),old.altura,new.altura);
            END IF;    
            IF new.piso IS DISTINCT FROM old.piso THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','piso','U',new.informante,new.informante,comun.A_TEXTO(old.piso)||'->'||comun.a_texto(new.piso),old.piso,new.piso);
            END IF;    
            IF new.departamento IS DISTINCT FROM old.departamento THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','departamento','U',new.informante,new.informante,comun.A_TEXTO(old.departamento)||'->'||comun.a_texto(new.departamento),old.departamento,new.departamento);
            END IF;    
            IF new.cp IS DISTINCT FROM old.cp THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','cp','U',new.informante,new.informante,comun.A_TEXTO(old.cp)||'->'||comun.a_texto(new.cp),old.cp,new.cp);
            END IF;    
            IF new.obs_listador IS DISTINCT FROM old.obs_listador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','obs_listador','U',new.informante,new.informante,comun.A_TEXTO(old.obs_listador)||'->'||comun.a_texto(new.obs_listador),old.obs_listador,new.obs_listador);
            END IF;    
            IF new.nr_listador IS DISTINCT FROM old.nr_listador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','nr_listador','U',new.informante,new.informante,comun.A_TEXTO(old.nr_listador)||'->'||comun.a_texto(new.nr_listador),old.nr_listador,new.nr_listador);
            END IF;    
            IF new.fecha_listado IS DISTINCT FROM old.fecha_listado THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','informantes','fecha_listado','U',new.informante,new.informante,comun.A_TEXTO(old.fecha_listado)||'->'||comun.a_texto(new.fecha_listado),old.fecha_listado,new.fecha_listado);
            END IF;    
            IF new.grupo_listado IS DISTINCT FROM old.grupo_listado THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','informantes','grupo_listado','U',new.informante,new.informante,comun.A_TEXTO(old.grupo_listado)||'->'||comun.a_texto(new.grupo_listado),old.grupo_listado,new.grupo_listado);
            END IF;    
            IF new.conjuntomuestral IS DISTINCT FROM old.conjuntomuestral THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','informantes','conjuntomuestral','U',new.informante,new.informante,comun.A_TEXTO(old.conjuntomuestral)||'->'||comun.a_texto(new.conjuntomuestral),old.conjuntomuestral,new.conjuntomuestral);
            END IF;    
            IF new.rubro IS DISTINCT FROM old.rubro THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','informantes','rubro','U',new.informante,new.informante,comun.A_TEXTO(old.rubro)||'->'||comun.a_texto(new.rubro),old.rubro,new.rubro);
            END IF;    
            IF new.ordenhdr IS DISTINCT FROM old.ordenhdr THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','informantes','ordenhdr','U',new.informante,new.informante,comun.A_TEXTO(old.ordenhdr)||'->'||comun.a_texto(new.ordenhdr),old.ordenhdr,new.ordenhdr);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','informantes','informante','D',old.informante,old.informante,'D:'||comun.a_texto(old.informante),old.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','nombreinformante','D',old.informante,old.informante,'D:'||comun.a_texto(old.nombreinformante),old.nombreinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','tipoinformante','D',old.informante,old.informante,'D:'||comun.a_texto(old.tipoinformante),old.tipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','rubroclanae','D',old.informante,old.informante,'D:'||comun.a_texto(old.rubroclanae),old.rubroclanae);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','cadena','D',old.informante,old.informante,'D:'||comun.a_texto(old.cadena),old.cadena);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','direccion','D',old.informante,old.informante,'D:'||comun.a_texto(old.direccion),old.direccion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','modi_usu','D',old.informante,old.informante,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_datetime)
                     VALUES ('cvp','informantes','modi_fec','D',old.informante,old.informante,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','modi_ope','D',old.informante,old.informante,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','altamanualperiodo','D',old.informante,old.informante,'D:'||comun.a_texto(old.altamanualperiodo),old.altamanualperiodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','informantes','altamanualpanel','D',old.informante,old.informante,'D:'||comun.a_texto(old.altamanualpanel),old.altamanualpanel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','informantes','altamanualtarea','D',old.informante,old.informante,'D:'||comun.a_texto(old.altamanualtarea),old.altamanualtarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_datetime)
                     VALUES ('cvp','informantes','altamanualconfirmar','D',old.informante,old.informante,'D:'||comun.a_texto(old.altamanualconfirmar),old.altamanualconfirmar);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','razonsocial','D',old.informante,old.informante,'D:'||comun.a_texto(old.razonsocial),old.razonsocial);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','nombrecalle','D',old.informante,old.informante,'D:'||comun.a_texto(old.nombrecalle),old.nombrecalle);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','altura','D',old.informante,old.informante,'D:'||comun.a_texto(old.altura),old.altura);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','piso','D',old.informante,old.informante,'D:'||comun.a_texto(old.piso),old.piso);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','departamento','D',old.informante,old.informante,'D:'||comun.a_texto(old.departamento),old.departamento);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','cp','D',old.informante,old.informante,'D:'||comun.a_texto(old.cp),old.cp);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','obs_listador','D',old.informante,old.informante,'D:'||comun.a_texto(old.obs_listador),old.obs_listador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','nr_listador','D',old.informante,old.informante,'D:'||comun.a_texto(old.nr_listador),old.nr_listador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_datetime)
                     VALUES ('cvp','informantes','fecha_listado','D',old.informante,old.informante,'D:'||comun.a_texto(old.fecha_listado),old.fecha_listado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','informantes','grupo_listado','D',old.informante,old.informante,'D:'||comun.a_texto(old.grupo_listado),old.grupo_listado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','informantes','conjuntomuestral','D',old.informante,old.informante,'D:'||comun.a_texto(old.conjuntomuestral),old.conjuntomuestral);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','informantes','rubro','D',old.informante,old.informante,'D:'||comun.a_texto(old.rubro),old.rubro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','informantes','ordenhdr','D',old.informante,old.informante,'D:'||comun.a_texto(old.ordenhdr),old.ordenhdr);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_novespinf_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_novespinf_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novespinf','periodo','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','novespinf','calculo','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.calculo),new.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novespinf','producto','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','novespinf','especificacion','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.especificacion),new.especificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','novespinf','informante','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.informante),new.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novespinf','estado','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.estado),new.estado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novespinf','modi_usu','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_datetime)
                     VALUES ('cvp','novespinf','modi_fec','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novespinf','modi_ope','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novespinf','periodo','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.calculo IS DISTINCT FROM old.calculo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','novespinf','calculo','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.calculo)||'->'||comun.a_texto(new.calculo),old.calculo,new.calculo);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novespinf','producto','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.especificacion IS DISTINCT FROM old.especificacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','novespinf','especificacion','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.especificacion)||'->'||comun.a_texto(new.especificacion),old.especificacion,new.especificacion);
            END IF;    
            IF new.informante IS DISTINCT FROM old.informante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','novespinf','informante','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
            END IF;    
            IF new.estado IS DISTINCT FROM old.estado THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novespinf','estado','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.estado)||'->'||comun.a_texto(new.estado),old.estado,new.estado);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novespinf','modi_usu','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','novespinf','modi_fec','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novespinf','modi_ope','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.especificacion||'|'||new.informante,new.periodo,new.calculo,new.producto,new.especificacion,new.informante,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novespinf','periodo','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','novespinf','calculo','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.calculo),old.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novespinf','producto','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','novespinf','especificacion','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.especificacion),old.especificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','novespinf','informante','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.informante),old.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novespinf','estado','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.estado),old.estado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novespinf','modi_usu','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_datetime)
                     VALUES ('cvp','novespinf','modi_fec','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novespinf','modi_ope','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.especificacion||'|'||old.informante,old.periodo,old.calculo,old.producto,old.especificacion,old.informante,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_novext_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_novext_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','novext','periodo','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','novext','calculo','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.calculo),new.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','novext','producto','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','novext','promedioext','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.promedioext),new.promedioext);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','novext','relativoimputacionext','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.relativoimputacionext),new.relativoimputacionext);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','novext','indiceext','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.indiceext),new.indiceext);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','novext','modi_usu','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_datetime)
                     VALUES ('cvp','novext','modi_fec','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','novext','modi_ope','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','novext','periodo','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.calculo IS DISTINCT FROM old.calculo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','novext','calculo','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.calculo)||'->'||comun.a_texto(new.calculo),old.calculo,new.calculo);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','novext','producto','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.promedioext IS DISTINCT FROM old.promedioext THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','novext','promedioext','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.promedioext)||'->'||comun.a_texto(new.promedioext),old.promedioext,new.promedioext);
            END IF;    
            IF new.relativoimputacionext IS DISTINCT FROM old.relativoimputacionext THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','novext','relativoimputacionext','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.relativoimputacionext)||'->'||comun.a_texto(new.relativoimputacionext),old.relativoimputacionext,new.relativoimputacionext);
            END IF;    
            IF new.indiceext IS DISTINCT FROM old.indiceext THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','novext','indiceext','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.indiceext)||'->'||comun.a_texto(new.indiceext),old.indiceext,new.indiceext);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','novext','modi_usu','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','novext','modi_fec','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','novext','modi_ope','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','novext','periodo','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','novext','calculo','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.calculo),old.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','novext','producto','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','novext','promedioext','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.promedioext),old.promedioext);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','novext','relativoimputacionext','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.relativoimputacionext),old.relativoimputacionext);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','novext','indiceext','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.indiceext),old.indiceext);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','novext','modi_usu','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime)
                     VALUES ('cvp','novext','modi_fec','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','novext','modi_ope','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_novobs_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_novobs_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','periodo','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','novobs','calculo','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.calculo),new.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','producto','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','novobs','informante','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.informante),new.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','novobs','observacion','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.observacion),new.observacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','estado','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.estado),new.estado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','modi_usu','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_datetime)
                     VALUES ('cvp','novobs','modi_fec','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','modi_ope','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','usuario','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.usuario),new.usuario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','revisar_recep','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.revisar_recep),new.revisar_recep);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','comentarios','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.comentarios),new.comentarios);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','novobs','comentarios_recep','I',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.comentarios_recep),new.comentarios_recep);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','periodo','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.calculo IS DISTINCT FROM old.calculo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','novobs','calculo','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.calculo)||'->'||comun.a_texto(new.calculo),old.calculo,new.calculo);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','producto','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.informante IS DISTINCT FROM old.informante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','novobs','informante','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
            END IF;    
            IF new.observacion IS DISTINCT FROM old.observacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','novobs','observacion','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.observacion)||'->'||comun.a_texto(new.observacion),old.observacion,new.observacion);
            END IF;    
            IF new.estado IS DISTINCT FROM old.estado THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','estado','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.estado)||'->'||comun.a_texto(new.estado),old.estado,new.estado);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','modi_usu','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','novobs','modi_fec','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','modi_ope','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
            IF new.usuario IS DISTINCT FROM old.usuario THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','usuario','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.usuario)||'->'||comun.a_texto(new.usuario),old.usuario,new.usuario);
            END IF;    
            IF new.revisar_recep IS DISTINCT FROM old.revisar_recep THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','revisar_recep','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.revisar_recep)||'->'||comun.a_texto(new.revisar_recep),old.revisar_recep,new.revisar_recep);
            END IF;    
            IF new.comentarios IS DISTINCT FROM old.comentarios THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','comentarios','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.comentarios)||'->'||comun.a_texto(new.comentarios),old.comentarios,new.comentarios);
            END IF;    
            IF new.comentarios_recep IS DISTINCT FROM old.comentarios_recep THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','novobs','comentarios_recep','U',new.periodo||'|'||new.calculo||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.calculo,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.comentarios_recep)||'->'||comun.a_texto(new.comentarios_recep),old.comentarios_recep,new.comentarios_recep);
            END IF;    
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','periodo','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','novobs','calculo','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.calculo),old.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','producto','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','novobs','informante','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.informante),old.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','novobs','observacion','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.observacion),old.observacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','estado','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.estado),old.estado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','modi_usu','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_datetime)
                     VALUES ('cvp','novobs','modi_fec','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','modi_ope','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','usuario','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.usuario),old.usuario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','revisar_recep','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.revisar_recep),old.revisar_recep);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','comentarios','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.comentarios),old.comentarios);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','novobs','comentarios_recep','D',old.periodo||'|'||old.calculo||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.calculo,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.comentarios_recep),old.comentarios_recep);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_novpre_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_novpre_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','periodo','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','NovPre','visita','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.visita),new.visita);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','producto','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','NovPre','informante','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.informante),new.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_number)
                     VALUES ('cvp','NovPre','observacion','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.observacion),new.observacion);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','confirma','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.confirma),new.confirma);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','modi_usu','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_datetime)
                     VALUES ('cvp','NovPre','modi_fec','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','modi_ope','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','comentarios','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.comentarios),new.comentarios);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','usuario','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.usuario),new.usuario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','revisar_recep','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.revisar_recep),new.revisar_recep);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,new_text)
                     VALUES ('cvp','NovPre','comentarios_recep','I',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,'I:'||comun.a_texto(new.comentarios_recep),new.comentarios_recep);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','periodo','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.visita IS DISTINCT FROM old.visita THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','NovPre','visita','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.visita)||'->'||comun.a_texto(new.visita),old.visita,new.visita);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','producto','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.informante IS DISTINCT FROM old.informante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','NovPre','informante','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
            END IF;    
            IF new.observacion IS DISTINCT FROM old.observacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                     VALUES ('cvp','NovPre','observacion','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.observacion)||'->'||comun.a_texto(new.observacion),old.observacion,new.observacion);
            END IF;    

            IF new.confirma IS DISTINCT FROM old.confirma THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','confirma','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.confirma)||'->'||comun.a_texto(new.confirma),old.confirma,new.confirma);
            END IF;    

            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','modi_usu','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','NovPre','modi_fec','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','modi_ope','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
            IF new.comentarios IS DISTINCT FROM old.comentarios THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','comentarios','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.comentarios)||'->'||comun.a_texto(new.comentarios),old.comentarios,new.comentarios);
            END IF;    
            IF new.usuario IS DISTINCT FROM old.usuario THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','usuario','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.usuario)||'->'||comun.a_texto(new.usuario),old.usuario,new.usuario);
            END IF;    
            IF new.revisar_recep IS DISTINCT FROM old.revisar_recep THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','revisar_recep','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.revisar_recep)||'->'||comun.a_texto(new.revisar_recep),old.revisar_recep,new.revisar_recep);
            END IF;    
            IF new.comentarios_recep IS DISTINCT FROM old.comentarios_recep THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                     VALUES ('cvp','NovPre','comentarios_recep','U',new.periodo||'|'||new.visita||'|'||new.producto||'|'||new.informante||'|'||new.observacion,new.periodo,new.visita,new.producto,new.informante,new.observacion,comun.A_TEXTO(old.comentarios_recep)||'->'||comun.a_texto(new.comentarios_recep),old.comentarios_recep,new.comentarios_recep);
            END IF;    
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','periodo','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','NovPre','visita','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.visita),old.visita);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','producto','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','NovPre','informante','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.informante),old.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_number)
                     VALUES ('cvp','NovPre','observacion','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.observacion),old.observacion);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','confirma','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.confirma),old.confirma);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','modi_usu','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_datetime)
                     VALUES ('cvp','NovPre','modi_fec','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','modi_ope','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','comentarios','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.comentarios),old.comentarios);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','usuario','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.usuario),old.usuario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','revisar_recep','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.revisar_recep),old.revisar_recep);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,pk_number_4,pk_number_5,change_value,old_text)
                     VALUES ('cvp','NovPre','comentarios_recep','D',old.periodo||'|'||old.visita||'|'||old.producto||'|'||old.informante||'|'||old.observacion,old.periodo,old.visita,old.producto,old.informante,old.observacion,'D:'||comun.a_texto(old.comentarios_recep),old.comentarios_recep);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_novprod_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_novprod_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','NovProd','periodo','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','NovProd','calculo','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.calculo),new.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','NovProd','producto','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','NovProd','promedioext','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.promedioext),new.promedioext);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','NovProd','modi_usu','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_datetime)
                     VALUES ('cvp','NovProd','modi_fec','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','NovProd','modi_ope','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','NovProd','variacion','I',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,'I:'||comun.a_texto(new.variacion),new.variacion);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','NovProd','periodo','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.calculo IS DISTINCT FROM old.calculo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','NovProd','calculo','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.calculo)||'->'||comun.a_texto(new.calculo),old.calculo,new.calculo);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','NovProd','producto','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.promedioext IS DISTINCT FROM old.promedioext THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','NovProd','promedioext','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.promedioext)||'->'||comun.a_texto(new.promedioext),old.promedioext,new.promedioext);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','NovProd','modi_usu','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','NovProd','modi_fec','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','NovProd','modi_ope','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
            IF new.variacion IS DISTINCT FROM old.variacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','NovProd','variacion','U',new.periodo||'|'||new.calculo||'|'||new.producto,new.periodo,new.calculo,new.producto,comun.A_TEXTO(old.variacion)||'->'||comun.a_texto(new.variacion),old.variacion,new.variacion);
            END IF;    
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','NovProd','periodo','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','NovProd','calculo','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.calculo),old.calculo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','NovProd','producto','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','NovProd','promedioext','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.promedioext),old.promedioext);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','NovProd','modi_usu','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime)
                     VALUES ('cvp','NovProd','modi_fec','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','NovProd','modi_ope','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','NovProd','variacion','D',old.periodo||'|'||old.calculo||'|'||old.producto,old.periodo,old.calculo,old.producto,'D:'||comun.a_texto(old.variacion),old.variacion);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_numeros_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_numeros_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','numeros','numero','I',new.numero,new.numero,'I:'||comun.a_texto(new.numero),new.numero);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.numero IS DISTINCT FROM old.numero THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','numeros','numero','U',new.numero,new.numero,comun.A_TEXTO(old.numero)||'->'||comun.a_texto(new.numero),old.numero,new.numero);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','numeros','numero','D',old.numero,old.numero,'D:'||comun.a_texto(old.numero),old.numero);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_pantar_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_pantar_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','pantar','panel','I',new.panel||'|'||new.tarea,new.panel,new.tarea,'I:'||comun.a_texto(new.panel),new.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','pantar','tarea','I',new.panel||'|'||new.tarea,new.panel,new.tarea,'I:'||comun.a_texto(new.tarea),new.tarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','pantar','grupozonal','I',new.panel||'|'||new.tarea,new.panel,new.tarea,'I:'||comun.a_texto(new.grupozonal),new.grupozonal);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','pantar','panel2009','I',new.panel||'|'||new.tarea,new.panel,new.tarea,'I:'||comun.a_texto(new.panel2009),new.panel2009);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.panel IS DISTINCT FROM old.panel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','pantar','panel','U',new.panel||'|'||new.tarea,new.panel,new.tarea,comun.A_TEXTO(old.panel)||'->'||comun.a_texto(new.panel),old.panel,new.panel);
            END IF;    
            IF new.tarea IS DISTINCT FROM old.tarea THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','pantar','tarea','U',new.panel||'|'||new.tarea,new.panel,new.tarea,comun.A_TEXTO(old.tarea)||'->'||comun.a_texto(new.tarea),old.tarea,new.tarea);
            END IF;    
            IF new.grupozonal IS DISTINCT FROM old.grupozonal THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','pantar','grupozonal','U',new.panel||'|'||new.tarea,new.panel,new.tarea,comun.A_TEXTO(old.grupozonal)||'->'||comun.a_texto(new.grupozonal),old.grupozonal,new.grupozonal);
            END IF;    
            IF new.panel2009 IS DISTINCT FROM old.panel2009 THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','pantar','panel2009','U',new.panel||'|'||new.tarea,new.panel,new.tarea,comun.A_TEXTO(old.panel2009)||'->'||comun.a_texto(new.panel2009),old.panel2009,new.panel2009);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','pantar','panel','D',old.panel||'|'||old.tarea,old.panel,old.tarea,'D:'||comun.a_texto(old.panel),old.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','pantar','tarea','D',old.panel||'|'||old.tarea,old.panel,old.tarea,'D:'||comun.a_texto(old.tarea),old.tarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','pantar','grupozonal','D',old.panel||'|'||old.tarea,old.panel,old.tarea,'D:'||comun.a_texto(old.grupozonal),old.grupozonal);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','pantar','panel2009','D',old.panel||'|'||old.tarea,old.panel,old.tarea,'D:'||comun.a_texto(old.panel2009),old.panel2009);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_parametros_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_parametros_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_bool)
                     VALUES ('cvp','parametros','unicoregistro','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.unicoregistro),new.unicoregistro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_text)
                     VALUES ('cvp','parametros','nombreaplicacion','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.nombreaplicacion),new.nombreaplicacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_text)
                     VALUES ('cvp','parametros','titulo','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.titulo),new.titulo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_text)
                     VALUES ('cvp','parametros','archivologo','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.archivologo),new.archivologo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_number)
                     VALUES ('cvp','parametros','tamannodesvpre','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.tamannodesvpre),new.tamannodesvpre);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_number)
                     VALUES ('cvp','parametros','tamannodesvvar','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.tamannodesvvar),new.tamannodesvvar);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_text)
                     VALUES ('cvp','parametros','codigo','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.codigo),new.codigo);
                     
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_text)
                     VALUES ('cvp','parametros','pb_desde','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.pb_desde),new.pb_desde);     
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_text)
                     VALUES ('cvp','parametros','pb_hasta','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.pb_hasta),new.pb_hasta);          
      END IF;
      IF v_operacion='U' THEN
            
            IF new.unicoregistro IS DISTINCT FROM old.unicoregistro THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_bool,new_bool)
                     VALUES ('cvp','parametros','unicoregistro','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.unicoregistro)||'->'||comun.a_texto(new.unicoregistro),old.unicoregistro,new.unicoregistro);
            END IF;    
            IF new.nombreaplicacion IS DISTINCT FROM old.nombreaplicacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text,new_text)
                     VALUES ('cvp','parametros','nombreaplicacion','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.nombreaplicacion)||'->'||comun.a_texto(new.nombreaplicacion),old.nombreaplicacion,new.nombreaplicacion);
            END IF;    
            IF new.titulo IS DISTINCT FROM old.titulo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text,new_text)
                     VALUES ('cvp','parametros','titulo','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.titulo)||'->'||comun.a_texto(new.titulo),old.titulo,new.titulo);
            END IF;    
            IF new.archivologo IS DISTINCT FROM old.archivologo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text,new_text)
                     VALUES ('cvp','parametros','archivologo','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.archivologo)||'->'||comun.a_texto(new.archivologo),old.archivologo,new.archivologo);
            END IF;    
            IF new.tamannodesvpre IS DISTINCT FROM old.tamannodesvpre THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_number,new_number)
                     VALUES ('cvp','parametros','tamannodesvpre','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.tamannodesvpre)||'->'||comun.a_texto(new.tamannodesvpre),old.tamannodesvpre,new.tamannodesvpre);
            END IF;    
            IF new.tamannodesvvar IS DISTINCT FROM old.tamannodesvvar THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_number,new_number)
                     VALUES ('cvp','parametros','tamannodesvvar','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.tamannodesvvar)||'->'||comun.a_texto(new.tamannodesvvar),old.tamannodesvvar,new.tamannodesvvar);
            END IF;    
            IF new.codigo IS DISTINCT FROM old.codigo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text,new_text)
                     VALUES ('cvp','parametros','codigo','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.codigo)||'->'||comun.a_texto(new.codigo),old.codigo,new.codigo);
            END IF;
            IF new.pb_desde IS DISTINCT FROM old.pb_desde THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text,new_text)
                     VALUES ('cvp','parametros','pb_desde','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.pb_desde)||'->'||comun.a_texto(new.pb_desde),old.pb_desde,new.pb_desde);
            END IF;
            IF new.pb_hasta IS DISTINCT FROM old.pb_hasta THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text,new_text)
                     VALUES ('cvp','parametros','pb_hasta','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.pb_hasta)||'->'||comun.a_texto(new.pb_hasta),old.pb_hasta,new.pb_hasta);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_bool)
                     VALUES ('cvp','parametros','unicoregistro','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.unicoregistro),old.unicoregistro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text)
                     VALUES ('cvp','parametros','nombreaplicacion','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.nombreaplicacion),old.nombreaplicacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text)
                     VALUES ('cvp','parametros','titulo','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.titulo),old.titulo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text)
                     VALUES ('cvp','parametros','archivologo','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.archivologo),old.archivologo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_number)
                     VALUES ('cvp','parametros','tamannodesvpre','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.tamannodesvpre),old.tamannodesvpre);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_number)
                     VALUES ('cvp','parametros','tamannodesvvar','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.tamannodesvvar),old.tamannodesvvar);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text)
                     VALUES ('cvp','parametros','codigo','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.codigo),old.codigo);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text)
                     VALUES ('cvp','parametros','pb_desde','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.pb_desde),old.pb_desde);          
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text)
                     VALUES ('cvp','parametros','pb_hasta','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.pb_hasta),old.pb_hasta);     
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_pasoatraves_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_pasoatraves_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_bool)
                     VALUES ('cvp','pasoatraves','unicoregistro','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.unicoregistro),new.unicoregistro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_text)
                     VALUES ('cvp','pasoatraves','tipo','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.tipo),new.tipo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,new_text)
                     VALUES ('cvp','pasoatraves','valor','I',new.unicoregistro,new.unicoregistro,'I:'||comun.a_texto(new.valor),new.valor);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.unicoregistro IS DISTINCT FROM old.unicoregistro THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_bool,new_bool)
                     VALUES ('cvp','pasoatraves','unicoregistro','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.unicoregistro)||'->'||comun.a_texto(new.unicoregistro),old.unicoregistro,new.unicoregistro);
            END IF;    
            IF new.tipo IS DISTINCT FROM old.tipo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text,new_text)
                     VALUES ('cvp','pasoatraves','tipo','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.tipo)||'->'||comun.a_texto(new.tipo),old.tipo,new.tipo);
            END IF;    
            IF new.valor IS DISTINCT FROM old.valor THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text,new_text)
                     VALUES ('cvp','pasoatraves','valor','U',new.unicoregistro,new.unicoregistro,comun.A_TEXTO(old.valor)||'->'||comun.a_texto(new.valor),old.valor,new.valor);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_bool)
                     VALUES ('cvp','pasoatraves','unicoregistro','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.unicoregistro),old.unicoregistro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text)
                     VALUES ('cvp','pasoatraves','tipo','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.tipo),old.tipo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_bool_1,change_value,old_text)
                     VALUES ('cvp','pasoatraves','valor','D',old.unicoregistro,old.unicoregistro,'D:'||comun.a_texto(old.valor),old.valor);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_pb_externos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_pb_externos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2, change_value,new_text)
                     VALUES ('cvp','pb_externos','producto','I',new.producto||'|'||new.periodo,new.producto, new.periodo, 'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2, change_value,new_text)
                     VALUES ('cvp','pb_externos','periodo','I',new.producto||'|'||new.periodo,new.producto, new.periodo, 'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2, change_value,new_number)
                     VALUES ('cvp','pb_externos','indice','I',new.producto||'|'||new.periodo,new.producto, new.periodo, 'I:'||comun.a_texto(new.indice),new.indice);     
               

                
	  END IF;
      IF v_operacion='U' THEN
            
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1, pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','pb_externos','producto','U',new.producto||'|'||new.periodo, new.producto, new.periodo, comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1, pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','pb_externos','periodo','U',new.producto||'|'||new.periodo, new.producto, new.periodo, comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;
            IF new.indice IS DISTINCT FROM old.indice THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1, pk_text_2,change_value,old_text,new_number)
                     VALUES ('cvp','pb_externos','indice','U',new.producto||'|'||new.periodo, new.producto, new.periodo, comun.A_TEXTO(old.indice)||'->'||comun.a_texto(new.indice),old.indice,new.indice);
            END IF;
	  END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1, pk_text_2, change_value,old_text)
                     VALUES ('cvp','pb_externos','producto','D',old.producto||'|'||old.periodo,old.producto, old.periodo, 'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1, pk_text_2, change_value,old_text)
                     VALUES ('cvp','pb_externos','periodo','D',old.producto||'|'||old.periodo,old.producto, old.periodo, 'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1, pk_text_2, change_value,old_number)
                     VALUES ('cvp','pb_externos','indice','D',old.producto||'|'||old.periodo,old.producto, old.periodo, 'D:'||comun.a_texto(old.indice),old.indice);     
            
		END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_periodos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_periodos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','periodos','periodo','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_number)
                     VALUES ('cvp','periodos','ano','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.ano),new.ano);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_number)
                     VALUES ('cvp','periodos','mes','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.mes),new.mes);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_number)
                     VALUES ('cvp','periodos','visita','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.visita),new.visita);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','periodos','ingresando','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.ingresando),new.ingresando);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','periodos','periodoanterior','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.periodoanterior),new.periodoanterior);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_datetime)
                     VALUES ('cvp','periodos','fechageneracionperiodo','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.fechageneracionperiodo),new.fechageneracionperiodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','periodos','comentariosper','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.comentariosper),new.comentariosper);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_datetime)
                     VALUES ('cvp','periodos','fechacalculoprereplote1','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.fechacalculoprereplote1),new.fechacalculoprereplote1);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_datetime)
                     VALUES ('cvp','periodos','fechacalculoprereplote2','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.fechacalculoprereplote2),new.fechacalculoprereplote2);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','periodos','habilitado','I',new.periodo,new.periodo,'I:'||comun.a_texto(new.habilitado),new.habilitado);
	  END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','periodos','periodo','U',new.periodo,new.periodo,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.ano IS DISTINCT FROM old.ano THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_number,new_number)
                     VALUES ('cvp','periodos','ano','U',new.periodo,new.periodo,comun.A_TEXTO(old.ano)||'->'||comun.a_texto(new.ano),old.ano,new.ano);
            END IF;    
            IF new.mes IS DISTINCT FROM old.mes THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_number,new_number)
                     VALUES ('cvp','periodos','mes','U',new.periodo,new.periodo,comun.A_TEXTO(old.mes)||'->'||comun.a_texto(new.mes),old.mes,new.mes);
            END IF;    
            IF new.visita IS DISTINCT FROM old.visita THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_number,new_number)
                     VALUES ('cvp','periodos','visita','U',new.periodo,new.periodo,comun.A_TEXTO(old.visita)||'->'||comun.a_texto(new.visita),old.visita,new.visita);
            END IF;    
            IF new.ingresando IS DISTINCT FROM old.ingresando THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','periodos','ingresando','U',new.periodo,new.periodo,comun.A_TEXTO(old.ingresando)||'->'||comun.a_texto(new.ingresando),old.ingresando,new.ingresando);
            END IF;    
            IF new.periodoanterior IS DISTINCT FROM old.periodoanterior THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','periodos','periodoanterior','U',new.periodo,new.periodo,comun.A_TEXTO(old.periodoanterior)||'->'||comun.a_texto(new.periodoanterior),old.periodoanterior,new.periodoanterior);
            END IF;    
            IF new.fechageneracionperiodo IS DISTINCT FROM old.fechageneracionperiodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','periodos','fechageneracionperiodo','U',new.periodo,new.periodo,comun.A_TEXTO(old.fechageneracionperiodo)||'->'||comun.a_texto(new.fechageneracionperiodo),old.fechageneracionperiodo,new.fechageneracionperiodo);
            END IF;    
            IF new.comentariosper IS DISTINCT FROM old.comentariosper THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','periodos','comentariosper','U',new.periodo,new.periodo,comun.A_TEXTO(old.comentariosper)||'->'||comun.a_texto(new.comentariosper),old.comentariosper,new.comentariosper);
            END IF;
            IF new.fechacalculoprereplote1 IS DISTINCT FROM old.fechacalculoprereplote1 THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','periodos','fechacalculoprereplote1','U',new.periodo,new.periodo,comun.A_TEXTO(old.fechacalculoprereplote1)||'->'||comun.a_texto(new.fechacalculoprereplote1),old.fechacalculoprereplote1,new.fechacalculoprereplote1);
            END IF;    
            IF new.fechacalculoprereplote2 IS DISTINCT FROM old.fechacalculoprereplote2 THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','periodos','fechacalculoprereplote2','U',new.periodo,new.periodo,comun.A_TEXTO(old.fechacalculoprereplote2)||'->'||comun.a_texto(new.fechacalculoprereplote2),old.fechacalculoprereplote2,new.fechacalculoprereplote2);
            END IF;    
            IF new.habilitado IS DISTINCT FROM old.habilitado THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','periodos','habilitado','U',new.periodo,new.periodo,comun.A_TEXTO(old.habilitado)||'->'||comun.a_texto(new.habilitado),old.habilitado,new.habilitado);
            END IF;    
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','periodos','periodo','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_number)
                     VALUES ('cvp','periodos','ano','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.ano),old.ano);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_number)
                     VALUES ('cvp','periodos','mes','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.mes),old.mes);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_number)
                     VALUES ('cvp','periodos','visita','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.visita),old.visita);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','periodos','ingresando','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.ingresando),old.ingresando);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','periodos','periodoanterior','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.periodoanterior),old.periodoanterior);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_datetime)
                     VALUES ('cvp','periodos','fechageneracionperiodo','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.fechageneracionperiodo),old.fechageneracionperiodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','periodos','comentariosper','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.comentariosper),old.comentariosper);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_datetime)
                     VALUES ('cvp','periodos','fechacalculoprereplote1','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.fechacalculoprereplote1),old.fechacalculoprereplote1);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_datetime)
                     VALUES ('cvp','periodos','fechacalculoprereplote2','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.fechacalculoprereplote2),old.fechacalculoprereplote2);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','periodos','habilitado','D',old.periodo,old.periodo,'D:'||comun.a_texto(old.habilitado),old.habilitado);
	  END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_personal_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_personal_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','personal','persona','I',new.persona,new.persona,'I:'||comun.a_texto(new.persona),new.persona);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','personal','labor','I',new.persona,new.persona,'I:'||comun.a_texto(new.labor),new.labor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','personal','nombre','I',new.persona,new.persona,'I:'||comun.a_texto(new.nombre),new.nombre);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','personal','apellido','I',new.persona,new.persona,'I:'||comun.a_texto(new.apellido),new.apellido);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','personal','username','I',new.persona,new.persona,'I:'||comun.a_texto(new.username),new.username);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','personal','activo','I',new.persona,new.persona,'I:'||comun.a_texto(new.activo),new.activo);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.persona IS DISTINCT FROM old.persona THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','personal','persona','U',new.persona,new.persona,comun.A_TEXTO(old.persona)||'->'||comun.a_texto(new.persona),old.persona,new.persona);
            END IF;    
            IF new.labor IS DISTINCT FROM old.labor THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','personal','labor','U',new.persona,new.persona,comun.A_TEXTO(old.labor)||'->'||comun.a_texto(new.labor),old.labor,new.labor);
            END IF;    
            IF new.nombre IS DISTINCT FROM old.nombre THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','personal','nombre','U',new.persona,new.persona,comun.A_TEXTO(old.nombre)||'->'||comun.a_texto(new.nombre),old.nombre,new.nombre);
            END IF;    
            IF new.apellido IS DISTINCT FROM old.apellido THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','personal','apellido','U',new.persona,new.persona,comun.A_TEXTO(old.apellido)||'->'||comun.a_texto(new.apellido),old.apellido,new.apellido);
            END IF;    
            IF new.username IS DISTINCT FROM old.username THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','personal','username','U',new.persona,new.persona,comun.A_TEXTO(old.username)||'->'||comun.a_texto(new.username),old.username,new.username);
            END IF;    
            IF new.activo IS DISTINCT FROM old.activo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','personal','activo','U',new.persona,new.persona,comun.A_TEXTO(old.activo)||'->'||comun.a_texto(new.activo),old.activo,new.activo);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','personal','persona','D',old.persona,old.persona,'D:'||comun.a_texto(old.persona),old.persona);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','personal','labor','D',old.persona,old.persona,'D:'||comun.a_texto(old.labor),old.labor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','personal','nombre','D',old.persona,old.persona,'D:'||comun.a_texto(old.nombre),old.nombre);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','personal','apellido','D',old.persona,old.persona,'D:'||comun.a_texto(old.apellido),old.apellido);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','personal','username','D',old.persona,old.persona,'D:'||comun.a_texto(old.username),old.username);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','personal','activo','D',old.persona,old.persona,'D:'||comun.a_texto(old.activo),old.activo);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_prerep_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_prerep_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','PreRep','periodo','I',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,'I:'||new.periodo,new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','PreRep','producto','I',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,'I:'||new.producto,new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,new_number)
                     VALUES ('cvp','PreRep','informante','I',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,'I:'||comun.a_texto(new.informante),new.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,new_text)
                     VALUES('cvp','PreRep','modi_usu','I',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,new_datetime)
                     VALUES('cvp','PreRep','modi_fec','I',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,new_text)
                     VALUES('cvp','PreRep','modi_ope','I',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);     
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','PreRep','periodo','U',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,comun.A_TEXTO(old.periodo)||'->'||
                     comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','PreRep','producto','U',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,comun.A_TEXTO(old.producto)||'->'||
                     comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.informante IS DISTINCT FROM old.informante THEN
                 INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','PreRep','informante','U',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,comun.A_TEXTO(old.informante)||'->'||
                     comun.a_texto(new.informante),old.informante,new.informante);
            END IF;    
               
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                 INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','PreRep','modi_usu','U',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,comun.A_TEXTO(old.modi_usu)||'->'||
                     comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                  INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','PreRep','modi_fec','U',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,comun.A_TEXTO(old.modi_fec)||'->'||
                     comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                 INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','PreRep','modi_ope','U',new.periodo||'|'||new.producto||'|'||new.informante,new.periodo,new.producto,new.informante,comun.A_TEXTO(old.modi_ope)||'->'||
                     comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','PreRep','periodo','D',old.periodo||'|'||old.producto||'|'||old.informante,old.periodo,old.producto,old.informante,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','PreRep','producto','D',old.periodo||'|'||old.producto||'|'||old.informante,old.periodo,old.producto,old.informante,'D:'||comun.a_texto(old.producto),old.producto);  
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_number)
                     VALUES ('cvp','PreRep','informante','D',old.periodo||'|'||old.producto||'|'||old.informante,old.periodo,old.producto,old.informante,'D:'||comun.a_texto(old.informante),old.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','PreRep','modi_usu','D',old.periodo||'|'||old.producto||'|'||old.informante,old.periodo,old.producto,old.informante,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_datetime)
                     VALUES ('cvp','PreRep','modi_fec','D',old.periodo||'|'||old.producto||'|'||old.informante,old.periodo,old.producto,old.informante,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','PreRep','modi_ope','D',old.periodo||'|'||old.producto||'|'||old.informante,old.periodo,old.producto,old.informante,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);        
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_prodatr_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_prodatr_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','prodatr','producto','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','prodatr','atributo','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.atributo),new.atributo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','prodatr','valornormal','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.valornormal),new.valornormal);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','prodatr','orden','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.orden),new.orden);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','prodatr','normalizable','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.normalizable),new.normalizable);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','prodatr','tiponormalizacion','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.tiponormalizacion),new.tiponormalizacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','prodatr','alterable','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.alterable),new.alterable);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','prodatr','prioridad','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.prioridad),new.prioridad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','prodatr','operacion','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.operacion),new.operacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','prodatr','rangodesde','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.rangodesde),new.rangodesde);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','prodatr','rangohasta','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.rangohasta),new.rangohasta);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','prodatr','modi_usu','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','prodatr','modi_fec','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','prodatr','modi_ope','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','prodatr','orden_calculo_especial','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.orden_calculo_especial),new.orden_calculo_especial);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','prodatr','tipo_promedio','I',new.producto||'|'||new.atributo,new.producto,new.atributo,'I:'||comun.a_texto(new.tipo_promedio),new.tipo_promedio);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodatr','producto','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.atributo IS DISTINCT FROM old.atributo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','prodatr','atributo','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.atributo)||'->'||comun.a_texto(new.atributo),old.atributo,new.atributo);
            END IF;    
            IF new.valornormal IS DISTINCT FROM old.valornormal THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','prodatr','valornormal','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.valornormal)||'->'||comun.a_texto(new.valornormal),old.valornormal,new.valornormal);
            END IF;    
            IF new.orden IS DISTINCT FROM old.orden THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','prodatr','orden','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.orden)||'->'||comun.a_texto(new.orden),old.orden,new.orden);
            END IF;    
            IF new.normalizable IS DISTINCT FROM old.normalizable THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodatr','normalizable','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.normalizable)||'->'||comun.a_texto(new.normalizable),old.normalizable,new.normalizable);
            END IF;    
            IF new.tiponormalizacion IS DISTINCT FROM old.tiponormalizacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodatr','tiponormalizacion','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.tiponormalizacion)||'->'||comun.a_texto(new.tiponormalizacion),old.tiponormalizacion,new.tiponormalizacion);
            END IF;    
            IF new.alterable IS DISTINCT FROM old.alterable THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodatr','alterable','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.alterable)||'->'||comun.a_texto(new.alterable),old.alterable,new.alterable);
            END IF;    
            IF new.prioridad IS DISTINCT FROM old.prioridad THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','prodatr','prioridad','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.prioridad)||'->'||comun.a_texto(new.prioridad),old.prioridad,new.prioridad);
            END IF;    
            IF new.operacion IS DISTINCT FROM old.operacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodatr','operacion','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.operacion)||'->'||comun.a_texto(new.operacion),old.operacion,new.operacion);
            END IF;    
            IF new.rangodesde IS DISTINCT FROM old.rangodesde THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','prodatr','rangodesde','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.rangodesde)||'->'||comun.a_texto(new.rangodesde),old.rangodesde,new.rangodesde);
            END IF;    
            IF new.rangohasta IS DISTINCT FROM old.rangohasta THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','prodatr','rangohasta','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.rangohasta)||'->'||comun.a_texto(new.rangohasta),old.rangohasta,new.rangohasta);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodatr','modi_usu','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','prodatr','modi_fec','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodatr','modi_ope','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;            
            IF new.orden_calculo_especial IS DISTINCT FROM old.orden_calculo_especial THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','prodatr','orden_calculo_especial','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.orden_calculo_especial)||'->'||comun.a_texto(new.orden_calculo_especial),old.orden_calculo_especial,new.orden_calculo_especial);
            END IF;
            IF new.tipo_promedio IS DISTINCT FROM old.tipo_promedio THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodatr','tipo_promedio','U',new.producto||'|'||new.atributo,new.producto,new.atributo,comun.A_TEXTO(old.tipo_promedio)||'->'||comun.a_texto(new.tipo_promedio),old.tipo_promedio,new.tipo_promedio);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','prodatr','producto','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','prodatr','atributo','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.atributo),old.atributo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','prodatr','valornormal','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.valornormal),old.valornormal);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','prodatr','orden','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.orden),old.orden);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','prodatr','normalizable','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.normalizable),old.normalizable);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','prodatr','tiponormalizacion','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.tiponormalizacion),old.tiponormalizacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','prodatr','alterable','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.alterable),old.alterable);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','prodatr','prioridad','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.prioridad),old.prioridad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','prodatr','operacion','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.operacion),old.operacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','prodatr','rangodesde','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.rangodesde),old.rangodesde);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','prodatr','rangohasta','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.rangohasta),old.rangohasta);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','prodatr','modi_usu','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','prodatr','modi_fec','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','prodatr','modi_ope','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','prodatr','orden_calculo_especial','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.orden_calculo_especial),old.orden_calculo_especial);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','prodatr','tipo_promedio','D',old.producto||'|'||old.atributo,old.producto,old.atributo,'D:'||comun.a_texto(old.tipo_promedio),old.tipo_promedio);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_prodtipoinf_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_prodtipoinf_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','prodtipoinf','producto','I',new.producto||'|'||new.tipoinformante,new.producto,new.tipoinformante,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','prodtipoinf','tipoinformante','I',new.producto||'|'||new.tipoinformante,new.producto,new.tipoinformante,'I:'||comun.a_texto(new.tipoinformante),new.tipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_number)
                     VALUES ('cvp','prodtipoinf','ponderadorti','I',new.producto||'|'||new.tipoinformante,new.producto,new.tipoinformante,'I:'||comun.a_texto(new.ponderadorti),new.ponderadorti);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodtipoinf','producto','U',new.producto||'|'||new.tipoinformante,new.producto,new.tipoinformante,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.tipoinformante IS DISTINCT FROM old.tipoinformante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','prodtipoinf','tipoinformante','U',new.producto||'|'||new.tipoinformante,new.producto,new.tipoinformante,comun.A_TEXTO(old.tipoinformante)||'->'||comun.a_texto(new.tipoinformante),old.tipoinformante,new.tipoinformante);
            END IF;    
            IF new.ponderadorti IS DISTINCT FROM old.ponderadorti THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_number,new_number)
                     VALUES ('cvp','prodtipoinf','ponderadorti','U',new.producto||'|'||new.tipoinformante,new.producto,new.tipoinformante,comun.A_TEXTO(old.ponderadorti)||'->'||comun.a_texto(new.ponderadorti),old.ponderadorti,new.ponderadorti);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','prodtipoinf','producto','D',old.producto||'|'||old.tipoinformante,old.producto,old.tipoinformante,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','prodtipoinf','tipoinformante','D',old.producto||'|'||old.tipoinformante,old.producto,old.tipoinformante,'D:'||comun.a_texto(old.tipoinformante),old.tipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_number)
                     VALUES ('cvp','prodtipoinf','ponderadorti','D',old.producto||'|'||old.tipoinformante,old.producto,old.tipoinformante,'D:'||comun.a_texto(old.ponderadorti),old.ponderadorti);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_productos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_productos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','producto','I',new.producto,new.producto,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','nombreproducto','I',new.producto,new.producto,'I:'||comun.a_texto(new.nombreproducto),new.nombreproducto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','formula','I',new.producto,new.producto,'I:'||comun.a_texto(new.formula),new.formula);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','estacional','I',new.producto,new.producto,'I:'||comun.a_texto(new.estacional),new.estacional);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','imputacon','I',new.producto,new.producto,'I:'||comun.a_texto(new.imputacon),new.imputacon);
                
                /*INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','umbraldescarte','I',new.producto,new.producto,'I:'||comun.a_texto(new.umbraldescarte),new.umbraldescarte);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','espriimpportipoinf','I',new.producto,new.producto,'I:'||comun.a_texto(new.espriimpportipoinf),new.espriimpportipoinf);*/
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','cantperaltaauto','I',new.producto,new.producto,'I:'||comun.a_texto(new.cantperaltaauto),new.cantperaltaauto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','cantperbajaauto','I',new.producto,new.producto,'I:'||comun.a_texto(new.cantperbajaauto),new.cantperbajaauto);
                /*INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','umbralpriimp','I',new.producto,new.producto,'I:'||comun.a_texto(new.umbralpriimp),new.umbralpriimp);*/
                --INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                --     VALUES ('cvp','productos','cantporunidcons','I',new.producto,new.producto,'I:'||comun.a_texto(new.cantporunidcons),new.cantporunidcons);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','unidadmedidaporunidcons','I',new.producto,new.producto,'I:'||comun.a_texto(new.unidadmedidaporunidcons),new.unidadmedidaporunidcons);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','esexternohabitual','I',new.producto,new.producto,'I:'||comun.a_texto(new.esexternohabitual),new.esexternohabitual);
            /*    INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','umbralbajaauto','I',new.producto,new.producto,'I:'||comun.a_texto(new.umbralbajaauto),new.umbralbajaauto);*/
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','tipocalculo','I',new.producto,new.producto,'I:'||comun.a_texto(new.tipocalculo),new.tipocalculo);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_number)
                     VALUES ('cvp','productos','cantobs','I',new.producto,new.producto,'I:'||comun.a_texto(new.cantobs),new.cantobs);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','productos','unidadmedidaabreviada','I',new.producto,new.producto,'I:'||comun.a_texto(new.unidadmedidaabreviada),new.unidadmedidaabreviada);

      END IF;
      IF v_operacion='U' THEN
            
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','producto','U',new.producto,new.producto,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.nombreproducto IS DISTINCT FROM old.nombreproducto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','nombreproducto','U',new.producto,new.producto,comun.A_TEXTO(old.nombreproducto)||'->'||comun.a_texto(new.nombreproducto),old.nombreproducto,new.nombreproducto);
            END IF;    
            IF new.formula IS DISTINCT FROM old.formula THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','formula','U',new.producto,new.producto,comun.A_TEXTO(old.formula)||'->'||comun.a_texto(new.formula),old.formula,new.formula);
            END IF;    
            IF new.estacional IS DISTINCT FROM old.estacional THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','estacional','U',new.producto,new.producto,comun.A_TEXTO(old.estacional)||'->'||comun.a_texto(new.estacional),old.estacional,new.estacional);
            END IF;    
            IF new.imputacon IS DISTINCT FROM old.imputacon THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','imputacon','U',new.producto,new.producto,comun.A_TEXTO(old.imputacon)||'->'||comun.a_texto(new.imputacon),old.imputacon,new.imputacon);
            END IF;

            /*IF new.umbraldescarte IS DISTINCT FROM old.umbraldescarte THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','umbraldescarte','U',new.producto,new.producto,comun.A_TEXTO(old.umbraldescarte)||'->'||comun.a_texto(new.umbraldescarte),old.umbraldescarte,new.umbraldescarte);
            END IF;
            
            IF new.espriimpportipoinf IS DISTINCT FROM old.espriimpportipoinf THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','espriimpportipoinf','U',new.producto,new.producto,comun.A_TEXTO(old.espriimpportipoinf)||'->'||comun.a_texto(new.espriimpportipoinf),old.espriimpportipoinf,new.espriimpportipoinf);
            END IF;
            */
            IF new.cantperaltaauto IS DISTINCT FROM old.cantperaltaauto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','cantperaltaauto','U',new.producto,new.producto,comun.A_TEXTO(old.cantperaltaauto)||'->'||comun.a_texto(new.cantperaltaauto),old.cantperaltaauto,new.cantperaltaauto);
            END IF;
            IF new.cantperbajaauto IS DISTINCT FROM old.cantperbajaauto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','cantperbajaauto','U',new.producto,new.producto,comun.A_TEXTO(old.cantperbajaauto)||'->'||comun.a_texto(new.cantperbajaauto),old.cantperbajaauto,new.cantperbajaauto);
            END IF;
           /* IF new.umbralpriimp IS DISTINCT FROM old.umbralpriimp THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','umbralpriimp','U',new.producto,new.producto,comun.A_TEXTO(old.umbralpriimp)||'->'||comun.a_texto(new.umbralpriimp),old.umbralpriimp,new.umbralpriimp);
            END IF;*/
            /*IF new.cantporunidcons IS DISTINCT FROM old.cantporunidcons THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','cantporunidcons','U',new.producto,new.producto,comun.A_TEXTO(old.cantporunidcons)||'->'||comun.a_texto(new.cantporunidcons),old.cantporunidcons,new.cantporunidcons);
            END IF;*/
            IF new.unidadmedidaporunidcons IS DISTINCT FROM old.unidadmedidaporunidcons THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','unidadmedidaporunidcons','U',new.producto,new.producto,comun.A_TEXTO(old.unidadmedidaporunidcons)||'->'||comun.a_texto(new.unidadmedidaporunidcons),old.unidadmedidaporunidcons,new.unidadmedidaporunidcons);
            END IF;
            IF new.esexternohabitual IS DISTINCT FROM old.esexternohabitual THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','esexternohabitual','U',new.producto,new.producto,comun.A_TEXTO(old.esexternohabitual)||'->'||comun.a_texto(new.esexternohabitual),old.esexternohabitual,new.esexternohabitual);
            END IF;
            /*IF new.umbralbajaauto IS DISTINCT FROM old.umbralbajaauto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','umbralbajaauto','U',new.producto,new.producto,comun.A_TEXTO(old.umbralbajaauto)||'->'||comun.a_texto(new.umbralbajaauto),old.umbralbajaauto,new.umbralbajaauto);
            END IF;*/
            IF new.tipocalculo IS DISTINCT FROM old.tipocalculo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','tipocalculo','U',new.producto,new.producto,comun.A_TEXTO(old.tipocalculo)||'->'||comun.a_texto(new.tipocalculo),old.tipocalculo,new.tipocalculo);
            END IF;
            
            IF new.cantobs IS DISTINCT FROM old.cantobs THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_number,new_number)
                     VALUES ('cvp','productos','cantobs','U',new.producto,new.producto,comun.A_TEXTO(old.cantobs)||'->'||comun.a_texto(new.cantobs),old.cantobs,new.cantobs);
            END IF;
            IF new.unidadmedidaabreviada IS DISTINCT FROM old.unidadmedidaabreviada THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','productos','unidadmedidaabreviada','U',new.producto,new.producto,comun.A_TEXTO(old.unidadmedidaabreviada)||'->'||comun.a_texto(new.unidadmedidaabreviada),old.unidadmedidaabreviada,new.unidadmedidaabreviada);
            END IF;
            
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','producto','D',old.producto,old.producto,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','nombreproducto','D',old.producto,old.producto,'D:'||comun.a_texto(old.nombreproducto),old.nombreproducto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','formula','D',old.producto,old.producto,'D:'||comun.a_texto(old.formula),old.formula);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','estacional','D',old.producto,old.producto,'D:'||comun.a_texto(old.estacional),old.estacional);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','imputacon','D',old.producto,old.producto,'D:'||comun.a_texto(old.imputacon),old.imputacon);

               /* INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','umbraldescarte','D',old.producto,old.producto,'D:'||comun.a_texto(old.umbraldescarte),old.umbraldescarte);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','espriimpportipoinf','D',old.producto,old.producto,'D:'||comun.a_texto(old.espriimpportipoinf),old.espriimpportipoinf);*/
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','cantperaltaauto','D',old.producto,old.producto,'D:'||comun.a_texto(old.cantperaltaauto),old.cantperaltaauto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','cantperbajaauto','D',old.producto,old.producto,'D:'||comun.a_texto(old.cantperbajaauto),old.cantperbajaauto);
               /* INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','umbralpriimp','D',old.producto,old.producto,'D:'||comun.a_texto(old.umbralpriimp),old.umbralpriimp);*/
                /*INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','cantporunidcons','D',old.producto,old.producto,'D:'||comun.a_texto(old.cantporunidcons),old.cantporunidcons);*/
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','unidadmedidaporunidcons','D',old.producto,old.producto,'D:'||comun.a_texto(old.unidadmedidaporunidcons),old.unidadmedidaporunidcons);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','esexternohabitual','D',old.producto,old.producto,'D:'||comun.a_texto(old.esexternohabitual),old.esexternohabitual);
              /*  INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','umbralbajaauto','D',old.producto,old.producto,'D:'||comun.a_texto(old.umbralbajaauto),old.umbralbajaauto);*/
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','tipocalculo','D',old.producto,old.producto,'D:'||comun.a_texto(old.tipocalculo),old.tipocalculo);
                     
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_number)
                     VALUES ('cvp','productos','cantobs','D',old.producto,old.producto,'D:'||comun.a_texto(old.cantobs),old.cantobs);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','productos','unidadmedidaabreviada','D',old.producto,old.producto,'D:'||comun.a_texto(old.unidadmedidaabreviada),old.unidadmedidaabreviada);
           
        END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_razones_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_razones_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','razones','razon','I',new.razon,new.razon,'I:'||comun.a_texto(new.razon),new.razon);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','razones','nombrerazon','I',new.razon,new.razon,'I:'||comun.a_texto(new.nombrerazon),new.nombrerazon);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','razones','espositivoinformante','I',new.razon,new.razon,'I:'||comun.a_texto(new.espositivoinformante),new.espositivoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','razones','espositivoformulario','I',new.razon,new.razon,'I:'||comun.a_texto(new.espositivoformulario),new.espositivoformulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','razones','escierredefinitivoinf','I',new.razon,new.razon,'I:'||comun.a_texto(new.escierredefinitivoinf),new.escierredefinitivoinf);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','razones','escierredefinitivofor','I',new.razon,new.razon,'I:'||comun.a_texto(new.escierredefinitivofor),new.escierredefinitivofor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','razones','visibleparaencuestador','I',new.razon,new.razon,'I:'||comun.a_texto(new.visibleparaencuestador),new.visibleparaencuestador);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.razon IS DISTINCT FROM old.razon THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','razones','razon','U',new.razon,new.razon,comun.A_TEXTO(old.razon)||'->'||comun.a_texto(new.razon),old.razon,new.razon);
            END IF;    
            IF new.nombrerazon IS DISTINCT FROM old.nombrerazon THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','razones','nombrerazon','U',new.razon,new.razon,comun.A_TEXTO(old.nombrerazon)||'->'||comun.a_texto(new.nombrerazon),old.nombrerazon,new.nombrerazon);
            END IF;    
            IF new.espositivoinformante IS DISTINCT FROM old.espositivoinformante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','razones','espositivoinformante','U',new.razon,new.razon,comun.A_TEXTO(old.espositivoinformante)||'->'||comun.a_texto(new.espositivoinformante),old.espositivoinformante,new.espositivoinformante);
            END IF;    
            IF new.espositivoformulario IS DISTINCT FROM old.espositivoformulario THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','razones','espositivoformulario','U',new.razon,new.razon,comun.A_TEXTO(old.espositivoformulario)||'->'||comun.a_texto(new.espositivoformulario),old.espositivoformulario,new.espositivoformulario);
            END IF;    
            IF new.escierredefinitivoinf IS DISTINCT FROM old.escierredefinitivoinf THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','razones','escierredefinitivoinf','U',new.razon,new.razon,comun.A_TEXTO(old.escierredefinitivoinf)||'->'||comun.a_texto(new.escierredefinitivoinf),old.escierredefinitivoinf,new.escierredefinitivoinf);
            END IF;    
            IF new.escierredefinitivofor IS DISTINCT FROM old.escierredefinitivofor THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','razones','escierredefinitivofor','U',new.razon,new.razon,comun.A_TEXTO(old.escierredefinitivofor)||'->'||comun.a_texto(new.escierredefinitivofor),old.escierredefinitivofor,new.escierredefinitivofor);
            END IF;    
            IF new.visibleparaencuestador IS DISTINCT FROM old.visibleparaencuestador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','razones','visibleparaencuestador','U',new.razon,new.razon,comun.A_TEXTO(old.visibleparaencuestador)||'->'||comun.a_texto(new.visibleparaencuestador),old.visibleparaencuestador,new.visibleparaencuestador);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','razones','razon','D',old.razon,old.razon,'D:'||comun.a_texto(old.razon),old.razon);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','razones','nombrerazon','D',old.razon,old.razon,'D:'||comun.a_texto(old.nombrerazon),old.nombrerazon);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','razones','espositivoinformante','D',old.razon,old.razon,'D:'||comun.a_texto(old.espositivoinformante),old.espositivoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','razones','espositivoformulario','D',old.razon,old.razon,'D:'||comun.a_texto(old.espositivoformulario),old.espositivoformulario);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','razones','escierredefinitivoinf','D',old.razon,old.razon,'D:'||comun.a_texto(old.escierredefinitivoinf),old.escierredefinitivoinf);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','razones','escierredefinitivofor','D',old.razon,old.razon,'D:'||comun.a_texto(old.escierredefinitivofor),old.escierredefinitivofor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','razones','visibleparaencuestador','D',old.razon,old.razon,'D:'||comun.a_texto(old.visibleparaencuestador),old.visibleparaencuestador);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_relatr_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_relatr_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_text)
                     VALUES ('cvp','relatr','periodo','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_text)
                     VALUES ('cvp','relatr','producto','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_number)
                     VALUES ('cvp','relatr','observacion','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.observacion),new.observacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_number)
                     VALUES ('cvp','relatr','informante','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.informante),new.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_number)
                     VALUES ('cvp','relatr','atributo','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.atributo),new.atributo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_text)
                     VALUES ('cvp','relatr','valor','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.valor),new.valor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_number)
                     VALUES ('cvp','relatr','visita','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.visita),new.visita);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_text)
                     VALUES ('cvp','relatr','modi_usu','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_datetime)
                     VALUES ('cvp','relatr','modi_fec','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_text)
                     VALUES ('cvp','relatr','modi_ope','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,new_bool)
                     VALUES ('cvp','relatr','validar_con_ValValAtr','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,'I:'||comun.a_texto(new.validar_con_ValValAtr),new.validar_con_ValValAtr);

      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text,new_text)
                     VALUES ('cvp','relatr','periodo','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text,new_text)
                     VALUES ('cvp','relatr','producto','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.observacion IS DISTINCT FROM old.observacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_number,new_number)
                     VALUES ('cvp','relatr','observacion','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.observacion)||'->'||comun.a_texto(new.observacion),old.observacion,new.observacion);
            END IF;    
            IF new.informante IS DISTINCT FROM old.informante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_number,new_number)
                     VALUES ('cvp','relatr','informante','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
            END IF;    
            IF new.atributo IS DISTINCT FROM old.atributo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_number,new_number)
                     VALUES ('cvp','relatr','atributo','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.atributo)||'->'||comun.a_texto(new.atributo),old.atributo,new.atributo);
            END IF;    
            IF new.valor IS DISTINCT FROM old.valor THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text,new_text)
                     VALUES ('cvp','relatr','valor','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.valor)||'->'||comun.a_texto(new.valor),old.valor,new.valor);
            END IF;    
            IF new.visita IS DISTINCT FROM old.visita THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_number,new_number)
                     VALUES ('cvp','relatr','visita','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.visita)||'->'||comun.a_texto(new.visita),old.visita,new.visita);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text,new_text)
                     VALUES ('cvp','relatr','modi_usu','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','relatr','modi_fec','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text,new_text)
                     VALUES ('cvp','relatr','modi_ope','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
            IF new.validar_con_ValValAtr IS DISTINCT FROM old.validar_con_ValValAtr THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_bool,new_bool)
                     VALUES ('cvp','relatr','validar_con_ValValAtr','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita||'|'||new.atributo,new.periodo,new.producto,new.observacion,new.informante,new.visita,new.atributo,comun.A_TEXTO(old.validar_con_ValValAtr)||'->'||comun.a_texto(new.validar_con_ValValAtr),old.validar_con_ValValAtr,new.validar_con_ValValAtr);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text)
                     VALUES ('cvp','relatr','periodo','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text)
                     VALUES ('cvp','relatr','producto','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_number)
                     VALUES ('cvp','relatr','observacion','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.observacion),old.observacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_number)
                     VALUES ('cvp','relatr','informante','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.informante),old.informante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_number)
                     VALUES ('cvp','relatr','atributo','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.atributo),old.atributo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text)
                     VALUES ('cvp','relatr','valor','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.valor),old.valor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_number)
                     VALUES ('cvp','relatr','visita','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.visita),old.visita);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text)
                     VALUES ('cvp','relatr','modi_usu','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_datetime)
                     VALUES ('cvp','relatr','modi_fec','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_text)
                     VALUES ('cvp','relatr','modi_ope','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,pk_number_6,change_value,old_bool)
                     VALUES ('cvp','relatr','validar_con_ValValAtr','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita||'|'||old.atributo,old.periodo,old.producto,old.observacion,old.informante,old.visita,old.atributo,'D:'||comun.a_texto(old.validar_con_ValValAtr),old.validar_con_ValValAtr);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_relenc_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_relenc_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
     v_operacion text:=substr(TG_OP,1,1);
   BEGIN
        
    IF v_operacion='I' THEN
        
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
             VALUES ('cvp','relenc','periodo','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
             'I:'|| comun.a_texto(new.periodo),new.periodo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_number)
             VALUES ('cvp','relenc','panel','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
             'I:'|| comun.a_texto(new.panel),new.panel);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_number)
             VALUES ('cvp','relenc','tarea','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
             'I:'|| comun.a_texto(new.tarea),new.tarea);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
             VALUES ('cvp','relenc','encuestador','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
             'I:'|| comun.a_texto(new.encuestador),new.encuestador);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
             VALUES ('cvp','relenc','modi_usu','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
             'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_datetime)
             VALUES ('cvp','relenc','modi_fec','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
             'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
             VALUES ('cvp','relenc','modi_ope','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
             'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
     END IF;

     IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','relenc','periodo','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
                     comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.panel IS DISTINCT FROM old.panel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','relenc','panel','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
                     comun.A_TEXTO(old.panel)||'->'||comun.a_texto(new.panel),old.panel,new.panel);
            END IF;
            IF new.tarea IS DISTINCT FROM old.tarea THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','relenc','tarea','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
                     comun.A_TEXTO(old.tarea)||'->'||comun.a_texto(new.tarea),old.tarea,new.tarea);
            END IF;
            IF new.encuestador IS DISTINCT FROM old.encuestador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','relenc','encuestador','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
                     comun.A_TEXTO(old.encuestador)||'->'||comun.a_texto(new.encuestador),old.encuestador,new.encuestador);
            END IF;
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','relenc','modi_usu','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
                     comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','relenc','modi_fec','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
                     comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','relenc','modi_ope','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,
                     comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;    
            
    END IF;
    IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3, change_value,old_text)
                     VALUES ('cvp','relenc','periodo','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number)
                     VALUES('cvp','relenc','panel','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.panel),old.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number)
                     VALUES('cvp','relenc','tarea','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.tarea),old.tarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES('cvp','relenc','encuestador','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.encuestador),old.encuestador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','relenc','modi_usu','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea, 'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_datetime)
                     VALUES('cvp','relenc','modi_fec','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea, 'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES('cvp','relenc','modi_ope','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea, 'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
    END IF;  
    IF v_operacion<>'D' THEN
        RETURN new;
      ELSE
        RETURN old;  
      END IF;
   END;
$$;


--
-- Name: hisc_relinf_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_relinf_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','RelInf','periodo','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||new.periodo,new.periodo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','RelInf','informante','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||comun.a_texto(new.informante),new.informante);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','RelInf','visita','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||comun.a_texto(new.visita),new.visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','RelInf','observaciones','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||comun.a_texto(new.observaciones),new.observaciones);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','RelInf','modi_usu','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_datetime)
             VALUES ('cvp','RelInf','modi_fec','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','RelInf','modi_ope','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','RelInf','panel','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||comun.a_texto(new.panel),new.panel);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','RelInf','tarea','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,'I:'||comun.a_texto(new.tarea),new.tarea);
      END IF;
      IF v_operacion='U' THEN          
        IF new.periodo IS DISTINCT FROM old.periodo THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','RelInf','periodo','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
        END IF;    
        IF new.informante IS DISTINCT FROM old.informante THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','RelInf','informante','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
        END IF;    
        IF new.visita IS DISTINCT FROM old.visita THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','RelInf','visita','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,comun.A_TEXTO(old.visita)||'->'||comun.a_texto(new.visita),old.visita,new.visita);
        END IF;    
        IF new.observaciones IS DISTINCT FROM old.observaciones THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','RelInf','observaciones','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,old.observaciones||'->'||new.observaciones,old.observaciones,new.observaciones);
        END IF;    
        IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','RelInf','modi_usu','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
        END IF;    
        IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_datetime,new_datetime)
                 VALUES ('cvp','RelInf','modi_fec','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
        END IF;    
        IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','RelInf','modi_ope','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
        END IF;
        IF new.panel IS DISTINCT FROM old.panel THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','RelInf','panel','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,comun.A_TEXTO(old.panel)||'->'||comun.a_texto(new.panel),old.panel,new.panel);
        END IF;    
        IF new.tarea IS DISTINCT FROM old.tarea THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','RelInf','tarea','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.panel||'|'||new.tarea,new.periodo,new.informante,new.visita,new.panel,new.tarea,comun.A_TEXTO(old.tarea)||'->'||comun.a_texto(new.tarea),old.tarea,new.tarea);
        END IF;    
      END IF;
      IF v_operacion='D' THEN        
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','RelInf','periodo','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||comun.a_texto(old.periodo),old.periodo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','RelInf','informante','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||comun.a_texto(old.informante),old.informante);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','RelInf','visita','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||comun.a_texto(old.visita),old.visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','RelInf','observaciones','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||old.observaciones,old.observaciones);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','RelInf','modi_usu','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_datetime)
             VALUES ('cvp','RelInf','modi_fec','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','RelInf','modi_ope','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','RelInf','panel','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||comun.a_texto(old.panel),old.panel);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','RelInf','tarea','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.panel||'|'||old.tarea,old.periodo,old.informante,old.visita,old.panel,old.tarea,'D:'||comun.a_texto(old.tarea),old.tarea);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_relmon_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_relmon_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','RelMon','periodo','I',new.periodo||'|'||new.moneda,new.periodo,new.moneda,'I:'||new.periodo,new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES ('cvp','RelMon','moneda','I',new.periodo||'|'||new.moneda,new.periodo,new.moneda,'I:'||new.moneda,new.moneda);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_number)
                     VALUES ('cvp','RelMon','valor_pesos','I',new.periodo||'|'||new.moneda,new.periodo,new.moneda,'I:'||comun.a_texto(new.valor_pesos),new.valor_pesos);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES('cvp','RelMon','modi_usu','I',new.periodo||'|'||new.moneda,new.periodo,new.moneda,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_datetime)
                     VALUES('cvp','RelMon','modi_fec','I',new.periodo||'|'||new.moneda,new.periodo,new.moneda,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,new_text)
                     VALUES('cvp','RelMon','modi_ope','I',new.periodo||'|'||new.moneda,new.periodo,new.moneda,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);     
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','RelMon','periodo','U',new.periodo||'|'||new.moneda,new.periodo,new.moneda,comun.A_TEXTO(old.periodo)||'->'||
                     comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.moneda IS DISTINCT FROM old.moneda THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','RelMon','moneda','U',new.periodo||'|'||new.moneda,new.periodo,new.moneda,comun.A_TEXTO(old.moneda)||'->'||
                     comun.a_texto(new.moneda),old.moneda,new.moneda);
            END IF;    
            IF new.valor_pesos IS DISTINCT FROM old.valor_pesos THEN
                 INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','RelMon','valor_pesos','U',new.periodo||'|'||new.moneda,new.periodo,new.moneda,comun.A_TEXTO(old.valor_pesos)||'->'||
                     comun.a_texto(new.valor_pesos),old.valor_pesos,new.valor_pesos);
            END IF;    
               
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                 INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','RelMon','modi_usu','U',new.periodo||'|'||new.moneda,new.periodo,new.moneda,comun.A_TEXTO(old.modi_usu)||'->'||
                     comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                  INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','RelMon','modi_fec','U',new.periodo||'|'||new.moneda,new.periodo,new.moneda,comun.A_TEXTO(old.modi_fec)||'->'||
                     comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                 INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text,new_text)
                     VALUES ('cvp','RelMon','modi_ope','U',new.periodo||'|'||new.moneda,new.periodo,new.moneda,comun.A_TEXTO(old.modi_ope)||'->'||
                     comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','RelMon','periodo','D',old.periodo||'|'||old.moneda,old.periodo,old.moneda,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','RelMon','moneda','D',old.periodo||'|'||old.moneda,old.periodo,old.moneda,'D:'||comun.a_texto(old.moneda),old.moneda);  
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_number)
                     VALUES ('cvp','RelMon','valor_pesos','D',old.periodo||'|'||old.moneda,old.periodo,old.moneda,'D:'||comun.a_texto(old.valor_pesos),
                     old.valor_pesos);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','RelMon','modi_usu','D',old.periodo||'|'||old.moneda,old.periodo,old.moneda,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_datetime)
                     VALUES ('cvp','RelMon','modi_fec','D',old.periodo||'|'||old.moneda,old.periodo,old.moneda,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,change_value,old_text)
                     VALUES ('cvp','RelMon','modi_ope','D',old.periodo||'|'||old.moneda,old.periodo,old.moneda,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);        
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_relpan_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_relpan_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','relpan','periodo','I',new.periodo||'|'||new.panel,new.periodo,new.panel,'I:'||comun.a_texto(new.periodo),new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_number)
                     VALUES ('cvp','relpan','panel','I',new.periodo||'|'||new.panel,new.periodo,new.panel,'I:'||comun.a_texto(new.panel),new.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','relpan','fechasalida','I',new.periodo||'|'||new.panel,new.periodo,new.panel,'I:'||comun.a_texto(new.fechasalida),new.fechasalida);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','relpan','fechageneracionpanel','I',new.periodo||'|'||new.panel,new.periodo,new.panel,'I:'||comun.a_texto(new.fechageneracionpanel),new.fechageneracionpanel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','relpan','modi_usu','I',new.periodo||'|'||new.panel,new.periodo,new.panel,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_datetime)
                     VALUES ('cvp','relpan','modi_fec','I',new.periodo||'|'||new.panel,new.periodo,new.panel,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','relpan','modi_ope','I',new.periodo||'|'||new.panel,new.periodo,new.panel,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,new_text)
                     VALUES ('cvp','relpan','periodoparapanelrotativo','I',new.periodo||'|'||new.panel,new.periodo,new.panel,'I:'||comun.a_texto(new.periodoparapanelrotativo),new.periodoparapanelrotativo);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','relpan','periodo','U',new.periodo||'|'||new.panel,new.periodo,new.panel,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.panel IS DISTINCT FROM old.panel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number,new_number)
                     VALUES ('cvp','relpan','panel','U',new.periodo||'|'||new.panel,new.periodo,new.panel,comun.A_TEXTO(old.panel)||'->'||comun.a_texto(new.panel),old.panel,new.panel);
            END IF;    
            IF new.fechasalida IS DISTINCT FROM old.fechasalida THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','relpan','fechasalida','U',new.periodo||'|'||new.panel,new.periodo,new.panel,comun.A_TEXTO(old.fechasalida)||'->'||comun.a_texto(new.fechasalida),old.fechasalida,new.fechasalida);
            END IF;    
            IF new.fechageneracionpanel IS DISTINCT FROM old.fechageneracionpanel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','relpan','fechageneracionpanel','U',new.periodo||'|'||new.panel,new.periodo,new.panel,comun.A_TEXTO(old.fechageneracionpanel)||'->'||comun.a_texto(new.fechageneracionpanel),old.fechageneracionpanel,new.fechageneracionpanel);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','relpan','modi_usu','U',new.periodo||'|'||new.panel,new.periodo,new.panel,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','relpan','modi_fec','U',new.periodo||'|'||new.panel,new.periodo,new.panel,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','relpan','modi_ope','U',new.periodo||'|'||new.panel,new.periodo,new.panel,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;    
            IF new.periodoparapanelrotativo IS DISTINCT FROM old.periodoparapanelrotativo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text,new_text)
                     VALUES ('cvp','relpan','periodoparapanelrotativo','U',new.periodo||'|'||new.panel,new.periodo,new.panel,comun.A_TEXTO(old.periodoparapanelrotativo)||'->'||comun.a_texto(new.periodoparapanelrotativo),old.periodoparapanelrotativo,new.periodoparapanelrotativo);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','relpan','periodo','D',old.periodo||'|'||old.panel,old.periodo,old.panel,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_number)
                     VALUES ('cvp','relpan','panel','D',old.periodo||'|'||old.panel,old.periodo,old.panel,'D:'||comun.a_texto(old.panel),old.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','relpan','fechasalida','D',old.periodo||'|'||old.panel,old.periodo,old.panel,'D:'||comun.a_texto(old.fechasalida),old.fechasalida);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','relpan','fechageneracionpanel','D',old.periodo||'|'||old.panel,old.periodo,old.panel,'D:'||comun.a_texto(old.fechageneracionpanel),old.fechageneracionpanel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','relpan','modi_usu','D',old.periodo||'|'||old.panel,old.periodo,old.panel,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_datetime)
                     VALUES ('cvp','relpan','modi_fec','D',old.periodo||'|'||old.panel,old.periodo,old.panel,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','relpan','modi_ope','D',old.periodo||'|'||old.panel,old.periodo,old.panel,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,change_value,old_text)
                     VALUES ('cvp','relpan','periodoparapanelrotativo','D',old.periodo||'|'||old.panel,old.periodo,old.panel,'D:'||comun.a_texto(old.periodoparapanelrotativo),old.periodoparapanelrotativo);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_relpre_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_relpre_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  DECLARE
    v_operacion text:=substr(TG_OP,1,1);
  BEGIN
    
  IF v_operacion='I' THEN
    
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','relpre','periodo','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.periodo),new.periodo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','relpre','producto','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.producto),new.producto);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','relpre','observacion','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.observacion),new.observacion);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','relpre','informante','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.informante),new.informante);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','relpre','formulario','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.formulario),new.formulario);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','relpre','precio','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.precio),new.precio);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','relpre','tipoprecio','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.tipoprecio),new.tipoprecio);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_number)
             VALUES ('cvp','relpre','visita','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.visita),new.visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','relpre','modi_usu','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_datetime)
             VALUES ('cvp','relpre','modi_fec','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','relpre','modi_ope','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','relpre','comentariosrelpre','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.comentariosrelpre),new.comentariosrelpre);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','relpre','cambio','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.cambio),new.cambio);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_bool)
             VALUES ('cvp','relpre','ultima_visita','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.ultima_visita),new.ultima_visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_text)
             VALUES ('cvp','relpre','observaciones','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.observaciones),new.observaciones);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,new_bool)
             VALUES ('cvp','relpre','esvisiblecomentarioendm','I',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,'I:'||comun.a_texto(new.esvisiblecomentarioendm),new.esvisiblecomentarioendm);
  END IF;
  IF v_operacion='U' THEN
            
        IF new.periodo IS DISTINCT FROM old.periodo THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','relpre','periodo','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
        END IF;    
        IF new.producto IS DISTINCT FROM old.producto THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','relpre','producto','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
        END IF;    
        IF new.observacion IS DISTINCT FROM old.observacion THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','relpre','observacion','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.observacion)||'->'||comun.a_texto(new.observacion),old.observacion,new.observacion);
        END IF;    
        IF new.informante IS DISTINCT FROM old.informante THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','relpre','informante','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
        END IF;    
        IF new.formulario IS DISTINCT FROM old.formulario THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','relpre','formulario','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.formulario)||'->'||comun.a_texto(new.formulario),old.formulario,new.formulario);
        END IF;    
        IF new.precio IS DISTINCT FROM old.precio THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','relpre','precio','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.precio)||'->'||comun.a_texto(new.precio),old.precio,new.precio);
        END IF;    
        IF new.tipoprecio IS DISTINCT FROM old.tipoprecio THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','relpre','tipoprecio','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.tipoprecio)||'->'||comun.a_texto(new.tipoprecio),old.tipoprecio,new.tipoprecio);
        END IF;    
        IF new.visita IS DISTINCT FROM old.visita THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number,new_number)
                 VALUES ('cvp','relpre','visita','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.visita)||'->'||comun.a_texto(new.visita),old.visita,new.visita);
        END IF;    
        IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','relpre','modi_usu','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
        END IF;    
        IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_datetime,new_datetime)
                 VALUES ('cvp','relpre','modi_fec','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
        END IF;    
        IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','relpre','modi_ope','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
        END IF;    
        IF new.comentariosrelpre IS DISTINCT FROM old.comentariosrelpre THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','relpre','comentariosrelpre','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.comentariosrelpre)||'->'||comun.a_texto(new.comentariosrelpre),old.comentariosrelpre,new.comentariosrelpre);
        END IF;    
        IF new.cambio IS DISTINCT FROM old.cambio THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','relpre','cambio','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.cambio)||'->'||comun.a_texto(new.cambio),old.cambio,new.cambio);
        END IF;
        IF new.ultima_visita IS DISTINCT FROM old.ultima_visita THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_bool,new_bool)
                 VALUES ('cvp','relpre','ultima_visita','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.ultima_visita)||'->'||comun.a_texto(new.ultima_visita),old.ultima_visita,new.ultima_visita);
        END IF;
        IF new.observaciones IS DISTINCT FROM old.observaciones THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text,new_text)
                 VALUES ('cvp','relpre','observaciones','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.observaciones)||'->'||comun.a_texto(new.observaciones),old.observaciones,new.observaciones);
        END IF;    
        IF new.esvisiblecomentarioendm IS DISTINCT FROM old.esvisiblecomentarioendm THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_bool,new_bool)
                 VALUES ('cvp','relpre','esvisiblecomentarioendm','U',new.periodo||'|'||new.producto||'|'||new.observacion||'|'||new.informante||'|'||new.visita,new.periodo,new.producto,new.observacion,new.informante,new.visita,comun.A_TEXTO(old.esvisiblecomentarioendm)||'->'||comun.a_texto(new.esvisiblecomentarioendm),old.esvisiblecomentarioendm,new.esvisiblecomentarioendm);
        END IF;
  END IF;
  IF v_operacion='D' THEN
        
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','relpre','periodo','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.periodo),old.periodo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','relpre','producto','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.producto),old.producto);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number)
             VALUES ('cvp','relpre','observacion','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.observacion),old.observacion);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number)
             VALUES ('cvp','relpre','informante','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.informante),old.informante);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number)
             VALUES ('cvp','relpre','formulario','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.formulario),old.formulario);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number)
             VALUES ('cvp','relpre','precio','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.precio),old.precio);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','relpre','tipoprecio','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.tipoprecio),old.tipoprecio);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_number)
             VALUES ('cvp','relpre','visita','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.visita),old.visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','relpre','modi_usu','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_datetime)
             VALUES ('cvp','relpre','modi_fec','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','relpre','modi_ope','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','relpre','comentariosrelpre','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.comentariosrelpre),old.comentariosrelpre);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','relpre','cambio','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.cambio),old.cambio);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_bool)
             VALUES ('cvp','relpre','ultima_visita','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.ultima_visita),old.ultima_visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_text)
             VALUES ('cvp','relpre','observaciones','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.observaciones),old.observaciones);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_text_2,pk_number_3,pk_number_4,pk_number_5,change_value,old_bool)
             VALUES ('cvp','relpre','esvisiblecomentarioendm','D',old.periodo||'|'||old.producto||'|'||old.observacion||'|'||old.informante||'|'||old.visita,old.periodo,old.producto,old.observacion,old.informante,old.visita,'D:'||comun.a_texto(old.esvisiblecomentarioendm),old.esvisiblecomentarioendm);
  END IF;
      
  IF v_operacion<>'D' THEN
      RETURN new;
  ELSE
      RETURN old;  
  END IF;
  END;
$$;


--
-- Name: hisc_relsup_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_relsup_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
   DECLARE
     v_operacion text:=substr(TG_OP,1,1);
   BEGIN
        
    IF v_operacion='I' THEN
        
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3, change_value,new_text)
             VALUES ('cvp','relsup','periodo','I',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel, new.supervisor,
             'I:'|| comun.a_texto(new.periodo),new.periodo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3, change_value,new_number)
             VALUES ('cvp','relsup','panel','I',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel, new.supervisor,
             'I:'|| comun.a_texto(new.panel),new.panel);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3, change_value,new_text)
             VALUES ('cvp','relsup','supervisor','I',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel, new.supervisor,
             'I:'|| comun.a_texto(new.supervisor),new.supervisor);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3, change_value,new_text)
             VALUES ('cvp','relsup','disponible','I',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel, new.supervisor,
             'I:'||comun.a_texto(new.disponible),new.disponible);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3, change_value,new_text)
             VALUES ('cvp','relsup','motivonodisponible','I',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel, new.supervisor,
             'I:'||comun.a_texto(new.motivonodisponible),new.motivonodisponible);     
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
             VALUES ('cvp','relsup','modi_usu','I',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor,
             'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_datetime)
             VALUES ('cvp','relsup','modi_fec','I',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel, new.supervisor,
             'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
             VALUES ('cvp','relsup','modi_ope','I',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor,
             'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
     END IF;

     IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','relsup','periodo','U',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor,
                     comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.panel IS DISTINCT FROM old.panel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','relsup','panel','U',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor, comun.A_TEXTO(old.panel)||'->'||comun.a_texto(new.panel),old.panel,new.panel);
            END IF;
            IF new.supervisor IS DISTINCT FROM old.supervisor THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','relsup','supervisor','U',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor,
                     comun.A_TEXTO(old.supervisor)||'->'||comun.a_texto(new.supervisor),old.supervisor,new.supervisor);
            END IF;
            IF new.disponible IS DISTINCT FROM old.disponible THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','relsup','disponible','U',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor,
                     comun.A_TEXTO(old.disponible)||'->'||comun.a_texto(new.disponible),old.disponible,new.disponible);
            END IF;  
            IF new.motivonodisponible IS DISTINCT FROM old.motivonodisponible THEN
                 INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','relsup','motivonodisponible','U',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor,
                     comun.A_TEXTO(old.motivonodisponible)||'->'||comun.a_texto(new.motivonodisponible),old.motivonodisponible,new.motivonodisponible);         
            END IF; 
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','relsup','modi_usu','U',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor,
                     comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','relsup','modi_fec','U',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel,new.supervisor,
                     comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','relsup','modi_ope','U',new.periodo||'|'||new.panel||'|'||new.supervisor,new.periodo,new.panel, new.supervisor, comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;    
            
    END IF;
    IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_text)
                     VALUES ('cvp','relsup','periodo','D',old.periodo||'|'||old.panel||'|'||old.supervisor,old.periodo,old.panel, old.supervisor, 'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_number)
                     VALUES('cvp','relsup','panel','D',old.periodo||'|'||old.panel||'|'||old.supervisor,old.periodo,old.panel,old.supervisor,
                     'D:'||comun.a_texto(old.panel),old.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_text)
                     VALUES('cvp','relsup','supervisor','D',old.periodo||'|'||old.panel||'|'||old.supervisor,old.periodo,old.panel, old.supervisor,
                     'D:'||comun.a_texto(old.supervisor),old.supervisor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_text)
                     VALUES('cvp','relsup','disponible','D',old.periodo||'|'||old.panel||'|'||old.supervisor,old.periodo,old.panel, old.supervisor,
                     'D:'||comun.a_texto(old.disponible),old.disponible);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_text)
                     VALUES('cvp','relsup','motivonodisponible','D',old.periodo||'|'||old.panel||'|'||old.supervisor,old.periodo,old.panel, old.supervisor,
                     'D:'||comun.a_texto(old.motivonodisponible),old.motivonodisponible);     
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_text)
                     VALUES ('cvp','relsup','modi_usu','D',old.periodo||'|'||old.panel||'|'||old.supervisor,old.periodo,old.panel, old.supervisor, 'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2, pk_text_3,change_value,old_datetime)
                     VALUES('cvp','relsup','modi_fec','D',old.periodo||'|'||old.panel||'|'||old.supervisor,old.periodo,old.panel, old.supervisor, 'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES('cvp','relsup','modi_ope','D',old.periodo||'|'||old.panel||'|'||old.supervisor,old.periodo,old.panel,old.supervisor,
                     'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
    END IF;  
    IF v_operacion<>'D' THEN
        RETURN new;
      ELSE
        RETURN old;  
      END IF;
   END;
$$;


--
-- Name: hisc_reltar_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_reltar_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','periodo','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||new.periodo,new.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','RelTar','panel','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.panel),new.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','RelTar','tarea','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.tarea),new.tarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','supervisor','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.supervisor),new.supervisor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','encuestador','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.encuestador),new.encuestador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','realizada','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.realizada),new.realizada);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','resultado','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.resultado),new.resultado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','observaciones','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.observaciones),new.observaciones);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','RelTar','puntos','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.puntos),new.puntos);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','modi_usu','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_datetime)
                     VALUES ('cvp','RelTar','modi_fec','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','modi_ope','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_datetime)
                     VALUES ('cvp','RelTar','cargado','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.cargado),new.cargado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_datetime)
                     VALUES ('cvp','RelTar','vencimiento_sincronizacion','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.vencimiento_sincronizacion),new.vencimiento_sincronizacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_datetime)
                     VALUES ('cvp','RelTar','descargado','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.descargado),new.descargado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','RelTar','id_instalacion','I',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,'I:'||comun.a_texto(new.id_instalacion),new.id_instalacion);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.periodo IS DISTINCT FROM old.periodo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','periodo','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
            END IF;    
            IF new.panel IS DISTINCT FROM old.panel THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','RelTar','panel','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.panel)||'->'||comun.a_texto(new.panel),old.panel,new.panel);
            END IF;    
            IF new.tarea IS DISTINCT FROM old.tarea THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','RelTar','tarea','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.tarea)||'->'||comun.a_texto(new.tarea),old.tarea,new.tarea);
            END IF;    
            IF new.supervisor IS DISTINCT FROM old.supervisor THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','supervisor','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.supervisor)||'->'||comun.a_texto(new.supervisor),old.supervisor,new.supervisor);
            END IF;    
            IF new.encuestador IS DISTINCT FROM old.encuestador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','encuestador','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.encuestador)||'->'||comun.a_texto(new.encuestador),old.encuestador,new.encuestador);
            END IF;    
            
            IF new.realizada IS DISTINCT FROM old.realizada THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','realizada','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.realizada)||'->'||comun.a_texto(new.realizada),old.realizada,new.realizada);
            END IF;    
            IF new.resultado IS DISTINCT FROM old.resultado THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','resultado','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,old.resultado||'->'||new.resultado
                     ,old.resultado,new.resultado);
            END IF;    
            IF new.observaciones IS DISTINCT FROM old.observaciones THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','observaciones','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,old.observaciones||'->'||new.observaciones,old.observaciones,new.observaciones);
            END IF;    
            IF new.puntos IS DISTINCT FROM old.puntos THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','RelTar','puntos','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.puntos)||'->'||comun.a_texto(new.puntos),old.puntos,new.puntos);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','modi_usu','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','RelTar','modi_fec','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','modi_ope','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
            IF new.cargado IS DISTINCT FROM old.cargado THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','RelTar','cargado','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.cargado)||'->'||comun.a_texto(new.cargado),old.cargado,new.cargado);
            END IF;    
            IF new.vencimiento_sincronizacion IS DISTINCT FROM old.vencimiento_sincronizacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','RelTar','vencimiento_sincronizacion','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.vencimiento_sincronizacion)||'->'||comun.a_texto(new.vencimiento_sincronizacion),old.vencimiento_sincronizacion,new.vencimiento_sincronizacion);
            END IF;    
            IF new.descargado IS DISTINCT FROM old.descargado THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','RelTar','descargado','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,comun.A_TEXTO(old.descargado)||'->'||comun.a_texto(new.descargado),old.descargado,new.descargado);
            END IF;    
            IF new.id_instalacion IS DISTINCT FROM old.id_instalacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','RelTar','id_instalacion','U',new.periodo||'|'||new.panel||'|'||new.tarea,new.periodo,new.panel,new.tarea,old.id_instalacion||'->'||new.id_instalacion,old.id_instalacion,new.id_instalacion);
            END IF;    
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','periodo','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.periodo),old.periodo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','RelTar','panel','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.panel),old.panel);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','RelTar','tarea','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.tarea),old.tarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','supervisor','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.supervisor),old.supervisor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','encuestador','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.encuestador),old.encuestador);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','realizada','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||old.realizada,old.realizada);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','resultado','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.resultado),old.resultado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','observaciones','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||old.observaciones,old.observaciones);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','puntos','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||old.puntos,old.puntos);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','modi_usu','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime)
                     VALUES ('cvp','RelTar','modi_fec','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','modi_ope','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime)
                     VALUES ('cvp','RelTar','cargado','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.cargado),old.cargado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime)
                     VALUES ('cvp','RelTar','vencimiento_sincronizacion','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.vencimiento_sincronizacion),old.vencimiento_sincronizacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_datetime)
                     VALUES ('cvp','RelTar','descargado','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||comun.a_texto(old.descargado),old.descargado);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','RelTar','id_instalacion','D',old.periodo||'|'||old.panel||'|'||old.tarea,old.periodo,old.panel,old.tarea,'D:'||old.id_instalacion,old.id_instalacion);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_relvis_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_relvis_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  DECLARE
    v_operacion text:=substr(TG_OP,1,1);
  BEGIN
    
  IF v_operacion='I' THEN
    
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','periodo','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.periodo),new.periodo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_number)
             VALUES ('cvp','relvis','informante','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.informante),new.informante);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_number)
             VALUES ('cvp','relvis','formulario','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.formulario),new.formulario);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_number)
             VALUES ('cvp','relvis','panel','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.panel),new.panel);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_number)
             VALUES ('cvp','relvis','tarea','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.tarea),new.tarea);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_datetime)
             VALUES ('cvp','relvis','fechasalida','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.fechasalida),new.fechasalida);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_datetime)
             VALUES ('cvp','relvis','fechaingreso','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.fechaingreso),new.fechaingreso);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','ingresador','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.ingresador),new.ingresador);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_number)
             VALUES ('cvp','relvis','razon','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.razon),new.razon);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_datetime)
             VALUES ('cvp','relvis','fechageneracion','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.fechageneracion),new.fechageneracion);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_number)
             VALUES ('cvp','relvis','visita','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.visita),new.visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_number)
             VALUES ('cvp','relvis','ultimavisita','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.ultimavisita),new.ultimavisita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','modi_usu','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_datetime)
             VALUES ('cvp','relvis','modi_fec','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','modi_ope','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','comentarios','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.comentarios),new.comentarios);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','encuestador','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.encuestador),new.encuestador);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','supervisor','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.supervisor),new.supervisor);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','recepcionista','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.recepcionista),new.recepcionista);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_number)
             VALUES ('cvp','relvis','informantereemplazante','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.informantereemplazante),new.informantereemplazante);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_bool)
             VALUES ('cvp','relvis','ultima_visita','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.ultima_visita),new.ultima_visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,new_text)
             VALUES ('cvp','relvis','verificado_rec','I',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,'I:'||comun.a_texto(new.verificado_rec),new.verificado_rec);
  END IF;
  IF v_operacion='U' THEN
        
        IF new.periodo IS DISTINCT FROM old.periodo THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','periodo','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.periodo)||'->'||comun.a_texto(new.periodo),old.periodo,new.periodo);
        END IF;    
        IF new.informante IS DISTINCT FROM old.informante THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number,new_number)
                 VALUES ('cvp','relvis','informante','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.informante)||'->'||comun.a_texto(new.informante),old.informante,new.informante);
        END IF;    
        IF new.formulario IS DISTINCT FROM old.formulario THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number,new_number)
                 VALUES ('cvp','relvis','formulario','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.formulario)||'->'||comun.a_texto(new.formulario),old.formulario,new.formulario);
        END IF;    
        IF new.panel IS DISTINCT FROM old.panel THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number,new_number)
                 VALUES ('cvp','relvis','panel','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.panel)||'->'||comun.a_texto(new.panel),old.panel,new.panel);
        END IF;    
        IF new.tarea IS DISTINCT FROM old.tarea THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number,new_number)
                 VALUES ('cvp','relvis','tarea','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.tarea)||'->'||comun.a_texto(new.tarea),old.tarea,new.tarea);
        END IF;    
        IF new.fechasalida IS DISTINCT FROM old.fechasalida THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_datetime,new_datetime)
                 VALUES ('cvp','relvis','fechasalida','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.fechasalida)||'->'||comun.a_texto(new.fechasalida),old.fechasalida,new.fechasalida);
        END IF;    
        IF new.fechaingreso IS DISTINCT FROM old.fechaingreso THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_datetime,new_datetime)
                 VALUES ('cvp','relvis','fechaingreso','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.fechaingreso)||'->'||comun.a_texto(new.fechaingreso),old.fechaingreso,new.fechaingreso);
        END IF;    
        IF new.ingresador IS DISTINCT FROM old.ingresador THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','ingresador','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.ingresador)||'->'||comun.a_texto(new.ingresador),old.ingresador,new.ingresador);
        END IF;    
        IF new.razon IS DISTINCT FROM old.razon THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number,new_number)
                 VALUES ('cvp','relvis','razon','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.razon)||'->'||comun.a_texto(new.razon),old.razon,new.razon);
        END IF;    
        IF new.fechageneracion IS DISTINCT FROM old.fechageneracion THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_datetime,new_datetime)
                 VALUES ('cvp','relvis','fechageneracion','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.fechageneracion)||'->'||comun.a_texto(new.fechageneracion),old.fechageneracion,new.fechageneracion);
        END IF;    
        IF new.visita IS DISTINCT FROM old.visita THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number,new_number)
                 VALUES ('cvp','relvis','visita','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.visita)||'->'||comun.a_texto(new.visita),old.visita,new.visita);
        END IF;    
        IF new.ultimavisita IS DISTINCT FROM old.ultimavisita THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number,new_number)
                 VALUES ('cvp','relvis','ultimavisita','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.ultimavisita)||'->'||comun.a_texto(new.ultimavisita),old.ultimavisita,new.ultimavisita);
        END IF;    
        IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','modi_usu','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
        END IF;    
        IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_datetime,new_datetime)
                 VALUES ('cvp','relvis','modi_fec','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
        END IF;    
        IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','modi_ope','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
        END IF;    
        IF new.comentarios IS DISTINCT FROM old.comentarios THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','comentarios','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.comentarios)||'->'||comun.a_texto(new.comentarios),old.comentarios,new.comentarios);
        END IF;    
        IF new.encuestador IS DISTINCT FROM old.encuestador THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','encuestador','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.encuestador)||'->'||comun.a_texto(new.encuestador),old.encuestador,new.encuestador);
        END IF;    
        IF new.supervisor IS DISTINCT FROM old.supervisor THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','supervisor','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.supervisor)||'->'||comun.a_texto(new.supervisor),old.supervisor,new.supervisor);
        END IF;    
        IF new.recepcionista IS DISTINCT FROM old.recepcionista THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','recepcionista','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.recepcionista)||'->'||comun.a_texto(new.recepcionista),old.recepcionista,new.recepcionista);
        END IF;    
        IF new.informantereemplazante IS DISTINCT FROM old.informantereemplazante THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number,new_number)
                 VALUES ('cvp','relvis','informantereemplazante','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.informantereemplazante)||'->'||comun.a_texto(new.informantereemplazante),old.informantereemplazante,new.informantereemplazante);
        END IF;
        IF new.ultima_visita IS DISTINCT FROM old.ultima_visita THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_bool,new_bool)
                 VALUES ('cvp','relvis','ultima_visita','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.ultima_visita)||'->'||comun.a_texto(new.ultima_visita),old.ultima_visita,new.ultima_visita);
        END IF;
        IF new.verificado_rec IS DISTINCT FROM old.verificado_rec THEN
            INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text,new_text)
                 VALUES ('cvp','relvis','verificado_rec','U',new.periodo||'|'||new.informante||'|'||new.visita||'|'||new.formulario,new.periodo,new.informante,new.visita,new.formulario,comun.A_TEXTO(old.verificado_rec)||'->'||comun.a_texto(new.verificado_rec),old.verificado_rec,new.verificado_rec);
        END IF;    
  END IF;
  IF v_operacion='D' THEN
    
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','periodo','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.periodo),old.periodo);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number)
             VALUES ('cvp','relvis','informante','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.informante),old.informante);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number)
             VALUES ('cvp','relvis','formulario','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.formulario),old.formulario);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number)
             VALUES ('cvp','relvis','panel','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.panel),old.panel);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number)
             VALUES ('cvp','relvis','tarea','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.tarea),old.tarea);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_datetime)
             VALUES ('cvp','relvis','fechasalida','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.fechasalida),old.fechasalida);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_datetime)
             VALUES ('cvp','relvis','fechaingreso','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.fechaingreso),old.fechaingreso);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','ingresador','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.ingresador),old.ingresador);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number)
             VALUES ('cvp','relvis','razon','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.razon),old.razon);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_datetime)
             VALUES ('cvp','relvis','fechageneracion','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.fechageneracion),old.fechageneracion);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number)
             VALUES ('cvp','relvis','visita','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.visita),old.visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number)
             VALUES ('cvp','relvis','ultimavisita','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.ultimavisita),old.ultimavisita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','modi_usu','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_datetime)
             VALUES ('cvp','relvis','modi_fec','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','modi_ope','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','comentarios','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.comentarios),old.comentarios);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','encuestador','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.encuestador),old.encuestador);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','supervisor','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.supervisor),old.supervisor);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','recepcionista','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.recepcionista),old.recepcionista);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_number)
             VALUES ('cvp','relvis','informantereemplazante','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.informantereemplazante),old.informantereemplazante);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_bool)
             VALUES ('cvp','relvis','ultima_visita','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.ultima_visita),old.ultima_visita);
        INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,pk_number_4,change_value,old_text)
             VALUES ('cvp','relvis','verificado_rec','D',old.periodo||'|'||old.informante||'|'||old.visita||'|'||old.formulario,old.periodo,old.informante,old.visita,old.formulario,'D:'||comun.a_texto(old.verificado_rec),old.verificado_rec);

  END IF;
  
  IF v_operacion<>'D' THEN
      RETURN new;
  ELSE
      RETURN old;  
  END IF;
  END;
$$;


--
-- Name: hisc_rubros_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_rubros_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','rubros','rubro','I',new.rubro,new.rubro,'I:'||comun.a_texto(new.rubro),new.rubro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','rubros','nombrerubro','I',new.rubro,new.rubro,'I:'||comun.a_texto(new.nombrerubro),new.nombrerubro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','rubros','tipoinformante','I',new.rubro,new.rubro,'I:'||comun.a_texto(new.tipoinformante),new.tipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','rubros','despacho','I',new.rubro,new.rubro,'I:'||comun.a_texto(new.despacho),new.despacho);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','rubros','grupozonal','I',new.rubro,new.rubro,'I:'||comun.a_texto(new.grupozonal),new.grupozonal);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.rubro IS DISTINCT FROM old.rubro THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','rubros','rubro','U',new.rubro,new.rubro,comun.A_TEXTO(old.rubro)||'->'||comun.a_texto(new.rubro),old.rubro,new.rubro);
            END IF;    
            IF new.nombrerubro IS DISTINCT FROM old.nombrerubro THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','rubros','nombrerubro','U',new.rubro,new.rubro,comun.A_TEXTO(old.nombrerubro)||'->'||comun.a_texto(new.nombrerubro),old.nombrerubro,new.nombrerubro);
            END IF;    
            IF new.tipoinformante IS DISTINCT FROM old.tipoinformante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','rubros','tipoinformante','U',new.rubro,new.rubro,comun.A_TEXTO(old.tipoinformante)||'->'||comun.a_texto(new.tipoinformante),old.tipoinformante,new.tipoinformante);
            END IF;    
            IF new.despacho IS DISTINCT FROM old.despacho THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','rubros','despacho','U',new.rubro,new.rubro,comun.A_TEXTO(old.despacho)||'->'||comun.a_texto(new.despacho),old.despacho,new.despacho);
            END IF;    
            IF new.grupozonal IS DISTINCT FROM old.grupozonal THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','rubros','grupozonal','U',new.rubro,new.rubro,comun.A_TEXTO(old.grupozonal)||'->'||comun.a_texto(new.grupozonal),old.grupozonal,new.grupozonal);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','rubros','rubro','D',old.rubro,old.rubro,'D:'||comun.a_texto(old.rubro),old.rubro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','rubros','nombrerubro','D',old.rubro,old.rubro,'D:'||comun.a_texto(old.nombrerubro),old.nombrerubro);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','rubros','tipoinformante','D',old.rubro,old.rubro,'D:'||comun.a_texto(old.tipoinformante),old.tipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','rubros','despacho','D',old.rubro,old.rubro,'D:'||comun.a_texto(old.despacho),old.despacho);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','rubros','grupozonal','D',old.rubro,old.rubro,'D:'||comun.a_texto(old.grupozonal),old.grupozonal);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_tareas_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_tareas_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_number)
                     VALUES ('cvp','tareas','tarea','I',new.tarea,new.tarea,'I:'||comun.a_texto(new.tarea),new.tarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,new_text)
                     VALUES ('cvp','tareas','encuestador','I',new.tarea,new.tarea,'I:'||comun.a_texto(new.encuestador),new.encuestador);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.tarea IS DISTINCT FROM old.tarea THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number,new_number)
                     VALUES ('cvp','tareas','tarea','U',new.tarea,new.tarea,comun.A_TEXTO(old.tarea)||'->'||comun.a_texto(new.tarea),old.tarea,new.tarea);
            END IF;    
            IF new.encuestador IS DISTINCT FROM old.encuestador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text,new_text)
                     VALUES ('cvp','tareas','encuestador','U',new.tarea,new.tarea,comun.A_TEXTO(old.encuestador)||'->'||comun.a_texto(new.encuestador),old.encuestador,new.encuestador);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_number)
                     VALUES ('cvp','tareas','tarea','D',old.tarea,old.tarea,'D:'||comun.a_texto(old.tarea),old.tarea);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_number_1,change_value,old_text)
                     VALUES ('cvp','tareas','encuestador','D',old.tarea,old.tarea,'D:'||comun.a_texto(old.encuestador),old.encuestador);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_tipoinf_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_tipoinf_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','tipoinf','tipoinformante','I',new.tipoinformante,new.tipoinformante,'I:'||comun.a_texto(new.tipoinformante),new.tipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','tipoinf','otrotipoinformante','I',new.tipoinformante,new.tipoinformante,'I:'||comun.a_texto(new.otrotipoinformante),new.otrotipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','tipoinf','nombretipoinformante','I',new.tipoinformante,new.tipoinformante,'I:'||comun.a_texto(new.nombretipoinformante),new.nombretipoinformante);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.tipoinformante IS DISTINCT FROM old.tipoinformante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','tipoinf','tipoinformante','U',new.tipoinformante,new.tipoinformante,comun.A_TEXTO(old.tipoinformante)||'->'||comun.a_texto(new.tipoinformante),old.tipoinformante,new.tipoinformante);
            END IF;    
            IF new.otrotipoinformante IS DISTINCT FROM old.otrotipoinformante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','tipoinf','otrotipoinformante','U',new.tipoinformante,new.tipoinformante,comun.A_TEXTO(old.otrotipoinformante)||'->'||comun.a_texto(new.otrotipoinformante),old.otrotipoinformante,new.otrotipoinformante);
            END IF;    
            IF new.nombretipoinformante IS DISTINCT FROM old.nombretipoinformante THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','tipoinf','nombretipoinformante','U',new.tipoinformante,new.tipoinformante,comun.A_TEXTO(old.nombretipoinformante)||'->'||comun.a_texto(new.nombretipoinformante),old.nombretipoinformante,new.nombretipoinformante);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','tipoinf','tipoinformante','D',old.tipoinformante,old.tipoinformante,'D:'||comun.a_texto(old.tipoinformante),old.tipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','tipoinf','otrotipoinformante','D',old.tipoinformante,old.tipoinformante,'D:'||comun.a_texto(old.otrotipoinformante),old.otrotipoinformante);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','tipoinf','nombretipoinformante','D',old.tipoinformante,old.tipoinformante,'D:'||comun.a_texto(old.nombretipoinformante),old.nombretipoinformante);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_tipopre_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_tipopre_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','tipopre','tipoprecio','I',new.tipoprecio,new.tipoprecio,'I:'||comun.a_texto(new.tipoprecio),new.tipoprecio);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','tipopre','nombretipoprecio','I',new.tipoprecio,new.tipoprecio,'I:'||comun.a_texto(new.nombretipoprecio),new.nombretipoprecio);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','tipopre','espositivo','I',new.tipoprecio,new.tipoprecio,'I:'||comun.a_texto(new.espositivo),new.espositivo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,new_text)
                     VALUES ('cvp','tipopre','visibleparaencuestador','I',new.tipoprecio,new.tipoprecio,'I:'||comun.a_texto(new.visibleparaencuestador),new.visibleparaencuestador);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.tipoprecio IS DISTINCT FROM old.tipoprecio THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','tipopre','tipoprecio','U',new.tipoprecio,new.tipoprecio,comun.A_TEXTO(old.tipoprecio)||'->'||comun.a_texto(new.tipoprecio),old.tipoprecio,new.tipoprecio);
            END IF;    
            IF new.nombretipoprecio IS DISTINCT FROM old.nombretipoprecio THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','tipopre','nombretipoprecio','U',new.tipoprecio,new.tipoprecio,comun.A_TEXTO(old.nombretipoprecio)||'->'||comun.a_texto(new.nombretipoprecio),old.nombretipoprecio,new.nombretipoprecio);
            END IF;    
            IF new.espositivo IS DISTINCT FROM old.espositivo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','tipopre','espositivo','U',new.tipoprecio,new.tipoprecio,comun.A_TEXTO(old.espositivo)||'->'||comun.a_texto(new.espositivo),old.espositivo,new.espositivo);
            END IF;    
            IF new.visibleparaencuestador IS DISTINCT FROM old.visibleparaencuestador THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text,new_text)
                     VALUES ('cvp','tipopre','visibleparaencuestador','U',new.tipoprecio,new.tipoprecio,comun.A_TEXTO(old.visibleparaencuestador)||'->'||comun.a_texto(new.visibleparaencuestador),old.visibleparaencuestador,new.visibleparaencuestador);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','tipopre','tipoprecio','D',old.tipoprecio,old.tipoprecio,'D:'||comun.a_texto(old.tipoprecio),old.tipoprecio);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','tipopre','nombretipoprecio','D',old.tipoprecio,old.tipoprecio,'D:'||comun.a_texto(old.nombretipoprecio),old.nombretipoprecio);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','tipopre','espositivo','D',old.tipoprecio,old.tipoprecio,'D:'||comun.a_texto(old.espositivo),old.espositivo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,change_value,old_text)
                     VALUES ('cvp','tipopre','visibleparaencuestador','D',old.tipoprecio,old.tipoprecio,'D:'||comun.a_texto(old.visibleparaencuestador),old.visibleparaencuestador);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_valvalatr_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_valvalatr_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','ValValAtr','producto','I',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,'I:'||comun.a_texto(new.producto),new.producto);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','ValValAtr','atributo','I',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,'I:'||comun.a_texto(new.atributo),new.atributo);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_text)
                     VALUES ('cvp','ValValAtr','valor','I',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,'I:'||comun.a_texto(new.valor),new.valor);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_bool)
                     VALUES ('cvp','ValValAtr','validar','I',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,'I:'||comun.a_texto(new.validar),new.validar);

                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,new_number)
                     VALUES ('cvp','ValValAtr','ponderadorAtr','I',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,'I:'||comun.a_texto(new.ponderadorAtr),new.ponderadorAtr);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','ValValAtr','producto','U',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.atributo IS DISTINCT FROM old.atributo THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','ValValAtr','atributo','U',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,comun.A_TEXTO(old.atributo)||'->'||comun.a_texto(new.atributo),old.atributo,new.atributo);
            END IF;    
            IF new.valor IS DISTINCT FROM old.valor THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text,new_text)
                     VALUES ('cvp','ValValAtr','valor','U',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,comun.A_TEXTO(old.valor)||'->'||comun.a_texto(new.valor),old.valor,new.valor);
            END IF;    
            IF new.validar IS DISTINCT FROM old.validar THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_bool,new_bool)
                     VALUES ('cvp','ValValAtr','validar','U',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,comun.A_TEXTO(old.validar)||'->'||comun.a_texto(new.validar),old.validar,new.validar);
            END IF;    
            IF new.ponderadorAtr IS DISTINCT FROM old.ponderadorAtr THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number,new_number)
                     VALUES ('cvp','ValValAtr','ponderadorAtr','U',new.producto||'|'||new.atributo||'|'||new.valor,new.producto,new.atributo,new.valor,comun.A_TEXTO(old.ponderadorAtr)||'->'||comun.a_texto(new.ponderadorAtr),old.ponderadorAtr,new.ponderadorAtr);
            END IF;    
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','ValValAtr','producto','D',old.producto||'|'||old.atributo||'|'||old.valor,old.producto,old.atributo,old.valor,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','ValValAtr','atributo','D',old.producto||'|'||old.atributo||'|'||old.valor,old.producto,old.atributo,old.valor,'D:'||comun.a_texto(old.atributo),old.atributo);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_text)
                     VALUES ('cvp','ValValAtr','valor','D',old.producto||'|'||old.atributo||'|'||old.valor,old.producto,old.atributo,old.valor,'D:'||comun.a_texto(old.valor),old.valor);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_bool)
                     VALUES ('cvp','ValValAtr','validar','D',old.producto||'|'||old.atributo||'|'||old.valor,old.producto,old.atributo,old.valor,'D:'||comun.a_texto(old.validar),old.validar);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_text_3,change_value,old_number)
                     VALUES ('cvp','ValValAtr','ponderadorAtr','D',old.producto||'|'||old.atributo||'|'||old.valor,old.producto,old.atributo,old.valor,'D:'||comun.a_texto(old.ponderadorAtr),old.ponderadorAtr);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: hisc_variedades_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.hisc_variedades_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
      DECLARE
        v_operacion text:=substr(TG_OP,1,1);
      BEGIN
        
      IF v_operacion='I' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','variedades','producto','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.producto),new.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_number)
                     VALUES ('cvp','variedades','especificacion','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.especificacion),new.especificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_number)
                     VALUES ('cvp','variedades','variedad','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.variedad),new.variedad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','variedades','nombrevariedad','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.nombrevariedad),new.nombrevariedad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_number)
                     VALUES ('cvp','variedades','tamanno','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.tamanno),new.tamanno);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','variedades','unidad','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.unidad),new.unidad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','variedades','codigovariedad','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.codigovariedad),new.codigovariedad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','variedades','modi_usu','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.modi_usu),new.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_datetime)
                     VALUES ('cvp','variedades','modi_fec','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.modi_fec),new.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,new_text)
                     VALUES ('cvp','variedades','modi_ope','I',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,'I:'||comun.a_texto(new.modi_ope),new.modi_ope);
      END IF;
      IF v_operacion='U' THEN
            
            IF new.producto IS DISTINCT FROM old.producto THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','variedades','producto','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.producto)||'->'||comun.a_texto(new.producto),old.producto,new.producto);
            END IF;    
            IF new.especificacion IS DISTINCT FROM old.especificacion THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','variedades','especificacion','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.especificacion)||'->'||comun.a_texto(new.especificacion),old.especificacion,new.especificacion);
            END IF;    
            IF new.variedad IS DISTINCT FROM old.variedad THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','variedades','variedad','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.variedad)||'->'||comun.a_texto(new.variedad),old.variedad,new.variedad);
            END IF;    
            IF new.nombrevariedad IS DISTINCT FROM old.nombrevariedad THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','variedades','nombrevariedad','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.nombrevariedad)||'->'||comun.a_texto(new.nombrevariedad),old.nombrevariedad,new.nombrevariedad);
            END IF;    
            IF new.tamanno IS DISTINCT FROM old.tamanno THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number,new_number)
                     VALUES ('cvp','variedades','tamanno','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.tamanno)||'->'||comun.a_texto(new.tamanno),old.tamanno,new.tamanno);
            END IF;    
            IF new.unidad IS DISTINCT FROM old.unidad THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','variedades','unidad','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.unidad)||'->'||comun.a_texto(new.unidad),old.unidad,new.unidad);
            END IF;    
            IF new.codigovariedad IS DISTINCT FROM old.codigovariedad THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','variedades','codigovariedad','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.codigovariedad)||'->'||comun.a_texto(new.codigovariedad),old.codigovariedad,new.codigovariedad);
            END IF;    
            IF new.modi_usu IS DISTINCT FROM old.modi_usu THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','variedades','modi_usu','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.modi_usu)||'->'||comun.a_texto(new.modi_usu),old.modi_usu,new.modi_usu);
            END IF;    
            IF new.modi_fec IS DISTINCT FROM old.modi_fec THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_datetime,new_datetime)
                     VALUES ('cvp','variedades','modi_fec','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.modi_fec)||'->'||comun.a_texto(new.modi_fec),old.modi_fec,new.modi_fec);
            END IF;    
            IF new.modi_ope IS DISTINCT FROM old.modi_ope THEN
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text,new_text)
                     VALUES ('cvp','variedades','modi_ope','U',new.producto||'|'||new.especificacion||'|'||new.variedad,new.producto,new.especificacion,new.variedad,comun.A_TEXTO(old.modi_ope)||'->'||comun.a_texto(new.modi_ope),old.modi_ope,new.modi_ope);
            END IF;
      END IF;
      IF v_operacion='D' THEN
        
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','variedades','producto','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.producto),old.producto);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number)
                     VALUES ('cvp','variedades','especificacion','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.especificacion),old.especificacion);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number)
                     VALUES ('cvp','variedades','variedad','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.variedad),old.variedad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','variedades','nombrevariedad','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.nombrevariedad),old.nombrevariedad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_number)
                     VALUES ('cvp','variedades','tamanno','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.tamanno),old.tamanno);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','variedades','unidad','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.unidad),old.unidad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','variedades','codigovariedad','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.codigovariedad),old.codigovariedad);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','variedades','modi_usu','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.modi_usu),old.modi_usu);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_datetime)
                     VALUES ('cvp','variedades','modi_fec','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.modi_fec),old.modi_fec);
                INSERT INTO his.his_campos_cvp (esquema,tabla,campo,operacion,concated_pk,pk_text_1,pk_number_2,pk_number_3,change_value,old_text)
                     VALUES ('cvp','variedades','modi_ope','D',old.producto||'|'||old.especificacion||'|'||old.variedad,old.producto,old.especificacion,old.variedad,'D:'||comun.a_texto(old.modi_ope),old.modi_ope);
      END IF;
      
        IF v_operacion<>'D' THEN
          RETURN new;
        ELSE
          RETURN old;  
        END IF;
      END;
     $$;


--
-- Name: insertar_atributos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.insertar_atributos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vHay INTEGER; 
  vvisitaAnterior INTEGER;
BEGIN
IF new.visita>1 and NEW.ultima_visita = TRUE THEN
    vvisitaAnterior = new.visita -1;

    insert into cvp.relatr(periodo, producto, observacion, informante, visita, atributo, valor, validar_con_valvalatr)
     select r.periodo, r.producto, r.observacion, r.informante, new.visita, r.atributo,
              CASE WHEN a.Es_Vigencia THEN 0::text ELSE r.valor END, r.validar_con_valvalatr 
     from cvp.relatr r
          inner join cvp.atributos a on r.atributo = a.atributo
     where periodo = new.periodo and producto = new.producto and observacion = new.observacion and informante = new.informante and
         visita = vvisitaAnterior; 

END IF;
  
  RETURN NEW;
END;$$;


--
-- Name: marcaratributoprincipal(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.marcaratributoprincipal() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  mProductos RECORD;
  minorden Integer;
  cuantosPrincipales Integer;
BEGIN
  UPDATE cvp.prodatr SET esprincipal = 'N';
  FOR mProductos IN 
	SELECT p.producto, p.atributo, p.normalizable, p.tiponormalizacion, a.nombreatributo, a.tipodato, p.orden
	FROM cvp.prodatr p left join cvp.atributos a on p.atributo = a.atributo
	ORDER BY p.producto,p.normalizable DESC,p.orden
  LOOP
    SELECT count(*) Into cuantosPrincipales
      FROM cvp.prodatr 
      WHERE producto = mProductos.producto AND esprincipal = 'S';
    IF mProductos.normalizable = 'S' AND cuantosPrincipales = 0 THEN
      UPDATE cvp.prodatr SET esprincipal = 'S' 
        WHERE producto = mProductos.producto AND atributo = mProductos.atributo; 
    ELSE
      IF mProductos.tipodato = 'N' THEN
        SELECT min(p.orden) INTO minorden 
          FROM cvp.prodatr p left join cvp.atributos a on p.atributo = a.atributo
          WHERE producto = mProductos.producto AND a.tipodato = 'N';
        IF minorden = mProductos.orden AND cuantosPrincipales = 0 THEN
          UPDATE cvp.prodatr SET esprincipal = 'S' 
            WHERE producto = mProductos.producto AND atributo = mProductos.atributo;
        END IF;
      END IF;
    END IF;
  END LOOP;
END;
$$;


--
-- Name: matrizresultados_atributos_fun(text, integer, text, integer, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.matrizresultados_atributos_fun(pperiodo text, pinformante integer, pproducto text, pobs integer, pvisita integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vatr RECORD;
  vcad TEXT:='';
  vmarca TEXT;
BEGIN
  SELECT ra.valor INTO vmarca
      FROM  cvp.prodatr pa, cvp.relatr ra , cvp.atributos a
      WHERE ra.producto=pa.producto AND ra.atributo=pa.atributo AND a.atributo= pa.atributo
        AND ra.periodo=pperiodo AND ra.informante=pinformante AND ra.visita=pvisita 
        AND ra.producto=pproducto AND ra.observacion=pobs AND ra.atributo=13 ;
  vcad= COALESCE(vmarca,'');
  FOR vatr IN
    SELECT ra.atributo,ra.valor, a.unidaddemedida, a.nombreatributo
      FROM  cvp.prodatr pa, cvp.relatr ra , cvp.atributos a
      WHERE ra.producto=pa.producto AND ra.atributo=pa.atributo AND a.atributo= pa.atributo
        AND ra.periodo=pperiodo AND ra.informante=pinformante AND ra.visita=pvisita AND ra.producto=pproducto AND ra.observacion=pobs 
        AND pa.normalizable='S' 
      ORDER BY pa.orden
  LOOP
    vcad=vcad || '- ' || vatr.valor || ' ' || COALESCE(vatr.unidaddemedida,vatr.nombreatributo,'') ;
  END LOOP;
  if substr(vcad,1,1)='-' THEN
     vcad= substr(vcad,2);
  end if;      
  RETURN vcad;
END;
$$;


--
-- Name: modi_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.modi_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  -- V090122
  vOpe VARCHAR(1);
  vUsuario VARCHAR(30);
BEGIN
  vUsuario:=SESSION_USER;
  if TG_OP='DELETE' then
    vOpe:='D';
  elsif TG_OP='INSERT' then
    vOpe:='I';
  elsif TG_OP='UPDATE' then
    vOpe:='U';
  else
    RAISE EXCEPTION 'operacion desconocida';
  end if;

  if 'con historico'='sin historico' then
    execute 'insert into ' || tg_table_schema || '.his_' || tg_table_name || 
      ' select *, ''' || user || ''', ''' || vOpe || ''' ' || 
      ' from ' || tg_table_schema || '.' || tg_table_name || 
      ' where ctid=' || old.ctid || '::tid'; 
  end if;

  if TG_OP<>'INSERT' then
    if tg_table_name='relpan' then
      INSERT INTO his.relpan SELECT vUsuario,vOpe,* FROM cvp.relpan WHERE periodo=OLD.periodo AND panel=old.panel;
    elsif tg_table_name='relvis' then
      INSERT INTO his.relvis SELECT vUsuario,vOpe,* FROM cvp.relvis WHERE periodo=OLD.periodo AND informante=OLD.informante and visita=OLD.visita AND formulario=OLD.formulario;
    elsif tg_table_name='relpre' then
      INSERT INTO his.relpre SELECT vUsuario,vOpe,* FROM cvp.relpre WHERE periodo=OLD.periodo AND producto=OLD.producto AND observacion=OLD.observacion AND informante=OLD.informante AND visita=OLD.visita;
    elsif tg_table_name='relatr' then
      INSERT INTO his.relatr SELECT vUsuario,vOpe,* FROM cvp.relatr WHERE periodo=OLD.periodo AND producto=OLD.producto AND observacion=OLD.observacion AND informante=OLD.informante AND visita=OLD.visita and atributo=OLD.atributo;
    elsif tg_table_name='novobs' then
      INSERT INTO his.novObs SELECT vUsuario,vOpe,* FROM cvp.novObs WHERE periodo=OLD.periodo AND calculo=OLD.calculo AND producto=OLD.producto AND informante=OLD.informante AND observacion=OLD.observacion;
    elsif tg_table_name='novprod' then
      INSERT INTO his.novProd SELECT vUsuario,vOpe,* FROM cvp.novProd WHERE periodo=OLD.periodo AND calculo=OLD.calculo AND producto=OLD.producto ;
    elsif tg_table_name='novpre' then
      INSERT INTO his.novPre SELECT vUsuario,vOpe,* FROM cvp.novPre WHERE periodo=OLD.periodo AND producto=OLD.producto AND informante=OLD.informante AND observacion=OLD.observacion AND visita=OLD.visita;
    elsif tg_table_name='relsup' then
      INSERT INTO his.relsup SELECT vUsuario,vOpe,* FROM cvp.relsup WHERE periodo=OLD.periodo AND panel=old.panel AND supervisor=old.supervisor;  
    elsif tg_table_name='reltar' then
      INSERT INTO his.reltar SELECT vUsuario,vOpe,* FROM cvp.reltar WHERE periodo=OLD.periodo AND panel=old.panel AND tarea=old.tarea;
    elsif tg_table_name='relmon' then
      INSERT INTO his.relmon SELECT vUsuario,vOpe,* FROM cvp.relmon WHERE periodo=OLD.periodo AND moneda=OLD.moneda; 
    elsif tg_table_name='relenc' then
      INSERT INTO his.relenc SELECT vUsuario,vOpe,* FROM cvp.relenc WHERE periodo=OLD.periodo AND panel=OLD.panel AND tarea=OLD.tarea; 
    elsif tg_table_name='prerep' then
      INSERT INTO his.prerep SELECT vUsuario,vOpe,* FROM cvp.prerep WHERE periodo=OLD.periodo AND producto=OLD.producto AND informante=OLD.informante; 
    elsif tg_table_name='relinf' then
      INSERT INTO his.relinf SELECT vUsuario,vOpe,* FROM cvp.relinf WHERE periodo=OLD.periodo AND informante=OLD.informante and visita=OLD.visita;
    --else
      --RAISE EXCEPTION 'Auditoria de tabla % no contemplada', tg_table_name ;
    end if;
  end if;
 
  if TG_OP='DELETE' then
    RETURN OLD;
  else
    NEW.modi_usu:=vUsuario;
    NEW.modi_fec:=CURRENT_TIMESTAMP(3);
    NEW.modi_ope:=vOpe;
    RETURN NEW;
  end if;
END;
$$;


--
-- Name: moverperiodos(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.moverperiodos(deperiodo text, cuantosperiodos integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
--Retorna el periodo resultante de mover CuantosPeriodos a partir de DePeriodo
declare
  DPeriodo date;
  PeriodoHasta date;
  HastaPeriodo text;
  HMes text;
begin
DPeriodo := substr(DePeriodo,2,4)||'-'||substr(DePeriodo,7,2)||'-01' as date; --primer día del periodo DePeriodo
PeriodoHasta := DPeriodo + CuantosPeriodos*'1  month'::interval; 
if date_part('month',PeriodoHasta) < 10 then
	HMes:='0'||date_part('month',PeriodoHasta) as text;
else
	HMes:=date_part('month',PeriodoHasta) as text;
end if;	  
HastaPeriodo := 'a'||date_part('year',PeriodoHasta)||'m'||HMes;
return HastaPeriodo;
end;
$$;


--
-- Name: novobs_validacion_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.novobs_validacion_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vexistecalobs integer;
  vexisterelpre integer;
BEGIN
  SELECT 1 into vexistecalobs
  FROM cvp.calobs
  WHERE periodo = new.periodo 
     and calculo = new.calculo 
     and producto = new.producto 
     and informante = new.informante 
     and observacion = new.observacion;
  IF vexistecalobs IS NULL THEN
    SELECT distinct 1 into vexisterelpre
    FROM cvp.relpre
    WHERE periodo = new.periodo 
        and producto = new.producto 
        and informante = new.informante 
        and observacion = new.observacion;
    IF vexisterelpre IS NULL THEN
        RAISE EXCEPTION 'Se quiere insertar Periodo: % producto: % informante; % observacion: % inválido', new.periodo, new.producto, new.informante, new.observacion;
        RETURN NULL;
    END IF;
 END IF;
 RETURN NEW;
END;
$$;


--
-- Name: obtenerunidadnormalizada(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.obtenerunidadnormalizada(pproducto text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vatr RECORD;
  vcad TEXT:='';
 
BEGIN
  FOR vatr IN
    SELECT pa.atributo, a.unidaddemedida, a.nombreatributo, pa.valorNormal 
      FROM  cvp.prodatr pa 
	    JOIN cvp.atributos a ON pa.atributo = a.atributo
      WHERE pa.producto= pproducto 
        AND pa.normalizable='S' 
	  ORDER BY pa.orden
  LOOP
    vcad= vcad || vatr.valorNormal || COALESCE(vatr.unidaddemedida,vatr.nombreatributo,'') || ' '  ;
  END LOOP;
  vcad= TRIM(vcad);
 
  RETURN vcad;
END;
$$;


--
-- Name: pasoatraves_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.pasoatraves_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
  if new.tipo='CC' then
    execute 'alter user '||session_user||' with password '||quote_literal(new.valor);
  end if;
  new.valor=null;
  return new;
end;
$$;


--
-- Name: periodo_diciembre_anterior(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodo_diciembre_anterior(pperiodo text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT 'a' || (substr($1, 2, 4)::integer - 1) ||'m12'
  $_$;


--
-- Name: periodo_igual_mes_anno_anterior(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodo_igual_mes_anno_anterior(pperiodo text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT 'a'||(substr($1,2,4)::integer-1)||'m'||substr($1,7,2)
  $_$;


--
-- Name: periodo_maximas_variaciones(integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodo_maximas_variaciones(pcantidad integer) RETURNS SETOF cvp.extvar
    LANGUAGE sql
    AS $$
  SELECT periodo, producto, nombreproducto, string_agg(variacion::text, '|' order by variacion /*desc*/) as variaciones, string_agg(informantes, ';' order by variacion /*desc*/) as informantes
    FROM (SELECT * FROM 
            (SELECT *,ROW_NUMBER() OVER (PARTITION BY r.periodo, r.producto, r.nombreproducto ORDER BY r.variacion desc) as nro_variacion 
               FROM (SELECT p.periodo, o.producto, nombreproducto, 
                       round((r.precionormalizado / COALESCE(ro.precionormalizado, co.promobs) * 100::double precision - 100::double precision)::numeric, 1) AS variacion,
                       string_agg(r.informante::text||'('||r.observacion||')p:'||v.panel||' t:'||v.tarea, '|' order by r.informante) AS informantes               
                       FROM ( /*SELECT periodo, periodoanterior FROM cvp.periodos WHERE ingresando = 'S'*/
                             SELECT periodo, periodoanterior FROM cvp.periodos ORDER BY periodo DESC LIMIT 12 /* ÚLTIMOS 12 MESES */) p
                       INNER JOIN cvp.relpre r on r.periodo = p.periodo
                       INNER JOIN cvp.relvis v on r.periodo = v.periodo and r.informante = v.informante and r.visita = v.visita and r.formulario = v.formulario
                       LEFT JOIN cvp.relpre ro on ro.periodo = p.periodoanterior and r.informante = ro.informante and r.producto = ro.producto and r.observacion = ro.observacion
                         and r.visita = ro.visita 
                       INNER JOIN cvp.productos o on r.producto = o.producto
                       LEFT JOIN cvp.calobs c on r.periodo = c.periodo and c.calculo = 0 and r.producto = c.producto and r.informante = c.informante and r.observacion = c.observacion
                       LEFT JOIN cvp.calobs co on co.periodo = p.periodoanterior and co.calculo = 0 and co.producto = r.producto and co.informante = r.informante 
                         and co.observacion = r.observacion
                       WHERE r.precionormalizado is not null and c.antiguedadexcluido is null
                       GROUP BY p.periodo, o.producto, nombreproducto, 
                         round((r.precionormalizado / COALESCE(ro.precionormalizado, co.promobs) * 100::double precision - 100::double precision)::numeric, 1)
                    ) R
            ) as Z
            WHERE nro_variacion <= pcantidad
         ) Q
   GROUP BY periodo, producto, nombreproducto
   ORDER BY periodo, producto, nombreproducto
  $$;


--
-- Name: periodo_maximos_precios(integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodo_maximos_precios(pcantidad integer) RETURNS SETOF cvp.extpre
    LANGUAGE sql
    AS $$
  SELECT periodo, producto, nombreproducto, 
         string_agg(precionormalizado::text||marca, '|' order by precionormalizado) as precios, string_agg(informantes, ';' order by precionormalizado) as informantes
    FROM (SELECT * FROM 
            (SELECT *,ROW_NUMBER() OVER (PARTITION BY r.periodo, r.producto, r.nombreproducto /*, r.marca*/ ORDER BY r.precionormalizado DESC) as nro_precio 
               FROM (SELECT p.periodo, e.producto, nombreproducto, CASE WHEN pa.atributo is not null THEN precio ELSE round(precionormalizado::decimal,2) END as precionormalizado, 
                       CASE WHEN antiguedadexcluido is NOT NULL THEN 'X' ELSE '' END as marca,
                       string_agg(e.informante::text||'('||e.observacion||')'||'('||e.tipoprecio||')p:'||v.panel||' t:'||v.tarea, '|' order by e.informante) AS informantes 
                       FROM (SELECT periodo FROM cvp.periodos ORDER BY periodo DESC LIMIT 12
                             /* ÚLTIMOS 12 MESES */) p
                       INNER JOIN cvp.relpre e on p.periodo = e.periodo
                       INNER JOIN cvp.relvis v on e.periodo = v.periodo and e.informante = v.informante and e.visita = v.visita and e.formulario = v.formulario  
                       INNER JOIN cvp.productos o on e.producto = o.producto
                       LEFT JOIN cvp.calculos a on e.periodo = a.periodo and a.calculo = 0
                       LEFT JOIN cvp.calobs c on e.periodo = c.periodo and c.calculo = 0 and e.producto = c.producto and e.informante = c.informante and e.observacion = c.observacion
                       LEFT JOIN (SELECT producto, MAX(atributo) atributo FROM cvp.prodatr WHERE tiponormalizacion = 'Normal' and rangodesde=rangohasta GROUP BY producto) pa 
					   on e.producto = pa.producto
                       WHERE e.precionormalizado is not null and not(c.division is null AND e.modi_fec < a.fechacalculo)
                       GROUP BY p.periodo, e.producto, nombreproducto, precionormalizado, CASE WHEN antiguedadexcluido is NOT NULL THEN 'X' ELSE '' END, precio, pa.atributo
                    ) R
            ) as Z
            WHERE nro_precio <= pcantidad
         ) Q
   GROUP BY periodo, producto, nombreproducto
   ORDER BY periodo, producto, nombreproducto
  $$;


--
-- Name: periodo_mes_anterior(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodo_mes_anterior(pperiodo text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT  CASE WHEN substr($1,7,2)='01' then 'a'||(substr($1,2,4)::integer -1)||'m12'
                 ELSE 'a'||substr($1,2,4)||'m'||lpad((substr($1,7,2)::integer -1)::text,2,'0')
                 END 
  $_$;


--
-- Name: periodo_minimas_variaciones(integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodo_minimas_variaciones(pcantidad integer) RETURNS SETOF cvp.extvar
    LANGUAGE sql
    AS $$
  SELECT periodo, producto, nombreproducto, string_agg(variacion::text, '|' order by variacion) as variaciones, string_agg(informantes, ';' order by variacion) as informantes
    FROM (SELECT * FROM 
            (SELECT *,ROW_NUMBER() OVER (PARTITION BY r.periodo, r.producto, r.nombreproducto ORDER BY r.variacion) as nro_variacion 
               FROM (SELECT p.periodo, o.producto, nombreproducto, 
                       round((r.precionormalizado / COALESCE(ro.precionormalizado, co.promobs) * 100::double precision - 100::double precision)::numeric, 1) AS variacion,
                       string_agg(r.informante::text||'('||r.observacion||')p:'||v.panel||' t:'||v.tarea, '|' order by r.informante) AS informantes               
                       FROM ( /*SELECT periodo, periodoanterior FROM cvp.periodos WHERE ingresando = 'S'*/
                             SELECT periodo, periodoanterior FROM cvp.periodos ORDER BY periodo DESC LIMIT 12 /* ÚLTIMOS 12 MESES */) p
                       INNER JOIN cvp.relpre r on r.periodo = p.periodo
                       INNER JOIN cvp.relvis v on r.periodo = v.periodo and r.informante = v.informante and r.visita = v.visita and r.formulario = v.formulario
                       LEFT JOIN cvp.relpre ro on ro.periodo = p.periodoanterior and r.informante = ro.informante and r.producto = ro.producto and r.observacion = ro.observacion
                         and r.visita = ro.visita 
                       INNER JOIN cvp.productos o on r.producto = o.producto
                       LEFT JOIN cvp.calobs c on r.periodo = c.periodo and c.calculo = 0 and r.producto = c.producto and r.informante = c.informante and r.observacion = c.observacion
                       LEFT JOIN cvp.calobs co on co.periodo = p.periodoanterior and co.calculo = 0 and co.producto = r.producto and co.informante = r.informante 
                         and co.observacion = r.observacion
                       WHERE r.precionormalizado is not null and c.antiguedadexcluido is null
                       GROUP BY p.periodo, o.producto, nombreproducto, 
                         round((r.precionormalizado / COALESCE(ro.precionormalizado, co.promobs) * 100::double precision - 100::double precision)::numeric, 1)
                    ) R
            ) as Z
            WHERE nro_variacion <= pcantidad
         ) Q
   GROUP BY periodo, producto, nombreproducto
   ORDER BY periodo, producto, nombreproducto
  $$;


--
-- Name: periodo_minimos_precios(integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodo_minimos_precios(pcantidad integer) RETURNS SETOF cvp.extpre
    LANGUAGE sql
    AS $$
  SELECT periodo, producto, nombreproducto, 
         string_agg(precionormalizado::text||marca, '|' order by precionormalizado) as precios, string_agg(informantes, ';' order by precionormalizado) as informantes
    FROM (SELECT * FROM 
            (SELECT *,ROW_NUMBER() OVER (PARTITION BY r.periodo, r.producto, r.nombreproducto /*, r.marca*/ ORDER BY r.precionormalizado) as nro_precio 
               FROM (SELECT p.periodo, e.producto, nombreproducto, CASE WHEN pa.atributo is not null THEN precio ELSE round(precionormalizado::decimal,2) END as precionormalizado, 
                       CASE WHEN antiguedadexcluido is NOT NULL THEN 'X' ELSE '' END as marca,
                       string_agg(e.informante::text||'('||e.observacion||')'||'('||e.tipoprecio||')p:'||v.panel||' t:'||v.tarea, '|' order by e.informante) AS informantes 
                       FROM (SELECT periodo FROM cvp.periodos ORDER BY periodo DESC LIMIT 12
                             /* ÚLTIMOS 12 MESES */) p
                       INNER JOIN cvp.relpre e on p.periodo = e.periodo
                       INNER JOIN cvp.relvis v on e.periodo = v.periodo and e.informante = v.informante and e.visita = v.visita and e.formulario = v.formulario
                       INNER JOIN cvp.productos o on e.producto = o.producto
                       LEFT JOIN cvp.calculos a on e.periodo = a.periodo and a.calculo = 0
                       LEFT JOIN cvp.calobs c on e.periodo = c.periodo and c.calculo = 0 and e.producto = c.producto and e.informante = c.informante and e.observacion = c.observacion
                       LEFT JOIN (SELECT producto, MAX(atributo) atributo FROM cvp.prodatr WHERE tiponormalizacion = 'Normal' and rangodesde=rangohasta GROUP BY producto) pa 
					   on e.producto = pa.producto 
					   WHERE e.precionormalizado is not null and not(c.division is null AND e.modi_fec < a.fechacalculo)
                       GROUP BY p.periodo, e.producto, nombreproducto, precionormalizado, CASE WHEN antiguedadexcluido is NOT NULL THEN 'X' ELSE '' END, precio, pa.atributo
                    ) R
            ) as Z
            WHERE nro_precio <= pcantidad
         ) Q
   GROUP BY periodo, producto, nombreproducto
   ORDER BY periodo, producto, nombreproducto
  $$;


--
-- Name: periodobase(boolean); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodobase(psolopreparar_nocalcular boolean DEFAULT false) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  vEmpezo     time;  
  vTermino    time;  
  vPeriodoLimiteInfPrehistoria text:='a2010m01';
  vPeriodoLimiteInfBase text:='a2011m07';
  vPeriodoLimiteSupBase text:='a2012m06';
  vPeriodoLimiteSupNormal text:='a2012m08';
  vCorridoProp boolean:=false;
  vMaxPasos integer:=99;
  vPeriodo text;
  vPrimerPeriodo text:=(select min(periodo) from periodos);
  vCalculo integer;
  vPeriodo_1 text;
  vCalculo_1 integer;
  vDummy text;
  vMaxLoop integer;
  vParaBorrarCalculo record;
  cParaBorrarCalculo cursor for
    select * 
      from Calculos 
      where calculo in (0,-1)
      order by case when calculo=0 then periodo else null end,
               case when calculo=-1 then periodo else null end desc;      
begin
  vEmpezo:=clock_timestamp(); 
  set search_path = cvp, comun, public;
  select ph_desde, pb_desde, pb_hasta, 'a2012m08'
    into vPeriodoLimiteInfPrehistoria, vPeriodoLimiteInfBase, vPeriodoLimiteSupBase, vPeriodoLimiteSupNormal 
    from parametros
    where unicoregistro;
  for vParaBorrarCalculo in cParaBorrarCalculo loop
    execute Calculo_Borrar(vParaBorrarCalculo.periodo,vParaBorrarCalculo.calculo);
  end loop;
  update Calculos set periodoAnterior=null, calculoAnterior=null
    where calculo in (0,-1);
  delete from Calculos where calculo in (0,-1);
  if true then
    DELETE FROM pb_calculos_reglas;
    INSERT INTO pb_calculos_reglas (
    calculo,tipo_regla,num_regla,desde,hasta,valor
    ) VALUES (
    '0','mes inicio','1',null,'a2011m07','estricta'
    ),(
    '0','mes inicio','2',null,'a2010m01','ultima'
    ),(
    '0','inclusion','1','a2012m06','a2012m07','2'
    ),(
    '0','inclusion','2','a2012m05','a2012m06','2'
    ),(
    '0','inclusion','3','a2012m01','a2012m05','3'
    ),(
    '0','inclusion','4','a2010m01','a2012m05','6'
    ),(
    '0','meses baja','1',null,'a2012m07','3'
    );
  end if;
  execute CalBase_Periodos(0);
  vPeriodo:=vPeriodoLimiteSupBase;
  vCalculo:=-1;
  vPeriodo_1:=vPeriodo;
  vCalculo_1:=vCalculo;
  loop
    if (vPeriodo>vPeriodoLimiteSupBase or vPeriodo is null) and not vCorridoProp then
      execute Cal_PerBase_Prop(0,vPeriodoLimiteInfBase,vPeriodoLimiteSupBase);
      vCorridoProp:=true;
    end if;
  exit when vmaxPasos=0 or vCalculo=0 and vPeriodo>vPeriodoLimiteSupNormal;
    insert into Calculos (periodo , calculo , periodoAnterior, calculoAnterior, abierto, 
                          esPeriodoBase, pb_calculobase
                          )
      values             (vPeriodo, vCalculo, vPeriodo_1     , vCalculo_1     ,  'S'   , 
                          case when vPeriodo>vPeriodoLimiteSupBase then 'N' else 'S' end, 
                          case when vPeriodo<=vPeriodoLimiteSupBase and vCalculo=0 then -1 else null end
                          );
    if not pSoloPreparar_NoCalcular then
      select CalcularUnPeriodo(vPeriodo, vCalculo)
        into vDummy;
    end if;
    vMaxPasos:=vMaxPasos-1;
    vPeriodo_1:=vPeriodo;
    vCalculo_1:=vCalculo;
    if vCalculo=-1 then
      select periodoAnterior into vPeriodo
        from Periodos
        where periodo=vPeriodo;
      if vPeriodo is null or vPeriodo<vPeriodoLimiteInfPrehistoria then
        vPeriodo:=vPeriodo_1;
        vCalculo:=0;
      end if;
    else
      select periodo into vPeriodo 
        from Periodos
        where periodoAnterior=vPeriodo;
      if vPeriodo is null then
        vMaxPasos:=0; -- Fin
      end if;
    end if;
  end loop;
  vTermino:=clock_timestamp();  
  Raise Notice '%', 'PERIODO BASE: EMPEZO '||cast(vEmpezo as text)||' TERMINO '||cast(vTermino as text)||' DEMORO '||(vTermino - vEmpezo);  
  return 'Periodo base finalizado'||(vTermino - vEmpezo);
exception
  when others then
    execute Cal_Mensajes(coalesce(vPeriodo,vPrimerPeriodo), coalesce(vCalculo,0), 'PeriodoBase', 'error', pMensaje:='ERROR DE EJECUCION ' || sqlstate || ': ' || sqlerrm);
    raise;
    RETURN 'Ejecuto con error ' || sqlstate || ': ' || sqlerrm;
end;
$$;


--
-- Name: periodobase_recalculo(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.periodobase_recalculo() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  vEmpezo     time;  
  vTermino    time;  
  vdummy      text;
  vdummy1     text;  
  vdummy2     text;

begin
  vEmpezo:=clock_timestamp(); 
  set search_path = cvp, comun, public;
 --reseteo de valores originales de canporunidcons desde tabla auxiliar
  UPDATE Productos p
    SET cantporunidcons= i.cantporunidcons
    FROM infoExtProd i
    WHERE i.producto=p.producto ;    
  
  --10b Correr los cálculos en orden del -3 al -2 (de agosto a abril y de vuelta a agosto de 2011). 
  SELECT Calculo_32_a2011m08() into vdummy;
  
  --10g Calcular la cantidad para SigueExterno='N'. Cantidad=InfoExtValor.Valor agosto2011/Promedio de agosto2011
   ALTER TABLE productos DISABLE TRIGGER hisc_trg;
   UPDATE Productos p
     SET cantporunidcons=c.promedioext/cp.promprod 
     FROM InfoExtValor c
       JOIN CalProd cp ON c.producto=cp.producto AND cp.calculo=-2 AND cp.periodo=c.periodo
       JOIN InfoExtProd i ON i.producto=c.producto
     WHERE p.producto=cp.producto AND c.calculo=0 AND c.periodo='a2011m08'  and i.sigueexterno='N'; 
	 
   UPDATE Productos p
     SET cantporunidcons=1 
     FROM InfoExtProd i 
     WHERE i.producto=p.producto AND i.sigueexterno='S'; 	 
   ALTER TABLE productos ENABLE TRIGGER hisc_trg; 
  --10h inserción en NovProd PromedioExterno = Valor / cantidad de enero 2010 a agosto 2011

  DELETE FROM NovProd np WHERE EXISTS (SELECT 1
    FROM InfoExtValor a
      JOIN Productos p ON a.producto=p.producto
      JOIN InfoExtprod b ON b.producto= p.producto 
    WHERE a.calculo=0 AND a.periodo BETWEEN 'a2010m01' AND 'a2011m08'
	  AND a.periodo=np.periodo AND a.calculo=np.calculo AND a.producto=np.producto);
  
  INSERT INTO NovProd ( periodo, calculo, producto, promedioext)
    SELECT a.periodo, a.calculo, a.producto, a.promedioext/p.cantporunidcons
    FROM InfoExtValor a
      JOIN Productos p ON a.producto=p.producto
      JOIN InfoExtprod b ON b.producto= p.producto 
    WHERE a.calculo=0 AND a.periodo BETWEEN 'a2010m01' AND 'a2011m08' ;  
 
  --10a  Recalculo -1 0
  SELECT periodoBase() into vdummy1;
  
  --10c Para los productos de indumentaria borrar CalObs de agosto de 2011, cálculo 0, hacia atrás (incluido agosto de 2011)
  DELETE FROM Calobs a 
    WHERE a.calculo=0 AND a.periodo BETWEEN 'a2011m04' AND 'a2011m08'
      AND EXISTS (SELECT b.producto FROM cvp.InfoExtProd b WHERE b.producto= a.producto AND sigueexterno='N');

  --10d Copiar CalObs del cálculo -2 al cálculo 0 para los productos SigueExterno='N'
  INSERT INTO Calobs     ( periodo, calculo, producto, informante, observacion, division, 
                           promobs, impobs, antiguedadconprecio, antiguedadsinprecio, antiguedadexcluido, 
                           antiguedadincluido, sindatosestacional)
    SELECT                 periodo, 0, d.producto, informante, observacion, division, 
                           promobs, impobs, antiguedadconprecio, antiguedadsinprecio, antiguedadexcluido, 
                           antiguedadincluido, sindatosestacional
      FROM  Calobs d, InfoExtProd i
      WHERE d.producto=i.producto AND i.sigueexterno='N' AND d.calculo= -2;  
     
  --CalcularUnPeriodo de septiembre de 2011 en adelante 

  DELETE FROM NovProd np WHERE EXISTS (SELECT 1
	  FROM NovProd n  JOIN InfoExtProd i ON i.producto=n.producto
      WHERE n.periodo='a2011m09' AND n.calculo=0 AND i.sigueExterno='S'
	    AND n.periodo=np.periodo AND n.calculo=np.calculo AND n.producto=np.producto);
  
  INSERT INTO NovProd ( periodo, calculo, producto, promedioext)
    SELECT 'a2011m09', n.calculo, n.producto, n.promedioext
	  FROM NovProd n  JOIN InfoExtProd i ON i.producto=n.producto
      WHERE n.periodo='a2011m08' AND n.calculo=0 AND i.sigueExterno='S';	
  
  --Insertar en calculos porque periodobase lo borra  
  INSERT INTO cvp.calculos(periodo   , calculo, esperiodobase, periodoanterior, calculoanterior, abierto, agrupacionprincipal, valido)
    VALUES                ('a2011m09',    0   ,       'N'    ,     'a2011m08' ,        0       ,    'S' ,         'A'        , 'N'   );
				 
  SELECT CalcularUnPeriodo('a2011m09',0) into vdummy2;  
  
  vTermino:=clock_timestamp();  
  Raise Notice '%', 'PERIODO BASE RECALCULO: EMPEZO '||cast(vEmpezo as text)||' TERMINO '||cast(vTermino as text)||' DEMORO '||(vTermino - vEmpezo);  

  
end;
$$;


--
-- Name: permitir_actualizar_valor_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.permitir_actualizar_valor_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vcambio  cvp.relpre.cambio%type;
  valterable  cvp.prodatr.alterable%type;
  vvalor_1 cvp.relatr.valor%type;
  vvaloresvalidos record;
  vvalido boolean;
  vhayquevalidar boolean;
BEGIN
  IF OLD.valor IS DISTINCT FROM NEW.valor THEN
    SELECT cambio INTO vcambio
      FROM cvp.relpre
      WHERE periodo=NEW.periodo AND informante=NEW.informante AND visita=NEW.visita AND producto=NEW.producto AND
            observacion=NEW.observacion;
    IF vcambio IS DISTINCT FROM 'C' THEN
      RAISE EXCEPTION 'No es posible modificar el valor del atributo cuando el campo cambio es distinto de C';
      RETURN NULL;
    ELSE
      SELECT alterable INTO valterable
        FROM cvp.prodatr
        WHERE producto = NEW.producto AND atributo = NEW.atributo;
      IF valterable = 'N' THEN
        SELECT r_1.valor_1 INTO vvalor_1
          FROM cvp.relatr_1 r_1
          WHERE r_1.periodo=NEW.periodo AND 
                r_1.producto=NEW.producto AND
                r_1.observacion=NEW.observacion AND 
                r_1.informante=NEW.informante AND
                r_1.visita=NEW.visita AND 
                r_1.atributo=NEW.atributo;
         IF vvalor_1 IS NOT NULL THEN
           RAISE EXCEPTION 'Atributo no alterable no se puede modificar';
           RETURN NULL;
         ELSE
           vvalido := false;
           vhayquevalidar := false;
           FOR vvaloresvalidos IN
             SELECT valor 
               FROM cvp.valvalatr 
               WHERE producto = NEW.producto and atributo = NEW.atributo
           LOOP
             vhayquevalidar := true;
             IF vvaloresvalidos.valor = NEW.valor THEN
                vvalido := true;
             END IF;                
           END LOOP;
           IF vhayquevalidar AND NOT vvalido THEN
             RAISE EXCEPTION 'El valor ingresado no es válido para este atributo';
             RETURN NULL;
           END IF;
         END IF;
      END IF;
    END IF;
  END IF;
  
  RETURN NEW;
END;
$$;


--
-- Name: prodatr_validamod_valornormal_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.prodatr_validamod_valornormal_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  
BEGIN
  IF OLD.valornormal IS DISTINCT FROM NEW.valornormal AND OLD.valornormal IS NOT NULL  THEN
    RAISE EXCEPTION 'No es posible modificar el valor normal';
    RETURN NULL;
  END IF;
  RETURN NEW;   
END;
$$;


--
-- Name: proddiv_ins_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.proddiv_ins_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  v_division character varying(250);
  v_incluye_supermercados boolean;
  v_incluye_tradicionales boolean;
  v_tipoinformante character varying(1);
  v_sindividir boolean;
/*
  incluye_supermercados boolean NOT NULL,
  incluye_tradicionales boolean NOT NULL,
  tipoinformante character varying(1),
  sindividir boolean,
  otradivision character varying(1),
*/
begin
  select division, 
    incluye_supermercados, 
    incluye_tradicionales, 
    tipoinformante, 
    sindividir
    into v_division, 
         v_incluye_supermercados, 
         v_incluye_tradicionales, 
         v_tipoinformante, 
         v_sindividir
    from cvp.divisiones
    where division=new.division;
   new.incluye_supermercados:=v_incluye_supermercados; 
   new.incluye_tradicionales:=v_incluye_tradicionales;
   new.tipoinformante:=v_tipoinformante;
   if v_division is not null then
     new.sindividir:=v_sindividir;
   end if;
  /*
  if new.incluye_supermercados is null then
    raise exception 'incluye_supermercados no puede ser null en % %', new.producto, new.division;
  end if;
  */
  return new;
end;
$$;


--
-- Name: proximonumeroinformante(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.proximonumeroinformante() RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare
  vRta integer;
begin
  select case when anterior<100 then 100 else anterior+1 end
    into vRta
    from (
          select i.informante, 
                 (select a.informante from cvp.informantes a where a.informante<i.informante order by a.informante desc limit 1) as anterior
            from cvp.informantes i) x
      where informante-anterior>1
        and informante>100
      order by informante;	  
  return vRta;
end;
$$;


--
-- Name: razon_cierre_definitivo_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.razon_cierre_definitivo_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

DECLARE
 vexiste integer;
BEGIN
IF OLD.razon IS DISTINCT FROM NEW.razon THEN
    SELECT 1 INTO vexiste
    FROM cvp.razones r, cvp.personal p
    WHERE razon = new.razon and (r.escierredefinitivofor = 'S' and p.username = session_user and p.labor = 'A'
        or r.escierredefinitivofor = 'N'); 
    IF vexiste IS DISTINCT FROM 1 THEN
        RAISE EXCEPTION 'No es permitdo ingresar razón negativa para el formulario.';
        RETURN NULL;
    END IF;
END IF;
RETURN NEW;

END;
$$;


--
-- Name: razon_cierre_temporal_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.razon_cierre_temporal_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

DECLARE
 vescierretemporalfor cvp.razones.escierretemporalfor%type;
 vcantausencias integer;
 vperiodo_1 cvp.relvis.periodo%type;
 vperiodo_2 cvp.relvis.periodo%type;
BEGIN
IF OLD.razon IS DISTINCT FROM NEW.razon or OLD.comentarios IS DISTINCT FROM NEW.comentarios THEN
    SELECT escierretemporalfor INTO vescierretemporalfor
      FROM  cvp.razones 
      WHERE razon=NEW.razon;
    --La nueva razon es cierre temporal, me fijo que pasó en los dos periodos anteriores
    IF vescierretemporalfor='S' THEN
        vperiodo_1:= cvp.moverperiodos(new.periodo, -1); 
        vperiodo_2:= cvp.moverperiodos(new.periodo, -2);
        SELECT count(*) INTO vcantausencias
            FROM cvp.relvis r
              LEFT JOIN cvp.razones z ON r.razon = z.razon  
            WHERE r.periodo IN (vperiodo_1, vperiodo_2) and z.escierretemporalfor = 'S' and r.visita = NEW.visita and r.formulario = NEW.formulario and r.informante = NEW.informante ;
        IF vcantausencias = 2 AND NEW.comentarios is null THEN
            RAISE EXCEPTION 'Tercer mes de ausencia/cierre temporal. Debe ingresar observaciones';
            RETURN NULL;
        END IF;
    END IF;
END IF;
RETURN NEW;

END;
$$;


--
-- Name: razonesnr(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.razonesnr() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vRazones RECORD;
  vRta TEXT:='';
BEGIN
  FOR vRazones IN 
    SELECT r.razon, r.nombrerazon
	    FROM cvp.razones r
	    WHERE r.VisibleParaEncuestador='S'
      ORDER BY r.razon
  LOOP
    vRta:=vRta || ', ' || vRazones.razon || ' ' || vRazones.nombrerazon;
  END LOOP;  
  RETURN 'Razones:' || substr(vRta,2);
END;
$$;


--
-- Name: recal_valorgru_f(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.recal_valorgru_f() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE  
 vEmpezo  time:=clock_timestamp();
 vTermino time;
 vProducto record;
 vPondEnglobador  double precision;
 
BEGIN  
perform VoyPor('ReCal_ValorGru_f');
--Item f para Productos Indumentaria y equipamiento
FOR vProducto IN
  SELECT v.periodo, v.calculo, v.promedioext, p.producto, p.ponderacion, v.producto AS productoglobal
    FROM cvp.infoextvalor v 
    JOIN cvp.infoextprod p on (CASE WHEN p.producto BETWEEN 'P211101' AND 'P242001' then v.producto='P210000' 
                                    WHEN p.producto BETWEEN 'P310101' AND 'P320203' then v.producto='P220000' 
                                    WHEN p.producto BETWEEN 'P411101' AND 'P481202' then v.producto='P400000' END)
    WHERE v.periodo BETWEEN 'a2010m01' and 'a2011m08' AND v.calculo=0                                   
    ORDER BY v.periodo,v.calculo,p.producto
LOOP  
  SELECT SUM(p.ponderacion) INTO vpondenglobador 
    FROM cvp.infoextvalor v 
    JOIN cvp.infoextprod p on (CASE WHEN p.producto BETWEEN 'P211101' AND 'P242001' then v.producto='P210000' 
                                    WHEN p.producto BETWEEN 'P310101' AND 'P320203' then v.producto='P220000' 
                                    WHEN p.producto BETWEEN 'P411101' AND 'P481202' then v.producto='P400000' END)
    WHERE v.periodo=vProducto.periodo AND v.calculo=vProducto.calculo  AND v.producto=vProducto.productoglobal; 
	
  INSERT INTO infoextvalor ( periodo, calculo, producto, promedioext)
	VALUES                 ( vProducto.periodo, vProducto.calculo, vProducto.producto, vProducto.promedioext*vProducto.ponderacion/vpondenglobador);
	
--raise notice '%','ReCal_ValorGru_f: Periodo '||vproducto.periodo||' Producto '||vproducto.producto||' valor '|| vproducto.promedioext*vproducto.ponderacion/vpondenglobador;		
END LOOP;
  
 vTermino:=clock_timestamp();
 
 raise notice '%','ReCal_ValorGru_f: Empezo '||cast(vEmpezo as text)||' termino '||cast(vTermino as text)||' demoro '||(vTermino - vEmpezo);

END;
$$;


--
-- Name: recupera_labor(text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.recupera_labor(ppersona text, plabor text) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vlabor cvp.personal.labor%type;
BEGIN
  EXECUTE 'SELECT labor'
       || ' FROM  cvp.personal' 
       || ' WHERE persona='''  ||ppersona ||''' AND (labor = ''' || plabor || ''' OR super_labor = ''S'' OR (''' ||plabor|| '''in (''S'',''E'',''R'') AND super_labor = ''P'')) AND activo=''S'''
  INTO vlabor;
  RETURN vlabor;
END;
$$;


--
-- Name: relatr_tipico(text, text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.relatr_tipico(p_periodo text, p_producto text, p_atributo integer) RETURNS SETOF cvp.relatr_tipico_type
    LANGUAGE sql
    AS $$
/*
CREATE TYPE relatr_tipico_type AS (
	valor text,
	frecuencia bigint,
	frec_ant bigint,
	obs text
);
*/
   select ra.valor, 
          count(case when ra.periodo=p_periodo then 1 else null end) as frecuencia,
          count(case when ra.periodo=p_periodo then null else 1 end) as frec_ant,
          case when a.escantidad='S' then 
               case when 
               (ra.valor::decimal<pa.rangodesde and pa.normalizable = 'S' and pa.tiponormalizacion = 'Normal' and ra.valor::decimal<> pa.valornormal) or 
               (ra.valor::decimal>pa.rangohasta and pa.normalizable = 'S' and pa.tiponormalizacion = 'Normal' and ra.valor::decimal<> pa.valornormal) 
               then '✘ fuera de rango' else null end
          else null end as obs
     from relatr ra inner join prodatr pa on pa.atributo=ra.atributo and pa.producto=ra.producto
          inner join atributos a on a.atributo=ra.atributo
     where ra.producto = p_producto and ra.atributo = p_atributo 
       and (ra.periodo = p_periodo or ra.periodo=(select periodoanterior from periodos where periodo=p_periodo))
       and ra.valor is not null
     group by ra.valor, pa.rangodesde, pa.rangohasta, a.escantidad, pa.normalizable, pa.tiponormalizacion, pa.valornormal ;
$$;


--
-- Name: relatr_valor_valida_moneda_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.relatr_valor_valida_moneda_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vEsMoneda INTEGER = 0;
  vEsValido INTEGER = 0;
  vHacerElControl BOOLEAN = FALSE;
BEGIN
  SELECT 1 INTO vEsMoneda
    FROM cvp.prodatr
    WHERE producto = NEW.producto AND atributo = NEW.atributo AND tiponormalizacion = 'Moneda';
  IF TG_OP='INSERT'  THEN
    vHacerElControl = NEW.valor IS NOT NULL AND vEsMoneda = 1;
  ELSE
    vHacerElControl = NEW.valor IS NOT NULL AND OLD.valor IS DISTINCT FROM NEW.valor AND vEsMoneda = 1;
  END IF;    
  IF vhacerElControl THEN       
    SELECT 1 INTO vEsValido
      FROM cvp.monedas 
      WHERE moneda= NEW.valor;
    IF vEsValido is distinct from 1 THEN
      raise exception 'El valor ingresado "%" para el atributo no es una moneda [prod:%, atributo:%, inf:%, periodo:%]', 
                       new.valor, new.producto, new.atributo, new.informante, new.periodo;
      RETURN NULL;
    END IF; 
  END IF;  
  RETURN NEW;  
END;
$$;


--
-- Name: relatr_valor_valida_numerico_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.relatr_valor_valida_numerico_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vescantidad cvp.atributos.escantidad%type;
  vnormalizable cvp.prodatr.normalizable%type;
  vTipoDato cvp.atributos.TipoDato%type;
  vHacerElControl BOOLEAN = FALSE;
BEGIN
  
  IF TG_OP='INSERT'  THEN
    vHacerElControl = NEW.valor IS NOT NULL;
  ELSE
    vHacerElControl = NEW.valor IS NOT NULL AND OLD.valor IS DISTINCT FROM NEW.valor;
  END IF;    
  IF vhacerElControl THEN       
    SELECT a.esCantidad, p.Normalizable, a.TipoDato INTO vescantidad, vnormalizable, vTipoDato
      FROM cvp.prodatr p JOIN cvp.atributos a ON a.atributo= p.atributo 
      WHERE p.producto= NEW.producto AND p.atributo= NEW.atributo;
    IF (vesCantidad='S' OR vNormalizable='S' AND vTipoDato='N') AND NOT comun.es_numero(NEW.valor) THEN
      raise exception 'El valor ingresado "%" para el atributo no es un número (o tiene una coma en vez de punto) [prod:%, atributo:%, inf:%, periodo:%]', 
                       new.valor, new.producto, new.atributo, new.informante, new.periodo;
      RETURN NULL;
    END IF; 
  END IF;  
  RETURN NEW;  
END;
$$;


--
-- Name: relpre_es_seleccionado(text, text, integer, integer, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.relpre_es_seleccionado(p_periodo text, p_producto text, p_observacion integer, p_informante integer, p_visita integer) RETURNS integer
    LANGUAGE sql STABLE
    AS $$
  select sp.sel_nro
    from selprod sp 
       inner join selprodatr spa on sp.producto=spa.producto and sp.sel_nro=spa.sel_nro
       left join (select * 
                    from relAtr 
                    where periodo=p_periodo 
                      and producto=p_producto 
                      and observacion=p_observacion 
                      and informante=p_informante 
                      and visita=p_visita
                  ) atr on atr.atributo=spa.atributo
    where sp.producto=p_producto
    group by sp.sel_nro,sp.descripcion,sp.proveedor,sp.cantidad
    having count(case when 
        case when spa.atributo=13 
          then (select comun.cadena_normalizar(destino) 
                  from dicprodatr d 
                  where d.producto=spa.producto and d.atributo=spa.atributo and d.origen=atr.valor) 
          else comun.cadena_normalizar(atr.valor) end
          =spa.valor then 1 else null end)=count(*)
$$;


--
-- Name: relpre_validacion_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.relpre_validacion_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vespositivo cvp.tipopre.espositivo%type;
  vactivo cvp.tipopre.activo%type;
BEGIN
  IF new.tipoprecio IS NULL AND new.precio IS NOT NULL THEN
    RAISE EXCEPTION 'TipoPrecio sin dato';
    RETURN NULL;
  ELSIF new.tipoprecio IS NOT NULL THEN
    SELECT espositivo, activo INTO vespositivo, vactivo
      FROM cvp.tipopre
      WHERE tipoprecio=new.tipoprecio;
    IF vactivo = 'N' THEN
      RAISE EXCEPTION 'Tipo de precio inválido';
      RETURN NULL;
    END IF;
    IF vespositivo='S' AND new.precio IS NULL  THEN
      RAISE EXCEPTION 'TipoPrecio indica que debe ingresar precio>0';
      RETURN NULL;
    ELSIF vespositivo='N' AND new.precio IS NOT NULL THEN 
      RAISE EXCEPTION 'TipoPrecio indica que precio debe quedar sin valor';
      RETURN NULL;
    END IF; 
    IF vespositivo='N' AND new.cambio='C' THEN
      RAISE EXCEPTION 'No puede haber C en Cambio cuando Tipoprecio no es positivo';
      RETURN NULL;
    END IF;    
  END IF;
  RETURN NEW;
END;
$$;


--
-- Name: relvis_tarea_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.relvis_tarea_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
 DECLARE
   vhay INTEGER;
BEGIN
  IF NEW.tarea IS NOT NULL  THEN
      SELECT 1 INTO vhay
        FROM cvp.tareas
        WHERE tarea= NEW.tarea;
        
      IF vHay IS NULL THEN
        RAISE EXCEPTION 'Tarea % Inexistente ',new.tarea;
        RETURN NULL;
      END IF;  
    END IF;    
 
  RETURN NEW;
END;
$$;


--
-- Name: res_cuadro_i(text, text, integer, text, boolean, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_i(parametro1 text, p_periodo text, parametro3 integer, parametro4 text, pponercodigos boolean, pcantdecimales integer, p_separador text) RETURNS SETOF cvp.res_col3
    LANGUAGE plpgsql
    AS $$
declare
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';

begin
  return query select 0::bigint,'anchos'::text,'auto'::text,'auto'::text,vAnchoNumeros;

  return query select 1::bigint,'U2.R'::text,parametro1::text,null::text, devolver_mes_anio(p_periodo)||' *'::text;
  return query select row_number() over (order by i.grupo)+100,
          case when i.nivel=0 then 'N.2n' when pPonerCodigos then 'D11n' else 'D.2n' end as formato_renglon,
          case when pPonerCodigos  and i.nivel<>0 then
                    CASE WHEN substr(i.grupo,2,1)::integer <1 
                      THEN substr(i.grupo,3)::text 
                      ELSE substr(i.grupo,2)::text END
                 else null end as grupo,
          overlay(lower(nombregrupo) placing upper(substr(nombregrupo,1,1)) from 1 for 1)::text,
          replace(round(i.incidenciaredondeada::numeric,case when i.nivel=0 then 1 else pCantDecimales end)::text,'.',p_separador)::text
          --replace(round(i.incidencia::numeric,case when i.nivel=0 then 1 else case when parametro4 in ('S', 'R')then 1 else 2 end end)::text,'.',',')::text
                 from calgru i
                 inner join grupos g on i.agrupacion=g.agrupacion and i.grupo=g.grupo
                 where i.agrupacion= parametro4  --vAgrupacionPrincipal
                   and i.nivel <= parametro3
                   and i.calculo=0
                   and i.periodo=p_Periodo;
end;
$$;


--
-- Name: res_cuadro_ii(text, text, integer, text, boolean, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_ii(parametro1 text, p_periodo text, parametro3 integer, parametro4 text, pponercodigos boolean, p_cuadro text, p_separador text) RETURNS SETOF cvp.res_col4
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
begin
  
  select c.periodoanterior, c.calculoanterior, cd.agrupacionprincipal  
    into vMesanterior, vCalculoAnterior, vAgrupacionPrincipal
    from Calculos c, Calculos_def cd    
    where c.periodo=p_periodo AND c.calculo=0 AND c.calculo= cd.calculo;
    
  return query select 0::bigint,
                      'anchos'::text,
                      'auto'::text,
                      'auto'::text,
                      vAnchoNumeros,
                      vAnchoNumeros;
  return query select 1::bigint,
                      'U5.6.'::text,
                      parametro1::text,
                      null::text, 
                      devolver_mes_anio(p_periodo)::text,
                      null::text;
  return query select 2::bigint,
                     'P..RR'::text,
                     null::text,
                     null::text, 
                     'Mensual'::text,
                     'Interanual'::text;
  return query select row_number() over (order by cg.grupo)+100,
                      case when (cg.nivel=0 and p_cuadro in ('1a')) then 'N.2nn' 
                           when pPonerCodigos then 'D11nn' else 'D.2nn' end as formato_renglon,
                      case when pPonerCodigos and cg.nivel<>0 then case when substr(cg.grupo,2,1)::integer <1 
                                                                        then substr(cg.grupo,3)::text 
                                                                        else substr(cg.grupo,2)::text end
                           else null end as grupo, 
                      overlay(lower(nombregrupo) placing upper(substr(nombregrupo,1,1)) from 1 for 1)::text,
                      replace(cg.incidenciaredondeada::text,'.',p_separador)::text, 
                      replace(cg.incidenciainteranualredondeada::text,'.',p_separador)::text                      
                 from calGru_vw cg 
                 inner join grupos g on g.agrupacion=cg.agrupacion and g.grupo=cg.grupo
                 left join cuagru on cg.agrupacion = cuagru.agrupacion and cg.grupo = cuagru.grupo and cuagru.cuadro = p_cuadro                                     
                 where cg.agrupacion= parametro4
                   and cg.nivel <= parametro3
                   and cg.calculo=0
                   and cg.periodo=p_Periodo; 
end;
$$;


--
-- Name: res_cuadro_iivv(text, text, integer, text, boolean, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_iivv(parametro1 text, p_periodo text, parametro3 integer, parametro4 text, pponercodigos boolean, p_cuadro text, p_separador text) RETURNS SETOF cvp.res_col8
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
begin
  
  select c.periodoanterior, c.calculoanterior, cd.agrupacionprincipal  
    into vMesanterior, vCalculoAnterior, vAgrupacionPrincipal
    from Calculos c, Calculos_def cd    
    where c.periodo=p_periodo AND c.calculo=0 AND c.calculo= cd.calculo;
    
  return query select 0::bigint,'anchos'::text,'auto'::text,'auto'::text,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros;
  --return query select 1::bigint,'E4.2.2.'::text,parametro1::text,null::text
  return query select 1::bigint,case when p_cuadro='1' then 'U5.86.7...' else 'U9..6.7...' end::text,parametro1::text,null::text
                 , case when p_cuadro ='1' then 'Ponderación por división' else null end::text, 'Índice ¹'::text
                 , null::text,'Variación porcentual'||case when p_cuadro in ('1','A2bis') then ' *' else '' end::text
                 , null::text, null::text;
  return query select 2::bigint,'P...RRRRR'::text,null::text,null::text, null::text
                 , devolver_mes_anio(p_periodo)||' *'::text 
                 , devolver_mes_anio(vMesAnterior),'Respecto del mes anterior'::text --'Respecto de '||devolver_mes_anio(vMesAnterior)::text
                 , 'Acumulado Anual'::text, 'Interanual'::text;
  return query select row_number() over (order by cg.grupo)+100,
                      case when (cg.nivel=0 and p_cuadro ='1') then 'N.3.nnnnn'  
                           when (cg.nivel=0 and p_cuadro in ('2', 'A2','8')) then 'N.2nnnnnn' 
                           when pPonerCodigos then 'D11nnnnnn' else 'D.2nnnnnn' end as formato_renglon,
                      case when pPonerCodigos and cg.nivel<>0 then case when p_cuadro not like 'A2%' then 
                                                                     case when substr(cg.grupo,2,1)::integer <1 
                                                                        then substr(cg.grupo,3)::text 
                                                                        else substr(cg.grupo,2)::text end
                                                                    else cg.grupo::text end
                        else null end as grupo, 
                      overlay(lower(nombregrupo) placing upper(substr(nombregrupo,1,1)) from 1 for 1)::text,
                      case when p_cuadro='1' then replace(round((g.ponderador*100)::numeric,2)::text,'.',',')::text||' %'::text else null::text end,
                      replace(round(cg.indiceRedondeado::numeric,2)::text,'.',p_separador)::text,
                      replace(round(co.indiceRedondeado::numeric,2)::text,'.',p_separador)::text,
                      case when co.indiceRedondeado=0 then null 
                        else replace(round((cg.indiceRedondeado/co.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end,
                      case when ca.indiceRedondeado=0 then null 
                        else replace(round((cg.indiceRedondeado/ca.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end,
                      case when cb.indiceRedondeado=0 then null 
                        else replace(round((cg.indiceRedondeado/cb.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end    
                 from calGru cg 
                 inner join grupos g on g.agrupacion=cg.agrupacion and g.grupo=cg.grupo
                 left join calgru co on co.agrupacion=cg.agrupacion and co.grupo=cg.grupo and co.calculo=vCalculoAnterior and co.periodo=vMesAnterior
                 left join calgru ca on ca.agrupacion=cg.agrupacion and ca.grupo=cg.grupo and ca.calculo=cg.calculo 
                                     and ca.periodo =(('a' || (substr(cg.periodo, 2, 4)::integer - 1)) ||'m12')
                 left join calgru cb on cb.agrupacion=cg.agrupacion and cb.grupo=cg.grupo and cb.calculo=cg.calculo 
                                     and cb.periodo =periodo_igual_mes_anno_anterior(cg.periodo)
                 left join cuagru on cg.agrupacion = cuagru.agrupacion and cg.grupo = cuagru.grupo and cuagru.cuadro = p_cuadro                                     
                 where cg.agrupacion= parametro4
                   and cg.nivel <= parametro3
                   and cg.calculo=0
                   and cg.periodo=p_Periodo
                   and (p_cuadro <> 'A2bis' or cuagru.cuadro is not null); 
  -- */
end;
$$;


--
-- Name: res_cuadro_ivebs(text, text, integer, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_ivebs(parametro1 text, p_periodo_hasta text, parametro3 integer, parametro4 text, p_periodo_desde text, p_separador text) RETURNS SETOF cvp.res_col10
    LANGUAGE plpgsql
    AS $$
declare
    vAnchoNumeros text:='100';
    v_periodo_desde text;
begin
  
  --v_periodo_desde:=cvp.moverperiodos(p_periodo_hasta, -22);
  --IF v_periodo_desde < 'a2011m04' THEN
  --  v_periodo_desde :='a2011m04';
  --END IF;
  v_periodo_desde := p_periodo_desde;
  return query select 0::bigint,'anchos'::text,'auto'::text,'auto'::text,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros, vAnchoNumeros, vAnchoNumeros;
  return query select 1::bigint, case when parametro4='S' then 'U5.7...7...'::text else 'U5.0...0...'::text end ,'Mes'::text, null::text,'Indice¹'::text,null::text, null::text, null::text,'Variación porcentual'::text,null::text, null::text, null::text;
  return query select 2::bigint, case when parametro4='S' then 'P..RRR.RRR.'::text else 'P..RRRRRRRR'::text end, null::text,null::text, 
               'Nivel General'::text, case when parametro4='S' then 'Bienes'::text  else 'Estacionales'::text end, 
                case when parametro4='S' then 'Servicios'::text else 'Regulados'::text end, 
                case when parametro4='S' then null::text  else 'Resto'::text end,
                'Nivel General'::text,
                case when parametro4='S' then 'Bienes'::text  else 'Estacionales'::text end, 
                case when parametro4='S' then 'Servicios'::text else 'Regulados'::text end, 
                case when parametro4='S' then null::text  else 'Resto'::text end;
  return query select row_number() over (order by c.periodo)+100, 
                 case when parametro4='S' then 'D11nnn.nnn.'::text  else 'D11nnnnnnnn'::text  end as formato_renglon,
                 --cvp.devolver_mes(c.periodo), case when p_periodo_hasta =c.periodo then substr(c.periodo,2,4)||'*' else substr(c.periodo,2,4) end, 
                 cvp.devolver_mes_anio(c.periodo)||case when p_periodo_hasta =c.periodo then '*' else '' end,''::text, 
                 replace(round(c.indiceRedondeado::numeric,2)::text,'.',p_separador)::text, 
                 replace(round(b.indiceRedondeado::numeric,2)::text,'.',p_separador)::text  as indiceRedondeadobienes, 
                 replace(round(s.indiceRedondeado::numeric,2)::text,'.',p_separador)::text  as indiceRedondeadoserv,
                 case when parametro4='S' then null::text else  
                   replace(round(r.indiceRedondeado::numeric,2)::text,'.',p_separador)::text  end as indiceRedondeadoresto,  
                 case when co.indiceRedondeado=0 or c.periodo=v_periodo_desde then '...' 
                      else replace(round((c.indiceRedondeado/co.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end,  
                 case when bo.indiceRedondeado=0 or c.periodo=v_periodo_desde then '...' 
                      else replace(round((b.indiceRedondeado/bo.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end,
                 case when so.indiceRedondeado=0 or c.periodo=v_periodo_desde then '...' 
                      else replace(round((s.indiceRedondeado/so.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end,
                 case when parametro4='S' then null::text else    
                 case when ro.indiceRedondeado=0 or c.periodo=v_periodo_desde then '...' 
                      else replace(round((r.indiceRedondeado/ro.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end  end 
                 from calgru c --nivel general
                 join calgru b on c.agrupacion=b.agrupacion and c.calculo=b.calculo and c.periodo=b.periodo  
                 join calgru s on c.agrupacion=s.agrupacion and c.calculo=s.calculo and c.periodo=s.periodo
                 join calgru r on c.agrupacion=r.agrupacion and c.calculo=r.calculo and c.periodo=r.periodo
                 join calculos ca  on ca.periodo=c.periodo and ca.calculo=c.calculo --pk verificada
                 left join calgru co on co.agrupacion=c.agrupacion and co.grupo=c.grupo and co.calculo=ca.calculoanterior and co.periodo=ca.periodoanterior 
                 left join calgru bo on bo.agrupacion=b.agrupacion and bo.grupo=b.grupo and bo.calculo=ca.calculoanterior and bo.periodo=ca.periodoanterior
                 left join calgru so on so.agrupacion=s.agrupacion and so.grupo=s.grupo and so.calculo=ca.calculoanterior and so.periodo=ca.periodoanterior 
                 left join calgru ro on ro.agrupacion=r.agrupacion and ro.grupo=r.grupo and ro.calculo=ca.calculoanterior and ro.periodo=ca.periodoanterior 
                 where c.agrupacion=parametro4  and c.calculo=0 and c.periodo <= p_periodo_hasta and c.periodo >= v_periodo_desde and c.nivel=parametro3  
                   and b.grupo=parametro4||'1' 
                   and s.grupo=parametro4||'2'
                   and (case when c.agrupacion='S' then r.grupo='S1' else r.grupo='R3' end) ;    
end;
$$;


--
-- Name: res_cuadro_matriz_canasta(text, text, text, boolean, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_canasta(parametro1 text, p_periodo text, parametro4 text, pponercodigos boolean, p_hogar text, p_periododesde text, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    v_formato_renglon text:=case when pPonerCodigos then 'DW1n'::text else 'D.Wn'::text end;
    v_formato_renglon_cabezal text:=case when pPonerCodigos then 'E111'::text else 'E1.1'::text end;
    v_linea_alimentaria text:=case when parametro4 = 'B' then 'CA' when parametro4 = 'D' then 'LI' else '' end;
    v_linea_total text:=case when parametro4 = 'B' then 'CT' when parametro4 = 'D' then 'LP' else '' end;
    v_basica text:=case when parametro4 <> 'B' then 'Básica ' else '' end;

begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      case when pPonerCodigos then 'Cód'::text else 'Componentes de las diferentes canastas'::text end,
                      case when pPonerCodigos then 'Componentes de las diferentes canastas'::text else null end,
                      null::text,
                      null::text;
  return query  SELECT v_formato_renglon::text as formato_renglon,
                  case when pPonerCodigos then v.grupo::text else null end as lateral1,
                  CASE WHEN v.nivel = 1 THEN v.nombrecanasta 
                  ELSE v.nombregrupo END ::text as lateral2,
                  devolver_mes_anio(v.periodo)||CASE WHEN v.periodo=p_periodo THEN '***' ELSE '' END as cabezal1,
                  replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador) as celda
                  FROM valorizacion_canasta_cuadros v --left join grupos g on v.agrupacion= g.agrupacion and v.grupo = g.grupo
                  WHERE v.agrupacion = parametro4 /*B*/
                        and v.calculo=0
                        and v.periodo between p_periododesde and p_periodo /* TIENE QUE SER PARAMETRO p_periodo*/
                        and v.hogar = p_hogar --tiene que ser parametro
                  ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, v.periodo, comun.para_ordenar_numeros(v.hogar);
  return query  SELECT v_formato_renglon::text as formato_renglon, 
                  case when pPonerCodigos then v.grupo::text else null end as lateral1,
                  'Valor diario de la canasta '||v_basica||'alimentaria ('||v_linea_alimentaria||')**'::text as lateral2,
                  devolver_mes_anio(v.periodo)||CASE WHEN v.periodo=p_periodo THEN '***' ELSE '' END as cabezal1,
                  replace(round((v.valorhoggru::numeric/30),2)::text,'.',p_separador) as celda
                  FROM valorizacion_canasta_cuadros v --left join grupos g on v.agrupacion= g.agrupacion and v.grupo = g.grupo
                  WHERE v.agrupacion = parametro4 /*B*/
                    and v.calculo=0
                    and v.periodo between p_periododesde and p_periodo /* TIENE QUE SER PARAMETRO p_periodo*/
                    and v.hogar = p_hogar --tiene que ser parametro
                    and v.grupo in ('B1','D1') --es la canasta alimentaria
                  ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, v.periodo, comun.para_ordenar_numeros(v.hogar);
  return query  SELECT v_formato_renglon::text as formato_renglon, 
                  case when pPonerCodigos then v.grupo::text else null end as lateral1,
                  'Valor diario de la canasta '||v_basica||'total ('||v_linea_total||')**'::text as lateral2,
                  devolver_mes_anio(v.periodo)||CASE WHEN v.periodo=p_periodo THEN '***' ELSE '' END as cabezal1,
                  replace(round((v.valorhoggru::numeric/30),2)::text,'.',p_separador) as celda
                  FROM valorizacion_canasta_cuadros v --left join grupos g on v.agrupacion= g.agrupacion and v.grupo = g.grupo
                          WHERE v.agrupacion = parametro4 /*B*/
                            and v.calculo=0
                            and v.periodo between p_periododesde and p_periodo /* TIENE QUE SER PARAMETRO p_periodo*/
                            and v.hogar = p_hogar --tiene que ser parametro
                            and v.grupo in ('B4','D5') --es la canasta total
                  ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, v.periodo, comun.para_ordenar_numeros(v.hogar);
end;
$$;


--
-- Name: res_cuadro_matriz_canasta_var(text, text, text, boolean, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_canasta_var(parametro1 text, p_periodo text, parametro4 text, pponercodigos boolean, p_hogar text, p_periododesde text, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    v_formato_renglon text:=case when pPonerCodigos then 'DW1n'::text else 'D.Wn'::text end;
    v_formato_renglon_cabezal text:=case when pPonerCodigos then 'E111'::text else 'E1.1'::text end;

begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      case when pPonerCodigos then 'Cód'::text else 'Componentes de las diferentes canastas'::text end,
                      case when pPonerCodigos then 'Componentes de las diferentes canastas'::text else null end,
                      null::text,
                      null::text;
  return query  SELECT v_formato_renglon::text as formato_renglon,
                  case when pPonerCodigos then v.grupo::text else null end as lateral1,
                  CASE WHEN v.nivel = 1 THEN v.nombrecanasta 
                  ELSE v.nombregrupo END ::text as lateral2,
                  devolver_mes_anio(v.periodo)||CASE WHEN v.periodo=p_periodo THEN '***' ELSE '' END as cabezal1,
                  case when v1.valorhoggru = 0 then '0'||p_separador||'0'::text else
                  replace(round((round(v.valorhoggru::numeric,2)/round(v1.valorhoggru::numeric,2)*100-100),1)::text,'.',p_separador) end as celda
                  FROM (SELECT * FROM valorizacion_canasta_cuadros WHERE periodo = p_periodo) v
                    LEFT JOIN (SELECT * FROM valorizacion_canasta_cuadros WHERE periodo = p_periododesde) v1
                      on v.calculo = v1.calculo and v.hogar = v1.hogar and v.agrupacion = v1.agrupacion and v.grupo = v1.grupo 
                  WHERE --v.periodo = p_periodo
                        --and v1.periodo = p_periododesde and 
                        v.agrupacion = parametro4
                        and v.calculo=0
                        and v.hogar = p_hogar --tiene que ser parametro
                  ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, v.periodo, comun.para_ordenar_numeros(v.hogar);
  return query  SELECT v_formato_renglon::text as formato_renglon, 
                  case when pPonerCodigos then v.grupo::text else null end as lateral1,
                  'Valor diario de la canasta Básica alimentaria (LI)**'::text as lateral2,
                  devolver_mes_anio(v.periodo)||CASE WHEN v.periodo=p_periodo THEN '***' ELSE '' END as cabezal1,
                  case when v1.valorhoggru = 0 then '0'||p_separador||'0'::text else
                  replace(round((round(v.valorhoggru::numeric/30,2)/round(v1.valorhoggru::numeric/30,2)*100-100),1)::text,'.',p_separador) end as celda
                  FROM (SELECT * FROM valorizacion_canasta_cuadros WHERE periodo = p_periodo) v
                    LEFT JOIN (SELECT * FROM valorizacion_canasta_cuadros WHERE periodo = p_periododesde) v1 
                      on v.calculo = v1.calculo and v.hogar = v1.hogar and v.agrupacion = v1.agrupacion and v.grupo = v1.grupo
                  WHERE --v.periodo = p_periodo
                    --and v1.periodo =  p_periododesde and 
                    v.agrupacion = parametro4
                    and v.calculo=0
                    and v.hogar = p_hogar --tiene que ser parametro
                    and v.grupo in ('B1','D1') --es la canasta alimentaria
                  ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, v.periodo, comun.para_ordenar_numeros(v.hogar);
  return query  SELECT v_formato_renglon::text as formato_renglon, 
                  case when pPonerCodigos then v.grupo::text else null end as lateral1,
                  'Valor diario de la canasta Básica total (LP)**'::text as lateral2,
                  devolver_mes_anio(v.periodo)||CASE WHEN v.periodo=p_periodo THEN '***' ELSE '' END as cabezal1,
                  case when v1.valorhoggru = 0 then '0'||p_separador||'0'::text else
                  replace(round((round(v.valorhoggru::numeric/30,2)/round(v1.valorhoggru::numeric/30,2)*100-100),1)::text,'.',p_separador) end as celda
                  FROM (SELECT * FROM valorizacion_canasta_cuadros WHERE periodo = p_periodo) v
                    LEFT JOIN (SELECT * FROM valorizacion_canasta_cuadros WHERE periodo = p_periododesde) v1 
                      on v.calculo = v1.calculo and v.hogar = v1.hogar and v.agrupacion = v1.agrupacion and v.grupo = v1.grupo
                          WHERE  --v.periodo = p_periodo
                            --and v1.periodo =  p_periododesde and 
                            v.agrupacion = parametro4
                            and v.calculo=0
                            and v.hogar = p_hogar --tiene que ser parametro
                            and v.grupo in ('B4','D5') --es la canasta total
                  ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, v.periodo, comun.para_ordenar_numeros(v.hogar);
end;
$$;


--
-- Name: res_cuadro_matriz_hogar(text, text, text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_hogar(parametro1 text, p_periodo text, parametro4 text, parametro6 integer, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
    v_periodo_desde text:='a2012m01';
    v_periodo_hasta text:=p_periodo;
    v_formato_renglon text:='DW1n'; -- solo pongo letras para: el tipo de renglón, las columas laterales y una más para todos los datos.
    v_formato_renglon_cabezal text:='E111'; -- idem
begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      'Valorización'::text, 
                      'Cód'::text,
                      null::text,
                      null::text;
  return query select v_formato_renglon::text as formato_renglon,
                      CASE WHEN v.nivel = 1 THEN v.nombrecanasta 
                                            ELSE v.nombregrupo END ::text as lateral1,
                      v.grupo::text as lateral2,
                      v.hogar::text as cabezal1,
                      replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador) as celda
                 from valorizacion_canasta_cuadros v --inner join grupos g on v.agrupacion = g.agrupacion and v.grupo = g.grupo
                 where v.agrupacion = parametro4
                   and v.calculo=0
                   and v.periodo = p_periodo
                   and replace(replace(v.hogar,'5b','5.1'),'Hogar ','')::numeric < parametro6
                 ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, comun.para_ordenar_numeros(v.hogar);
end;
$$;


--
-- Name: res_cuadro_matriz_hogar(text, text, text, text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_hogar(parametro1 text, p_periodo text, parametro4 text, p_cuadro text, parametro6 integer, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
    v_periodo_desde text:='a2012m01';
    v_periodo_hasta text:=p_periodo;
    v_formato_renglon text:='DW1n'; -- solo pongo letras para: el tipo de renglón, las columas laterales y una más para todos los datos.
    v_formato_renglon_cabezal text:='E111'; -- idem
begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      'Valorización'::text, 
                      'Cód'::text,
                      null::text,
                      null::text;
  return query select v_formato_renglon::text as formato_renglon,
                      CASE WHEN v.nivel = 1 THEN v.nombrecanasta 
                                            ELSE v.nombregrupo END ::text as lateral1,
                      v.grupo::text as lateral2,
                      v.hogar::text as cabezal1,
                      replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador) as celda
                 from valorizacion_canasta_cuadros v --inner join grupos g on v.agrupacion = g.agrupacion and v.grupo = g.grupo
                 where ((p_cuadro <> 'CC' and v.agrupacion = parametro4) or (p_cuadro = 'CC' and ((v.agrupacion = 'D' and v.grupo in ('D1', 'D5')) OR (v.agrupacion = parametro4 and v.grupo in ('A1', 'A5'))))) 
                   and v.calculo=0
                   and v.periodo = p_periodo
                   and replace(replace(v.hogar,'5b','5.1'),'Hogar ','')::numeric < parametro6
                 ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, comun.para_ordenar_numeros(v.hogar);
end;
$$;


--
-- Name: res_cuadro_matriz_hogar_per(text, text, text, text, integer, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_hogar_per(parametro1 text, p_periodo text, parametro4 text, p_cuadro text, parametro6 integer, p_periodo_desde text, p_separador text) RETURNS SETOF cvp.res_mat2
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
    v_periodo_desde text:=p_periodo_desde;
    v_periodo_hasta text:=p_periodo;
    v_formato_renglon text:='DW11n'; -- solo pongo letras para: el tipo de renglón, las columas laterales y una más para todos los datos.
    v_formato_renglon_cabezal text:='E1111'; -- idem
begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      'Mes'::text, 
                      'Valorización'::text, 
                      'Cód'::text,
                      null::text,
                      null::text;
  return query select v_formato_renglon::text as formato_renglon,
                      cvp.devolver_mes_anio(periodo)::text as lateral1,
                      CASE WHEN v.nivel = 1 THEN v.nombrecanasta 
                                            ELSE v.nombregrupo END ::text as lateral2,
                      v.grupo::text as lateral3,
                      v.hogar::text as cabezal1,
                      replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador) as celda
                 from valorizacion_canasta_cuadros v --inner join grupos g on v.agrupacion = g.agrupacion and v.grupo = g.grupo
                 where ((p_cuadro <> 'CC' and v.agrupacion = parametro4) or (p_cuadro = 'CC' and ((v.agrupacion = 'D' and v.grupo in ('D1', 'D5')) OR (v.agrupacion = parametro4 and v.grupo in ('A1', 'A5'))))) 
                   and v.calculo=0
                   and v.periodo between v_periodo_desde and v_periodo_hasta
                   and replace(replace(v.hogar,'5b','5.1'),'Hogar ','')::numeric < parametro6
                 ORDER BY v.periodo, v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, comun.para_ordenar_numeros(v.hogar);
end;
$$;


--
-- Name: res_cuadro_matriz_hogar_var(text, text, text, integer, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_hogar_var(parametro1 text, p_periodo text, parametro4 text, parametro6 integer, p_periododesde text, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
    v_periodo_desde text:='a2012m01';
    v_periodo_hasta text:=p_periodo;
    v_formato_renglon text:='DW1n'; -- solo pongo letras para: el tipo de renglón, las columas laterales y una más para todos los datos.
    v_formato_renglon_cabezal text:='E111'; -- idem
begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      'Valorización'::text, 
                      'Cód'::text,
                      null::text,
                      null::text;
  return query select v_formato_renglon::text as formato_renglon,
                      CASE WHEN v.nivel = 1 THEN v.nombrecanasta 
                                            ELSE v.nombregrupo END ::text as lateral1,
                      v.grupo::text as lateral2,
                      v.hogar::text as cabezal1,
                      case when v1.valorhoggru = 0 then '0'||p_separador||'0'::text else
                      replace(round((round(v.valorhoggru::numeric,2)/round(v1.valorhoggru::numeric,2)*100-100),1)::text,'.',p_separador) end as celda
                 from (select * from valorizacion_canasta_cuadros where periodo = p_periodo) v --inner join grupos g on v.agrupacion = g.agrupacion and v.grupo = g.grupo
                      left join (select * from valorizacion_canasta_cuadros where periodo = p_periododesde) v1 on v.calculo = v1.calculo and v.agrupacion = v1.agrupacion and v.grupo = v1.grupo and v.hogar = v1.hogar 
                 where v.agrupacion = parametro4
                   and v.calculo=0
                   --and v.periodo = p_periodo
                   --and v1.periodo = p_periododesde
                   and replace(replace(v.hogar,'5b','5.1'),'Hogar ','')::numeric < parametro6
                 ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, comun.para_ordenar_numeros(v.hogar);
end;
$$;


--
-- Name: res_cuadro_matriz_i(text, text, integer, text, boolean, text, integer, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_i(parametro1 text, p_periodo text, parametro3 integer, parametro4 text, pponercodigos boolean, p_cuadro text, pcantdecimales integer, pdesde text, porden text, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
    v_periodo_desde text:=pdesde;
    --v_formato_renglon text:=case when pPonerCodigos then 'DW1n'::text else 'D.W2n'::text end;
    --v_formato_renglon_cabezal text:=case when pPonerCodigos then 'E111'::text else 'E1.21'::text end;   
    v_formato_renglon text:=case when pPonerCodigos then 'DW1n'::text else 'D.Wn'::text end;
    v_formato_renglon_cabezal text:=case when pPonerCodigos then 'E2.1'::text else 'E2.1'::text end;

    
begin
  return query select 'anchos'::text as formato_renglon,'auto'::text,'auto'::text,null::text,vAnchoNumeros;
  return query select v_formato_renglon_cabezal::text as formato_renglon,parametro1::text,null::text, null::text, null::text;
  return query select formato_renglon, grupo, nombregrupo, nombreperiodo, case when p_cuadro in ('A2bish', 'A2bish_con', 'A2bish_tot') then indicered else incidenciared end 
                from (
                select case when porden = 'desc' then row_number() over (order by periodo desc ,q.ordenpor)+100 
                         else row_number() over (order by periodo, q.ordenpor)+100 end,
                    q.formato_renglon, q.grupo, q.nombregrupo,
                    q.nombreperiodo, q.incidenciared, q.indicered
                 from 
                 (
          select
          case when i.nivel=0 then 'N.2n' when pPonerCodigos then 'D11n' else 'D.2n' end as formato_renglon,
          case when pPonerCodigos and i.nivel<>0 then 
            case when p_cuadro like 'A2%' then i.grupo::text 
              else CASE WHEN substr(i.grupo,2,1)::integer <1 
                      THEN substr(i.grupo,3)::text 
                   ELSE substr(i.grupo,2)::text END
              end                   
          else null end as grupo, coalesce(cuagru.orden::text,i.grupo) as ordenpor, i.periodo,
          overlay(lower(nombregrupo) placing upper(substr(nombregrupo,1,1)) from 1 for 1)::text as nombregrupo,
          devolver_mes_anio(i.periodo)||case when i.periodo=p_Periodo then ' *'::text else ''::text end as nombreperiodo,
          CASE WHEN p_cuadro = '3h_ia' THEN
            replace(round(i.incidenciainteranualredondeada::numeric,case when i.nivel=0 then 1 else pCantDecimales end)::text,'.',p_separador)::text
          ELSE
            replace(round(i.incidenciaredondeada::numeric,case when i.nivel=0 then 1 else pCantDecimales end)::text,'.',p_separador)::text 
          END as incidenciared,
          replace(round(i.indice::numeric,pCantDecimales)::text,'.',p_separador)::text as indicered
                 from (select * from calgru_vw order by periodo, calculo, agrupacion, grupo) i
                 inner join grupos g on i.agrupacion=g.agrupacion and i.grupo=g.grupo
                 left join cuagru on i.agrupacion = cuagru.agrupacion and i.grupo = cuagru.grupo and cuagru.cuadro = p_cuadro
                 where i.agrupacion= parametro4
                   and i.nivel <= parametro3
                   and i.calculo=0
                   and i.periodo between v_periodo_desde and p_Periodo
                   and (p_cuadro not in ('A2bish', 'A2bish_con') or cuagru.cuadro is not null)
                   order by i.periodo, CASE WHEN p_cuadro = 'A2bish_con' THEN cuagru.orden::text ELSE i.grupo END) as q) as x;
end;
$$;


--
-- Name: res_cuadro_matriz_ingreso(text, text, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_ingreso(parametro1 text, p_periodo text, p_hogar text, p_periododesde text, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    v_formato_renglon text:='DW1n'; -- solo pongo letras para: el tipo de renglón, las columas laterales y una más para todos los datos.
    v_formato_renglon_cabezal text:='E111'; -- idem


begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      'Mes'::text, 
                      'Estrato'::text, 
                      null::text,
                      null::text;

  return query  SELECT formato_renglon, lateral1, lateral2, cabezal1, celda from (
                SELECT v_formato_renglon::text as formato_renglon, x.orden, v.periodo,
                  devolver_mes_anio(v.periodo)||CASE WHEN v.periodo=p_periodo THEN '***' ELSE '' END as lateral1,
                  X.nombre as lateral2,
                  'Mínimo' as cabezal1,
                  CASE WHEN nombre = 'En situación de indigencia'           THEN '0'||p_separador||'00'::text
                       WHEN nombre = 'En situación de pobreza no indigente' THEN replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'No pobres vulnerables'                THEN replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'Sector medio frágil'                  THEN replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'Sector medio - "Clase media"'         THEN replace(round((1.25*round(v.valorhoggru::numeric,2))::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'Sectores acomodados'                  THEN replace(round((4*   round(v.valorhoggru::numeric,2))::numeric,2)::text,'.',p_separador) end as celda
                  FROM 
                    (SELECT 1 as orden, 'En situación de indigencia'           AS nombre,	'D1' as grupominimo,	'D1' as grupomaximo UNION
                    SELECT  2 as orden, 'En situación de pobreza no indigente' AS nombre,	'D1' as grupominimo,	'D5' as grupomaximo UNION
                    SELECT  3 as orden, 'No pobres vulnerables'                AS nombre, 	'D5' as grupominimo,	'A5' as grupomaximo UNION
                    SELECT  4 as orden, 'Sector medio frágil'                  AS nombre,	'A5' as grupominimo,	'A5' as grupomaximo UNION
                    SELECT  5 as orden, 'Sector medio - "Clase media"'         AS nombre,	'A5' as grupominimo,	'A5' as grupomaximo UNION
                    SELECT  6 as orden, 'Sectores acomodados'                  AS nombre, 	'A5' as grupominimo,	'A5' as grupomaximo) as X
                    left join valorizacion_canasta_cuadros v  on X.grupominimo = v.grupo 
                    left join valorizacion_canasta_cuadros v1 on v.periodo = v1.periodo /*and v.agrupacion = v1.agrupacion*/ and X.grupomaximo = v1.grupo
                               and v.calculo = v1.calculo and v.hogar = v1.hogar
                  WHERE v.agrupacion in ('A','D') 
                        and v.grupo in ('A1','A5', 'D1', 'D5')
                        and v.calculo=0
                        and v.periodo between p_periododesde and p_periodo /* TIENE QUE SER PARAMETRO p_periodo*/
                        and v.hogar = p_hogar --tiene que ser parametro
                Union
                SELECT v_formato_renglon::text as formato_renglon, x.orden, v.periodo,
                  devolver_mes_anio(v.periodo)||CASE WHEN v.periodo=p_periodo THEN '***' ELSE '' END as lateral1,
                  X.nombre as lateral2,
                  'Máximo' as cabezal1,
                  CASE WHEN nombre = 'En situación de indigencia'           THEN replace(round((v1.valorhoggru-0.01)::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'En situación de pobreza no indigente' THEN replace(round((v1.valorhoggru-0.01)::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'No pobres vulnerables'                THEN replace(round((v1.valorhoggru-0.01)::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'Sector medio frágil'                  THEN replace(round(((1.25*round(v1.valorhoggru::numeric,2))-0.01)::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'Sector medio - "Clase media"'         THEN replace(round(((4*   round(v1.valorhoggru::numeric,2))-0.01)::numeric,2)::text,'.',p_separador)
                       WHEN nombre = 'Sectores acomodados'                  THEN 'Mas'::text end as celda
                  FROM 
                    (SELECT 1 as orden, 'En situación de indigencia'           AS nombre,	'D1' as grupominimo,	'D1' as grupomaximo UNION
                    SELECT  2 as orden, 'En situación de pobreza no indigente' AS nombre,	'D1' as grupominimo,	'D5' as grupomaximo UNION
                    SELECT  3 as orden, 'No pobres vulnerables'                AS nombre, 	'D5' as grupominimo,	'A5' as grupomaximo UNION
                    SELECT  4 as orden, 'Sector medio frágil'                  AS nombre,	'A5' as grupominimo,	'A5' as grupomaximo UNION
                    SELECT  5 as orden, 'Sector medio - "Clase media"'         AS nombre,	'A5' as grupominimo,	'A5' as grupomaximo UNION
                    SELECT  6 as orden, 'Sectores acomodados'                  AS nombre, 	'A5' as grupominimo,	'A5' as grupomaximo) as X
                    left join valorizacion_canasta_cuadros v  on X.grupominimo = v.grupo 
                    left join valorizacion_canasta_cuadros v1 on v.periodo = v1.periodo /*and v.agrupacion = v1.agrupacion*/ and X.grupomaximo = v1.grupo
                               and v.calculo = v1.calculo and v.hogar = v1.hogar
                  WHERE v.agrupacion in ('A','D') 
                        and v.grupo in ('A1','A5', 'D1', 'D5')
                        and v.calculo=0
                        and v.periodo between p_periododesde and p_periodo /* TIENE QUE SER PARAMETRO p_periodo*/
                        and v.hogar = p_hogar --tiene que ser parametro
                  ) resp
                  ORDER BY periodo, orden, cabezal1 desc;
end;
$$;


--
-- Name: res_cuadro_matriz_linea(text, text, text, text, integer, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_linea(parametro1 text, p_periodo text, parametro4 text, p_cuadro text, parametro6 integer, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
    v_periodo_desde text:='a2012m01';
    v_periodo_hasta text:=p_periodo;
    v_formato_renglon text:='DW1n'; -- solo pongo letras para: el tipo de renglón, las columas laterales y una más para todos los datos.
    v_formato_renglon_cabezal text:='E111'; -- idem
begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      'Hogar'::text, 
                      'Descripción'::text,
                      null::text,
                      null::text;
  return query select v_formato_renglon::text as formato_renglon,
                      v.hogar::text as lateral1,
                      h.nombrehogar::text as lateral2, --v.grupo::text as lateral2,
                      CASE WHEN v.nivel = 1 THEN v.nombrecanasta 
                                            ELSE v.nombregrupo END ::text as cabezal1,
                      replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador) as celda
                 from valorizacion_canasta_cuadros v --inner join grupos g on v.agrupacion = g.agrupacion and v.grupo = g.grupo
                      inner join cvp.hogares h on v.hogar = h.hogar 
                 where --((p_cuadro <> 'LH' and v.agrupacion = parametro4) or (p_cuadro = 'LH' and ((v.agrupacion = 'D' and v.grupo in ('D1', 'D5')) OR (v.agrupacion = parametro4 and v.grupo in ('A1', 'A5'))))) 
                   v.agrupacion = parametro4 and v.grupo in ('A1', 'A5', 'D1', 'D5')
                   and v.calculo=0
                   and v.periodo = p_periodo
                   and replace(replace(v.hogar,'5b','5.1'),'Hogar ','')::numeric < parametro6
                 ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, comun.para_ordenar_numeros(v.hogar);
end;
$$;


--
-- Name: res_cuadro_matriz_linea_var(text, text, text, text, integer, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_linea_var(parametro1 text, p_periodo text, parametro4 text, p_cuadro text, parametro6 integer, p_periododesde text, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
    v_periodo_desde text:='a2012m01';
    v_periodo_hasta text:=p_periodo;
    v_formato_renglon text:='DW1n'; -- solo pongo letras para: el tipo de renglón, las columas laterales y una más para todos los datos.
    v_formato_renglon_cabezal text:='E111'; -- idem
begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      null::text,
                      100::text;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      'Hogar'::text, 
                      'Descripción'::text,
                      null::text,
                      null::text;
  return query select v_formato_renglon::text as formato_renglon,
                      v.hogar::text as lateral1,
                      h.nombrehogar::text as lateral2, --v.grupo::text as lateral2,
                      CASE WHEN v.nivel = 1 THEN v.nombrecanasta 
                                            ELSE v.nombregrupo END ::text as cabezal1,
                      --replace(round(v.valorhoggru::numeric,2)::text,'.',p_separador) as celda
                      case when v1.valorhoggru = 0 then '0'||p_separador||'0'::text else
                      replace(round((round(v.valorhoggru::numeric,2)/round(v1.valorhoggru::numeric,2)*100-100),1)::text,'.',p_separador) end as celda
                 from (select * from valorizacion_canasta_cuadros where periodo = p_periodo) v --inner join grupos g on v.agrupacion = g.agrupacion and v.grupo = g.grupo
                      left join (select * from valorizacion_canasta_cuadros where periodo = p_periododesde) v1 
                        on v.calculo = v1.calculo and v.agrupacion = v1.agrupacion and v.grupo = v1.grupo and v.hogar = v1.hogar
                      inner join cvp.hogares h on v.hogar = h.hogar 
                 where --((p_cuadro <> 'LH' and v.agrupacion = parametro4) or (p_cuadro = 'LH' and ((v.agrupacion = 'D' and v.grupo in ('D1', 'D5')) OR (v.agrupacion = parametro4 and v.grupo in ('A1', 'A5'))))) 
                   v.agrupacion = parametro4 and v.grupo in ('A1', 'A5', 'D1', 'D5')
                   and v.calculo=0
                   and v.periodo = p_periodo
                   and replace(replace(v.hogar,'5b','5.1'),'Hogar ','')::numeric < parametro6
                 ORDER BY v.agrupacion, substr(v.grupo,1,2), v.nivel DESC NULLS LAST, v.grupo, comun.para_ordenar_numeros(v.hogar);
end;
$$;


--
-- Name: res_cuadro_matriz_up(text, text, text, boolean, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_matriz_up(parametro1 text, p_periodo text, parametro4 text, pponercodigos boolean, pdesde text, porden text, p_separador text) RETURNS SETOF cvp.res_mat2
    LANGUAGE plpgsql
    AS $$
declare
    vAnchoNumeros text:='100';
    v_periodo_desde text:=pdesde; --'a2013m01';
    v_formato_renglon text:=case when pPonerCodigos then 'DW11n'::text else 'D.W2n'::text end;
    v_formato_renglon_cabezal text:=case when pPonerCodigos then 'E1111'::text else 'E1.21'::text end;
    v_formato_renglon_padres text:=case when pPonerCodigos then 'GW11n'::text else 'G.W2n'::text end;
    
begin
  return query select 'anchos'::text as formato_renglon,
                      'auto'::text, 
                      'auto'::text,
                      'auto'::text,
                      null::text,
                      vAnchoNumeros;
  return query select v_formato_renglon_cabezal::text as formato_renglon,
                      case when pPonerCodigos then 'Producto'::text else 'Descripción'::text end,
                      case when pPonerCodigos then 'Descripción'::text else null end,
                      'Unidad de medida'::text,
                      null::text,
                      null::text;
  return query select formato_renglon, producto, nombreproducto, unidadmedidaabreviada, nombreperiodo, promprod from (
                select case when porden = 'desc' then row_number() over (order by periodo desc ,q.ordenpor)+100 
                         else row_number() over (order by periodo, q.ordenpor)+100 end,
                    q.formato_renglon, q.producto, q.nombreproducto, q.unidadmedidaabreviada,
                    devolver_mes_anio(periodo) as nombreperiodo, q.promprod
                 from 
                 (select * from
                 (
                 select 
                    v_formato_renglon::text as formato_renglon,
                    p.grupopadre,
                    case when pPonerCodigos then producto::text else null end as producto,
                    nombreproducto::text,
                    unidadmedidaabreviada::text,
                    periodo,
                    replace(round(promprod::numeric,2)::text,'.',p_separador) as promprod,
                    /*periodo||*/p.grupopadre||producto::text as ordenpor
                 from preciosmedios_albs_var p
                      left join gru_grupos g on g.agrupacion = 'E' and g.grupo = p.producto 
                      left join cvp.grupos u on g.agrupacion = u.agrupacion and g.grupo_padre = u.grupo 
                 where (gruponivel1 = parametro4 or g.grupo_padre = parametro4)
                   and calculo=0 and coalesce(u.nivel,1) = 1
                   and periodo between v_periodo_desde and p_Periodo
               
                 union
                 select distinct  
                    v_formato_renglon_padres::text as formato_renglon,
                    p.grupopadre, 
                    null as producto, 
                    substr(nombregrupopadre,1,1)||lower(substr(nombregrupopadre,2)) as nombreproducto, 
                    null as unidadmedidaabreviada,
                    periodo,
                    null as promprod,
                    /*periodo||*/p.grupopadre||'P0000000'::text as ordenpor
                 from preciosmedios_albs_var p
                      left join gru_grupos g on g.agrupacion = 'E' and g.grupo = p.producto 
                      left join cvp.grupos u on g.agrupacion = u.agrupacion and g.grupo_padre = u.grupo 
                 where (gruponivel1 = parametro4 or g.grupo_padre = parametro4)
                   and calculo=0
                   and periodo between v_periodo_desde and p_Periodo
                ) as d order by ordenpor, periodo) as q) as x
               ;
               /*
               SELECT u.nivel, g.grupo_padre, * FROM cvp.preciosmedios_albs_var p 
                left join cvp.gru_grupos g on g.agrupacion = 'E' and g.grupo = p.producto
                left join cvp.grupos u on g.agrupacion =  u.agrupacion and g.grupo_padre = u.grupo 
                WHERE periodo = 'a2018m08' and coalesce(u.nivel,1) = 1
               */
end;
$$;


--
-- Name: res_cuadro_piivvi(text, text, integer, text, boolean, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_piivvi(parametro1 text, p_periodo text, parametro3 integer, parametro4 text, pponercodigos boolean, p_cuadro text, p_separador text) RETURNS SETOF cvp.res_col9
    LANGUAGE plpgsql
    AS $$
declare
    vMesActual text;
    vMesAnterior text;
    vCalculoAnterior integer;
    vAgrupacionPrincipal text;
    vAnchoNumeros text:='100';
begin
  
  select c.periodoanterior, c.calculoanterior, cd.agrupacionprincipal  
    into vMesanterior, vCalculoAnterior, vAgrupacionPrincipal
    from Calculos c, Calculos_def cd    
    where c.periodo=p_periodo AND c.calculo=0 AND c.calculo= cd.calculo;
    
  return query select 0::bigint,'anchos'::text,'auto'::text,'auto'::text,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros,vAnchoNumeros;
  return query select 1::bigint
                 , 'U5.86.7..86'::text
                 , parametro1::text,null::text
                 , 'Ponderación'::text
                 , 'Índice ¹'::text
                 , null::text,'Variación porcentual *'::text,null::text, null::text
                 , 'Incidencia mensual *'::text;
  return query select 2::bigint,'P...RRRRR.'::text,null::text,null::text, null::text
                 , devolver_mes_anio(p_periodo)||' *'::text 
                 , devolver_mes_anio(vMesAnterior),'Respecto del mes anterior'::text
                 , 'Acumulado Anual'::text, 'Interanual'::text, null::text;
  return query select row_number() over (order by cg.grupo)+100,
                      case when cg.nivel=0 then 'N.3.nnnnnn'
                           when pPonerCodigos then 'D11nnnnnnn' 
                           else 'D.2nnnnnnn' end as formato_renglon,
                      case when pPonerCodigos and cg.nivel<>0 then 
                        case when substr(cg.grupo,2,1)::integer <1 then substr(cg.grupo,3)::text 
                          else substr(cg.grupo,2)::text end
                        else null end as grupo, 
                      overlay(lower(nombregrupo) placing upper(substr(nombregrupo,1,1)) from 1 for 1)::text,
                      replace(round((g.ponderador*100)::numeric,2)::text,'.',',')::text||' %'::text,
                      replace(round(cg.indiceRedondeado::numeric,2)::text,'.',p_separador)::text,
                      replace(round(co.indiceRedondeado::numeric,2)::text,'.',p_separador)::text,
                      case when co.indiceRedondeado=0 then null 
                        else replace(round((cg.indiceRedondeado/co.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end,
                      case when ca.indiceRedondeado=0 then null 
                        else replace(round((cg.indiceRedondeado/ca.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end,
                      case when cb.indiceRedondeado=0 then null 
                        else replace(round((cg.indiceRedondeado/cb.indiceRedondeado*100-100)::numeric,1)::text,'.',p_separador)::text end,    
                      replace(cg.incidenciaredondeada::text,'.',p_separador)::text
                 from calGru cg 
                 inner join grupos g on g.agrupacion=cg.agrupacion and g.grupo=cg.grupo
                 left join calgru co on co.agrupacion=cg.agrupacion and co.grupo=cg.grupo and co.calculo=vCalculoAnterior and co.periodo=vMesAnterior
                 left join calgru ca on ca.agrupacion=cg.agrupacion and ca.grupo=cg.grupo and ca.calculo=cg.calculo 
                                     and ca.periodo =(('a' || (substr(cg.periodo, 2, 4)::integer - 1)) ||'m12')
                 left join calgru cb on cb.agrupacion=cg.agrupacion and cb.grupo=cg.grupo and cb.calculo=cg.calculo 
                                     and cb.periodo =periodo_igual_mes_anno_anterior(cg.periodo)
                 left join cuagru on cg.agrupacion = cuagru.agrupacion and cg.grupo = cuagru.grupo and cuagru.cuadro = p_cuadro                                     
                 where cg.agrupacion= parametro4
                   and cg.nivel <= parametro3
                   and cg.calculo=0
                   and cg.periodo=p_Periodo
                   ; 
end;
$$;


--
-- Name: res_cuadro_pp(text, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_pp(parametro1 text, p_periodo text, pdesde text, p_separador text) RETURNS SETOF cvp.res_mat2
    LANGUAGE plpgsql
    AS $$
declare

    vAnchoNumeros text:='100';
    v_periodo_desde text:=pdesde;

begin
  return query select /*0::bigint,*/
	              'anchos'::text,
	              'auto'::text,
	              'auto'::text,
	              'auto'::text,
	              null::text,
	              vAnchoNumeros;

  return query select /*1::bigint,*/
                      'E1111'::text,
                      'Código de Producto'::text,
                      'Descripción'::text,
                      'Unidad de Medida'::text,
                      null::text,
                      'Precio relevado'::text;
  return query select /*row_number() over (order by q.ordenpor)+100,*/
                      q.formato_renglon, 
                      q.producto, q.nombreproducto, q.unidadmedidaabreviada, q.nombreperiodo, q.promprod
                 from 
                 (
                 select 
                    'D11Cn'::text as formato_renglon,
                    c.producto::text,
                    nombreproducto::text,
                    unidadmedidaabreviada::text,
                    devolver_mes_anio(periodo) as nombreperiodo,
                    replace(round(promDiv::numeric,2)::text,'.',p_separador) as promprod
                    /*,c.producto as ordenpor*/
                 from productos p inner join calDiv c on p.producto=c.producto and c.division='0'
                 where calculo=0
                   and periodo between v_periodo_desde and p_Periodo
                 order by c.producto, c.periodo
                ) as q
               ;
end;
$$;


--
-- Name: res_cuadro_up(text, text, text, boolean, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_up(parametro1 text, p_periodo text, parametro4 text, pponercodigos boolean, p_separador text) RETURNS SETOF cvp.res_col4
    LANGUAGE plpgsql
    AS $$
declare

    vAnchoNumeros text:='100';

begin
  
  return query select 0::bigint,'anchos'::text,
       'auto'::text,
       'auto'::text,'auto'::text,vAnchoNumeros;

  return query select 1::bigint,case when pPonerCodigos then 'ULLLR'::text else 'U2.LR'::text end, 
                 case when pPonerCodigos then 'Código de Producto'::text else 'Descripción'::text end,
                 case when pPonerCodigos then 'Descripción'::text else null end, 'Unidad de medida'::text, 'Precio medio'::text;
  return query select row_number() over (order by q.ordenpor)+100,
                    q.formato_renglon, q.producto, q.nombreproducto, q.unidadmedidaabreviada, q.promprod
                 from 
                 (
                 select 
                    --'D111n'::text
                    --as formato_renglon,
                    case when pPonerCodigos then 'D111n' else 'D.21n' end as formato_renglon,
                    grupopadre,
                    case when pPonerCodigos then producto::text else null end as producto,
                    nombreproducto::text,
                    unidadmedidaabreviada::text,
                    replace(round(promprod::numeric,2)::text,'.',p_separador) as promprod,
                    grupopadre||producto::text as ordenpor
                 from preciosmedios_albs_var
                 where gruponivel1 = parametro4
                   and calculo=0
                   and periodo=p_Periodo
               
                 union
                 select distinct --row_number() over (ordenpor)+100, 
                    'G.2..' as formato_renglon, 
                    grupopadre, 
                    null as producto, 
                    substr(nombregrupopadre,1,1)||lower(substr(nombregrupopadre,2)) as nombreproducto, 
                    null as unidadmedidaabreviada, 
                    null as promprod,
                    grupopadre||'P0000000'::text as ordenpor
                 from preciosmedios_albs_var 
                 where gruponivel1 = parametro4
                   and calculo=0
                   and periodo=p_periodo
                ) as q
               ;
end;
$$;


--
-- Name: res_cuadro_vc(text, text, integer, text, boolean, text, text, text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.res_cuadro_vc(parametro1 text, p_periodo text, parametro3 integer, parametro4 text, pponercodigos boolean, p_cuadro text, pdesde text, p_separador text) RETURNS SETOF cvp.res_mat
    LANGUAGE plpgsql
    AS $$
declare
    vAnchoNumeros text:='100';
    v_periodo_desde text := pdesde;
begin
  
  return query select /*0::bigint,*/ 'anchos'::text,'auto'::text,'auto'::text, null::text, vAnchoNumeros;
  return query select /*1::bigint,*/ case when pPonerCodigos then'ULLR'::text else 'U2.R' end, 
                                 case when pPonerCodigos then 'Código'::text else 'Descripción'::text end,  
                                 case when pPonerCodigos then 'Descripción'::text else null end, null::text, 'Valorgru'::text;
  return query select /*row_number() over (order by c.grupo, c.periodo)+100,*/ 
                      case when pPonerCodigos then 'D11n'::text else 'D.2n'::text end as formato_renglon,
                      case when pPonerCodigos then c.grupo::text /*substr(c.grupo,2)::text*/ else null end as grupo,
                      g.nombregrupo::text, devolver_mes_anio(c.periodo)||case when c.periodo=p_Periodo then ' *'::text else ''::text end as nombreperiodo,
                      --replace(round(c.valorgru::numeric,2)::text, '.',p_separador) as valorgru
                      replace(round((CASE WHEN p_cuadro = 'X1' then c.valorgru ELSE c.valorgrupromedio END)::numeric,2)::text, '.',p_separador) as valorgru
                 from calGru_promedios c inner join cvp.grupos g on c.agrupacion=g.agrupacion and c.grupo=g.grupo
                 where periodo between v_periodo_desde and p_Periodo
                   and calculo=0
                   and c.agrupacion=parametro4
                   and (c.nivel=parametro3 and c.grupopadre in ('A31','A32','A51','D31','D51')
                       or c.nivel=parametro3-1 and c.grupo not in ('A31','A32','A51','D31','D51'))
                 order by c.grupo, c.periodo;
end;
$$;


--
-- Name: restaurar_atributos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.restaurar_atributos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vatributos RECORD;
  vesposnew  cvp.tipopre.espositivo%type;
  vesposold  cvp.tipopre.espositivo%type;
  vblanqueonew  cvp.tipopre.registrablanqueo%type;
  vblanqueoold  cvp.tipopre.registrablanqueo%type;
BEGIN
  SELECT espositivo, registrablanqueo INTO vesposnew, vblanqueonew
    FROM  cvp.tipopre
    WHERE tipoprecio=NEW.tipoprecio;
  SELECT espositivo, registrablanqueo INTO vesposold, vblanqueoold
    FROM  cvp.tipopre
    WHERE tipoprecio=OLD.tipoprecio;
  
  IF OLD.tipoprecio is distinct from NEW.tipoprecio THEN
    IF vblanqueonew and not vblanqueoold THEN
        INSERT INTO cvp.blapre(
            periodo, producto, observacion, informante, formulario, precio, 
            tipoprecio, visita, modi_usu, modi_fec, modi_ope, comentariosrelpre, 
            cambio, precionormalizado, especificacion, ultima_visita)
        VALUES (OLD.periodo, OLD.producto, OLD.observacion, OLD.informante, OLD.formulario, OLD.precio, 
            OLD.tipoprecio, OLD.visita, OLD.modi_usu, OLD.modi_fec, OLD.modi_ope, OLD.comentariosrelpre, 
            OLD.cambio, OLD.precionormalizado, OLD.especificacion, OLD.ultima_visita);
        --
        INSERT INTO cvp.blaatr 
            SELECT * FROM cvp.relatr 
            WHERE periodo=NEW.periodo AND 
               producto=NEW.producto AND
               observacion=NEW.observacion AND 
               informante=NEW.informante AND
               visita=NEW.visita;  
    END IF;
    IF not vblanqueonew and vblanqueoold THEN
        DELETE FROM cvp.blaatr 
        WHERE periodo=NEW.periodo AND 
              producto=NEW.producto AND
              observacion=NEW.observacion AND 
              informante=NEW.informante AND
              visita=NEW.visita;
        DELETE FROM cvp.blapre
        WHERE periodo=NEW.periodo AND 
              producto=NEW.producto AND
              observacion=NEW.observacion AND 
              informante=NEW.informante AND
              visita=NEW.visita;
    END IF;
  END IF;
  IF (NEW.cambio IS NULL AND OLD.cambio ='C') OR (vesposnew='N' AND vesposold='S') THEN
    /*IF NEW.cambio='C' THEN --este caso solo para la segunda condicion si hubiera C
       NEW.cambio:=NULL;     --lo saco porque se solapa con la validacion de tipoprecio valido
    END IF; */
    
    INSERT INTO cvp.relpresemaforo (periodo,informante,visita,producto,observacion)
      VALUES(NEW.periodo,NEW.informante,NEW.visita,NEW.producto, NEW.observacion);
    /* 12/01/2017, Requerimiento IPCBA 274, dejar el valor que se ingresó en el periodo actual, no copiar los valores del periodo anterior
    FOR vatributos IN 
      SELECT r_1.atributo,r_1.valor_1, r_1.valor
      FROM cvp.relatr_1 r_1
            WHERE r_1.periodo=NEW.periodo AND 
                  r_1.producto=NEW.producto AND
                  r_1.observacion=NEW.observacion AND 
                  r_1.informante=NEW.informante AND
                  r_1.visita=NEW.visita 
   	
    LOOP
      IF vatributos.valor_1 IS DISTINCT FROM vatributos.valor THEN
        UPDATE cvp.relatr 
          SET valor=vatributos.valor_1
          WHERE periodo=NEW.periodo AND 
                producto=NEW.producto AND
                observacion=NEW.observacion AND 
                informante=NEW.informante AND
                visita=NEW.visita AND
                atributo=vatributos.atributo ; --TOMAR VALOR DE ATRIBUTO
      END IF;   
    END LOOP;  
    */
  END IF;
 RETURN NEW; 
END;
$$;


--
-- Name: revisar_cambio_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.revisar_cambio_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vcambios integer;
BEGIN
vcambios := 0;
SELECT count(*) INTO vcambios
  FROM cvp.relatr_1 
  WHERE periodo = new.periodo and producto = new.producto and observacion = new.observacion 
        and informante = new.informante and visita = new.visita and valor IS DISTINCT FROM valor_1;
if vcambios > 0 then
  UPDATE cvp.relpre SET cambio = 'C'
    WHERE periodo = new.periodo and producto = new.producto and observacion = new.observacion and informante = new.informante and visita = new.visita;
end if;
RETURN NEW;
END;
$$;


--
-- Name: seleccionar_supervisiones_aleatorias(text, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.seleccionar_supervisiones_aleatorias(pperiodo text, ppanel integer) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
vfechaultsupencuestador timestamp without time zone;
vfechaultsuperpaneltarea timestamp without time zone;
vpuntos integer;
vsup record;
vtareaelegida integer;
vmaxperiodot text;
vtareapuntos cvp.tarea_puntos array;
vtamannosupervision integer;
vinftareapuntos cvp.tarea_puntos array;
vtareasup cvp.tarea_puntos;
vGeneracionSupervisiones timestamp without time zone;
BEGIN
SELECT  GeneracionSupervisiones INTO vGeneracionSupervisiones
  FROM cvp.relpan
  WHERE periodo=pperiodo AND panel=ppanel;
IF vGeneracionSupervisiones is null THEN  
    --calculo de puntos 
    --PERFORM cvp.calcular_puntos_tareas(pperiodo, ppanel); 
    --asignacion tarea/s a cada uno de los supervisores    
    FOR vsup in
       SELECT supervisor
         FROM cvp.relsup
         WHERE periodo=pperiodo AND panel=ppanel AND disponible='S'
         ORDER BY supervisor
    LOOP
      vtareapuntos:=null;
      FOR vtareasup in
        --elegir solo tareas candidatas
        SELECT p.tarea, 1 as puntos
          FROM cvp.reltar p
          INNER JOIN cvp.pantar t ON p.panel = t.panel AND p.tarea = t.tarea
          INNER JOIN cvp.tareas a ON a.tarea = t.tarea
          INNER JOIN (SELECT periodo, panel, tarea, count(*) as cantvisitas
                        FROM cvp.relvis re 
                        LEFT JOIN cvp.razones ra on re.razon = ra.razon --pk verificada
                        WHERE periodo = pperiodo and panel = ppanel and coalesce(ra.espositivoformulario, 'S') = 'S'
                        GROUP BY periodo, panel, tarea) vis 
                        ON p.periodo = vis.periodo and p.panel = vis.panel and t.tarea = vis.tarea --periodo-panel-tarea con visitas generadas (no vacías)
          WHERE p.periodo=pperiodo AND p.panel= ppanel AND t.tamannosupervision IS NOT NULL 
            AND a.operativo = 'C' and a.activa = 'S'   --tareas de campo y activas y con tamannosupervision definido
            AND supervisor is null
          ORDER BY p.tarea 
      LOOP  
          vtareapuntos :=array_append(vtareapuntos, vtareasup);
          RAISE NOTICE  'vtareapuntos % ', vtareapuntos; 
      END LOOP;
      --seleccion aleatoria de una tarea
      --vtareaelegida:=cvp.elegir_tarea_aleatoria_con_probabilidad_puntos(vtareapuntos); 
      vtareaelegida:=cvp.elegir_tarea_aleatoria_con_criterio(pperiodo, ppanel, vtareapuntos); 
      RAISE NOTICE  'Supervisor  % ', vsup.supervisor;        
      RAISE NOTICE  'Tareaelegida  % ', vtareaelegida;        
      UPDATE cvp.reltar SET supervisor=vsup.supervisor
        WHERE periodo=pperiodo AND panel=ppanel AND tarea=vtareaelegida; 
        
    --punto e :asignación tarea simultanea 
      SELECT tamannosupervision into vtamannosupervision
        FROM cvp.pantar p left join cvp.tareas t on p.tarea = t.tarea 
        WHERE panel=ppanel AND p.tarea=vtareaelegida and t.operativo = 'C' and t.activa = 'S';
        RAISE NOTICE 'tarea elegida % ', vtareaelegida ;
        RAISE NOTICE 'tamaño supervision % ', vtamannosupervision ;
      IF vtamannosupervision =2 THEN -- Se puede elegir por cercania otra tarea 
           vinftareapuntos:=null;
           vinftareapuntos:=cvp.Seleccionar_Tareas_Simultaneas(pperiodo, ppanel, vtareaelegida);
           RAISE NOTICE 'longitud % ', array_length(vinftareapuntos, 1) ;
           --seleccion aleatoria de tarea simultanea  
           IF array_length(vinftareapuntos, 1) IS NOT NULL THEN 
             --vtareaelegida:=cvp.elegir_tarea_aleatoria_con_probabilidad_puntos(vinftareapuntos); 
             vtareaelegida:=cvp.elegir_tarea_aleatoria_con_criterio(pperiodo, ppanel, vinftareapuntos); 
             RAISE NOTICE  'Tarea cercana elegida  % ', vtareaelegida;        
             UPDATE cvp.reltar SET supervisor=vsup.supervisor
               WHERE periodo=pperiodo AND panel=ppanel AND tarea=vtareaelegida;                     
           END IF;    
      END IF;
    END LOOP;
    UPDATE cvp.relpan SET GeneracionSupervisiones=current_timestamp  WHERE periodo=pperiodo AND panel=ppanel;
ELSE
    RAISE NOTICE  'La selección de las supervisiones aleatorias ya fue realizada para el Periodo % ,Panel % ', pperiodo, ppanel;    
END IF;    
END;
$$;


--
-- Name: seleccionar_tareas_simultaneas(text, integer, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.seleccionar_tareas_simultaneas(pperiodo text, ppanel integer, ptareaelegida integer) RETURNS cvp.tarea_puntos[]
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
vinf_tarea cvp.tarea_puntos;
inftareapuntos cvp.tarea_puntos array;
BEGIN 
   FOR vinf_tarea in
       WITH  informante_tarea AS (
          SELECT  v.informante, i.distrito 
            FROM cvp.relvis v
                JOIN cvp.informantes i ON i.informante=v.informante  
            WHERE v.periodo=pperiodo AND v.panel=ppanel AND v.tarea=ptareaelegida
        ), informante_cercano AS (
        SELECT r.tarea, 1 as puntos --r.puntos
          FROM cvp.reltar r
              JOIN cvp.relvis v ON r.periodo=v.periodo AND r.panel=v.panel AND r.tarea=v.tarea  --pk verificada de reltar  
              JOIN cvp.informantes i ON i.informante=v.informante --pk verificada
              JOIN cvp.pantar p ON p.panel=r.panel AND p.tarea=r.tarea --pk verificada
              JOIN cvp.tareas t on p.tarea = t.tarea --pk verificada
              JOIN informante_tarea it ON it.distrito=i.distrito 
          WHERE r.supervisor is null AND p.tamannosupervision=2  AND r.periodo=pperiodo AND r.panel=ppanel AND i.informante <>it.informante  
              AND v.tarea<>ptareaelegida AND t.activa = 'S' and t.operativo = 'C' 
        ) 
         SELECT  distinct tarea, 1 as puntos  
           FROM informante_cercano
           ORDER BY tarea
   LOOP  
      inftareapuntos :=array_append(inftareapuntos, vinf_tarea);
      raise notice  'inftareapuntos % ', inftareapuntos;        
   END LOOP ;
   RETURN inftareapuntos;
END;
$$;


--
-- Name: setear_renglon_de_cal_mensajes_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.setear_renglon_de_cal_mensajes_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 vnuevorenglon INTEGER;
BEGIN
  SELECT COALESCE(MAX(renglon),0)+1 INTO vnuevorenglon
    FROM  cvp.cal_mensajes
    WHERE periodo=NEW.periodo
      AND calculo=NEW.calculo
      AND corrida= NEW.corrida;
   NEW.renglon= vnuevorenglon;  
 RETURN NEW; 
END;
$$;


--
-- Name: testpanelesgenerados(text, integer, integer); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.testpanelesgenerados(pperiodo text, ppaneldesde integer, ppanelhasta integer) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
  vRta text;
  vpaneles RECORD;
begin
  vRta = 'N';
  
  FOR vpaneles IN
  select periodo, panel, fechageneracionpanel 
  from cvp.relpan
  where periodo = PPeriodo and PPanelDesde <= panel and panel <= PPanelHasta
  LOOP
    if vpaneles.fechageneracionpanel is not null then
      vRta = 'S';
    else
      vRta = 'N';
      EXIT;
    end if;
  END LOOP;
  return vRta;
end;
$$;


--
-- Name: tiposdeprecio(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.tiposdeprecio() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  vTiposDePrecio RECORD;
  vRta TEXT:='';
BEGIN
  FOR vTiposDePrecio IN 
    SELECT t.tipoprecio, t.nombretipoprecio
	    FROM cvp.tipopre t
      WHERE t.VisibleParaEncuestador='S' and t.activo = 'S'
  LOOP
    vRta:=vRta || ', ' || vTiposDePrecio.tipoprecio || '=' || vTiposDePrecio.nombretipoprecio;
  END LOOP;  
  RETURN 'Tipos de Precio:' || substr(vRta,2);
END;
$$;


--
-- Name: tmp_validar_abrir_cerrar_calculo_trg(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.tmp_validar_abrir_cerrar_calculo_trg(pesquema text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
BEGIN
EXECUTE
REPLACE($ESTA_FUNCION$
CREATE OR REPLACE FUNCTION validar_abrir_cerrar_calculo_trg()
  RETURNS trigger AS
$BODY$
DECLARE
  vPeriodo_1  text;  
  vCalculo_1  integer;
  vAbierto_1  character varying(1);
  vIngresando character varying(1); 
  vrecsig     record;
BEGIN
IF OLD.abierto IS DISTINCT FROM NEW.abierto AND NEW.abierto='N' THEN 
  SELECT periodoanterior, calculoanterior INTO vPeriodo_1, vCalculo_1
    FROM $TG_TABLE_SCHEMA.Calculos
    WHERE periodo=NEW.periodo AND calculo=NEW.calculo ;
  IF (vPeriodo_1 IS NULL AND vCalculo_1 IS NULL) OR (vPeriodo_1=NEW.periodo AND vCalculo_1=NEW.calculo) THEN -- periodo inicial
    vAbierto_1='N';
  ELSE 
    SELECT abierto INTO vAbierto_1
      FROM $TG_TABLE_SCHEMA.Calculos
      WHERE periodo=vPeriodo_1 AND calculo=vCalculo_1;
  END IF;
  SELECT ingresando INTO vIngresando
    FROM $TG_TABLE_SCHEMA.Periodos
    WHERE periodo=NEW.Periodo ;
  
--Si vAbierto_1 ='N' AND vIngresando='N' seria correcto permitir cerrar calculo
  IF vAbierto_1 ='S' OR vIngresando='S'  THEN
    RAISE EXCEPTION 'ERROR no se puede cerrar un calculo si no esta cerrado el anterior';
  END IF;
  
END IF;
--Si vAbiertosig ='S' seria correcto abrir calculo
IF OLD.abierto IS DISTINCT FROM NEW.abierto AND NEW.abierto='S' THEN 
  FOR vrecsig in
    SELECT periodo, calculo, abierto 
      FROM $TG_TABLE_SCHEMA.Calculos
      WHERE periodoanterior=NEW.Periodo AND calculoanterior=NEW.Calculo 
        AND (periodoanterior<>Periodo OR calculoanterior<>Calculo)
  LOOP
      IF vrecsig.abierto='N' THEN
        RAISE EXCEPTION 'ERROR no se puede reabrir porque el siguiente periodo "%" esta cerrado', vrecsig.periodo;
      END IF;
  END LOOP;   
END IF;
RETURN NEW;
END;$BODY$
  LANGUAGE 'plpgsql' VOLATILE SECURITY DEFINER;
ALTER FUNCTION  validar_abrir_cerrar_calculo_trg() OWNER TO cvpowner;
$ESTA_FUNCION$,'$TG_TABLE_SCHEMA',pEsquema);
-- Ejecución partida
EXECUTE
REPLACE($ESTA_FUNCION$
DROP TRIGGER IF EXISTS  calculos_controlar_abrir_cerrar_calculo_trg ON $TG_TABLE_SCHEMA.Calculos;
CREATE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg
  BEFORE UPDATE
  ON $TG_TABLE_SCHEMA.Calculos
  FOR EACH ROW
  EXECUTE PROCEDURE validar_abrir_cerrar_calculo_trg();
$ESTA_FUNCION$,'$TG_TABLE_SCHEMA',pEsquema);

END;
$_$;


--
-- Name: validar_abrir_cerrar_calculo_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_abrir_cerrar_calculo_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vPeriodo_1  text;  
  vCalculo_1  integer;
  vAbierto_1  character varying(1);
  vIngresando character varying(1); 
  vrecsig     record;
  vesadministrador integer;
  vescoordinacion integer;
  vhayprovisorios integer;
  vNOestantodosextdef integer;
  vestimacion integer;

BEGIN

SELECT 1 INTO vesadministrador
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_administrador' ; 
SELECT 1 INTO vescoordinacion
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_coordinacion' ;    

IF OLD.abierto IS DISTINCT FROM NEW.abierto AND NEW.abierto='N' THEN
  IF vesadministrador=1 OR vescoordinacion=1 THEN
      SELECT periodoanterior, calculoanterior, estimacion INTO vPeriodo_1, vCalculo_1, vestimacion
        FROM cvp.Calculos
        WHERE periodo=NEW.periodo AND calculo=NEW.calculo ;
      IF (vPeriodo_1 IS NULL AND vCalculo_1 IS NULL) OR (vPeriodo_1=NEW.periodo AND vCalculo_1=NEW.calculo) THEN -- periodo inicial
        vAbierto_1='N';
      ELSE 
        SELECT abierto INTO vAbierto_1
          FROM cvp.Calculos
          WHERE periodo=vPeriodo_1 AND calculo=vCalculo_1;
      END IF;
      SELECT ingresando INTO vIngresando
        FROM cvp.Periodos
        WHERE periodo=NEW.Periodo;
      SELECT DISTINCT 1 INTO vhayProvisorios
        FROM cvp.caldiv c 
        INNER JOIN cvp.novprod n ON c.producto = n.producto and c.calculo = n.calculo and c.periodo = n.periodo
        INNER JOIN cvp.productos p ON c.producto = p.producto
        WHERE c.periodo=NEW.periodo AND c.calculo=NEW.calculo AND p.tipoexterno = 'P' AND c.division = '0';
      SELECT DISTINCT 1 INTO vNOestantodosextdef 
        FROM cvp.productos p LEFT JOIN cvp.novprod n ON p.producto = n.producto AND n.periodo = NEW.periodo AND n.calculo = NEW.calculo
        WHERE p.tipoexterno = 'D' and n.periodo is null;        
    --Si vAbierto_1 ='N' AND vIngresando='N' seria correcto permitir cerrar calculo
      IF vAbierto_1 ='S' THEN
        RAISE EXCEPTION 'ERROR no se puede cerrar un calculo si no esta cerrado el anterior';
      END IF;
      IF vIngresando='S'  THEN
        RAISE EXCEPTION 'ERROR no se puede cerrar un calculo si no esta cerrado el periodo correspondinete';
      END IF;
      IF vhayProvisorios=1  THEN
        RAISE EXCEPTION 'ERROR no se puede cerrar un calculo si hay externos provisorios el periodo correspondinete';
      END IF;
      IF vNOestantodosextdef=1 THEN
        RAISE EXCEPTION 'ERROR no se puede cerrar un calculo si NO están todos los externos habituales el periodo correspondinete';
      END IF;
      IF vestimacion>0  THEN
        RAISE EXCEPTION 'ERROR no se puede cerrar un calculo con una estimación distinta de 0';
      END IF;
  ELSE
     RAISE EXCEPTION 'ERROR Perfil no autorizado para realizar esta operacion "%" ', current_user;
  END IF;
END IF;
--Si vAbiertosig ='S' seria correcto abrir calculo
IF OLD.abierto IS DISTINCT FROM NEW.abierto AND NEW.abierto='S' THEN 
  IF vescoordinacion=1 THEN
      FOR vrecsig in
        SELECT periodo, calculo, abierto 
          FROM cvp.Calculos
          WHERE periodoanterior=NEW.Periodo AND calculoanterior=NEW.Calculo 
            AND (periodoanterior<>Periodo OR calculoanterior<>Calculo)
      LOOP
          IF vrecsig.abierto='N' THEN
            RAISE EXCEPTION 'ERROR no se puede reabrir porque el siguiente periodo "%" esta cerrado', vrecsig.periodo;
          END IF;
      END LOOP;   
  ELSE
     RAISE EXCEPTION 'ERROR Perfil no autorizado para realizar esta operacion "%" ', current_user;
  END IF;
END IF;
RETURN NEW;
END;
$$;


--
-- Name: validar_fechas_visita_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_fechas_visita_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- V100430
-- DECLARE
BEGIN
  IF TG_OP='UPDATE' THEN
    IF new.fechasalida IS NOT NULL AND new.fechaingreso IS NOT NULL THEN
      IF new.fechasalida <= new.fechaingreso THEN
        -- OK
      ELSE
         RAISE EXCEPTION 'La fecha de ingreso no puede ser menor a la fecha de salida';
         RETURN NULL;
      END IF;      
    END IF;
  END IF;  
  RETURN NEW;
END;
$$;


--
-- Name: validar_habilitado_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_habilitado_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vPeriodo_1     text;  
  vIngresando    character varying(1); 
  vabierto       character varying(1);
  vesadministrador integer;
  vescoordinacion integer;
BEGIN

SELECT 1 INTO vesadministrador
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_administrador' ; 
SELECT 1 INTO vescoordinacion
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_coordinacion' ;    
  
IF OLD.habilitado IS DISTINCT FROM NEW.habilitado THEN
  IF vesadministrador=1 OR vescoordinacion=1 THEN
    IF NEW.habilitado='S' THEN -- estoy abriendo la habilitación
      SELECT  abierto INTO vabierto
      FROM cvp.calculos
      WHERE periodo=NEW.Periodo AND calculo=0 ;
      IF vabierto='N' THEN
          RAISE EXCEPTION 'ERROR no se puede habilitar el ingreso del periodo "%" porque el calculo esta cerrado', new.periodo;
      END IF; 
      SELECT periodo, ingresando INTO vperiodo_1, vingresando
          FROM cvp.periodos
          WHERE periodoanterior=NEW.Periodo ;
      IF vingresando='N' THEN
        RAISE EXCEPTION 'ERROR no se puede habilitar el ingreso porque el siguiente periodo "%" esta cerrado', vperiodo_1;
      END IF;
    END IF;
  ELSE 
   RAISE EXCEPTION 'ERROR Perfil no autorizado para realizar esta operacion "%" ', current_user;
  END IF; 
END IF;
RETURN NEW;
END;
$$;


--
-- Name: validar_imputacon_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_imputacon_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
vhay INTEGER;

BEGIN
IF tg_op = 'INSERT' THEN  
 IF new.imputacon is not null THEN
   SELECT 1 INTO vhay
      FROM cvp.grupos g JOIN cvp.calculos_def c on c.calculo=0
      WHERE g.grupo=new.imputacon AND g.esproducto='N' AND g.agrupacion=c.agrupacionPrincipal;

   IF vhay IS NULL THEN
     RAISE EXCEPTION 'Imputacon % no es un Grupo valido ', new.imputacon;
     RETURN NULL;
   END IF; 
 END IF;
END IF;
IF tg_op = 'UPDATE' THEN  
 IF new.imputacon is distinct from old.imputacon THEN
   SELECT 1 INTO vhay
      FROM cvp.grupos g JOIN cvp.calculos_def c on c.calculo=0
      WHERE g.grupo=new.imputacon AND g.esproducto='N' AND g.agrupacion=c.agrupacionPrincipal;

   IF vhay IS NULL THEN
     RAISE EXCEPTION 'Imputacon % no es un Grupo valido ', new.imputacon;
     RETURN NULL;
   END IF; 
 END IF;
END IF;
RETURN NEW;

END;
$$;


--
-- Name: validar_ingresando_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_ingresando_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vPeriodo_1     text;  
  vingresando_1  character varying(1);
  vIngresando    character varying(1); 
  vabierto       character varying(1);
  vnpan        integer; 
  vnvis        integer; 
  vnvisnonula    integer; 
  vesadministrador integer;
  vescoordinacion integer;
  vAlgunasNoIngresadas text;
BEGIN

SELECT 1 INTO vesadministrador
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_administrador' ; 
SELECT 1 INTO vescoordinacion
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_coordinacion' ;    
  
IF OLD.ingresando IS DISTINCT FROM NEW.ingresando THEN
  IF NEW.ingresando='N' AND (vesadministrador=1 OR vescoordinacion=1) THEN -- estoy cerrando
      SELECT periodo, ingresando INTO vPeriodo_1, vingresando_1
          FROM cvp.periodos
          WHERE periodo=(SELECT periodoanterior FROM cvp.periodos where periodo=NEW.periodo);
      IF NOT (vPeriodo_1 IS NULL OR vingresando_1='N')  THEN 
          RAISE EXCEPTION 'ERROR no se puede Cerrar el periodo "%" si no esta cerrado el periodo anterior "%"' ,new.periodo,vperiodo_1;
      END IF;
      SELECT COUNT(*) INTO vnpan FROM cvp.relpan WHERE periodo= NEW.periodo; 
      IF /*NOT vperiodo_1 IS NULL AND*/ vnpan  is distinct from 20 THEN
          RAISE EXCEPTION 'ERROR no se puede Cerrar el periodo "%" porque no se generaron todos los paneles. Hay "%" paneles' ,new.periodo,vnpan;
      END IF;
      SELECT count(*), count(CASE WHEN razon is not null THEN 1 ELSE null END)
          , substr(
             string_agg(
               CASE WHEN razon is null 
                    THEN 'i'||informante||' f'||formulario||' p'||panel||' t'||tarea||
                         case when visita>1 then ' VISITA:'||visita else '' end 
                    ELSE null 
               END ,', '),1,100) -- pongo un límite para que la excepción no sea muy larga.
          INTO vnvis, vnvisnonula, vAlgunasNoIngresadas
          FROM cvp.relvis WHERE periodo=NEW.periodo;
      IF vnvis <> vnvisnonula THEN
           RAISE EXCEPTION 'ERROR no se puede Cerrar el periodo "%" porque no estan todas las visitas ingresadas. Faltan ingresar % visitas. Por ejemplo % ' ,new.periodo, vnvis-vnvisnonula, vAlgunasNoIngresadas;
      END IF;
      NEW.fecha_cierre_ingreso=CURRENT_TIMESTAMP(3);
      /*Blanquear el vencimiento_sincronizacion al cerrar el periodo*/
      UPDATE cvp.reltar SET vencimiento_sincronizacion = null
      WHERE periodo = NEW.periodo AND vencimiento_sincronizacion IS NOT NULL;      
  ELSIF NEW.ingresando='S'  AND vescoordinacion=1 THEN -- abrir
      SELECT  abierto INTO vabierto
      FROM cvp.calculos
      WHERE periodo=NEW.Periodo AND calculo=0 ;
      IF vabierto='N' THEN
          RAISE EXCEPTION 'ERROR no se puede reabrir el periodo "%" porque el calculo esta cerrado', new.periodo;
      END IF; 
      SELECT periodo, ingresando INTO vperiodo_1, vingresando
          FROM cvp.periodos
          WHERE periodoanterior=NEW.Periodo ;
      IF vingresando='N' THEN
        RAISE EXCEPTION 'ERROR no se puede reabrir porque el siguiente periodo "%" esta cerrado', vperiodo_1;
      END IF;
  ELSE 
     RAISE EXCEPTION 'ERROR Perfil no autorizado para realizar esta operacion "%" ', current_user;
  END IF;     
END IF;
RETURN NEW;
END;
$$;


--
-- Name: validar_personal_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_personal_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
/*
   V110407 Por parámetro del sistema se puede relajar el hecho de que sea Ingresador como Labor
   V100506
*/
DECLARE
 vlabor cvp.personal.labor%type;
 vSoloIngresaIngresador cvp.parametros.SoloIngresaIngresador%type;
BEGIN
  IF TG_OP='UPDATE' OR TG_OP='INSERT' THEN
    IF NEW.encuestador IS NOT NULL THEN
      vlabor:=cvp.recupera_labor(NEW.encuestador,'E');
      IF vlabor IS NULL THEN 
        RAISE EXCEPTION 'El código ingresado no pertenece a un Encuestador o no está activo';
        RETURN NULL;
      END IF;   
    END IF;
    IF NEW.supervisor IS NOT NULL THEN
      vlabor:=cvp.recupera_labor(NEW.supervisor,'S');
      IF vlabor IS NULL THEN 
        RAISE EXCEPTION 'El código ingresado no pertenece a un Supervisor o no está activo';
        RETURN NULL;
      END IF;   
    END IF;
    IF NEW.recepcionista IS NOT NULL THEN
      vlabor:=cvp.recupera_labor(NEW.recepcionista,'R');
      IF vlabor IS NULL THEN 
        RAISE EXCEPTION 'El código ingresado no pertenece a un Recepcionista o no está activo';
        RETURN NULL;
      END IF;   
    END IF;
    IF NEW.ingresador IS NOT NULL THEN --Ver porque el código se pone automáticamente
      SELECT SoloIngresaIngresador INTO vSoloIngresaIngresador
        FROM cvp.Parametros
        WHERE unicoregistro;
      IF vSoloIngresaIngresador='S' THEN
        vlabor:=cvp.recupera_labor(NEW.ingresador,'I');
        IF vlabor IS NULL THEN 
          RAISE EXCEPTION 'El código ingresado no pertenece a un Ingresador o no está activo';
          RETURN NULL;
        END IF;
      END IF;   
    END IF; 
  END IF ; 
  RETURN NEW;
END;
$$;


--
-- Name: validar_recepcion_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_recepcion_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vesadministrador integer;
  vescoordinacion integer;
  vesrecepcion integer;
  vhaynormalizablessindato integer;
  vhayatributosfueraderango integer;
  vhaypreciosincompletos integer;
  vhayefectivasinprecio integer;
  vhayvigenciasincorrectas integer;
BEGIN

SELECT 1 INTO vesadministrador
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_administrador' ; 
SELECT 1 INTO vescoordinacion
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_coordinacion' ;    
SELECT 1 INTO vesrecepcion
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_recepcionista' ;    
  
IF OLD.verificado_rec IS DISTINCT FROM NEW.verificado_rec THEN
  IF NEW.verificado_rec='S' AND (vesadministrador=1 OR vescoordinacion=1 OR vesrecepcion=1) THEN -- estoy verificando la recepción
      --Aqui van todos los controles:
      
      --Terminado de ingresar
      --Normalizables sin dato: control_normalizables_sindato
      --Inconsistencias de atributos: control_atributos
      --Efectivos sin precio: hdrexportarefectivossinprecio
      --Inconsistencias de precios ¿? :control_rangos (sólo como chequeo, no impide la verificación)
      --Control de atributo vigencia :controlvigencias
    SELECT 1 INTO vhaypreciosincompletos
    FROM cvp.relpre 
    WHERE NEW.razon = 1 and periodo = NEW.periodo and informante = NEW.informante and visita = NEW.visita and formulario = NEW.formulario and tipoprecio is null
    LIMIT 1;
    IF vhaypreciosincompletos THEN
      RAISE EXCEPTION 'ERROR hay precios sin ingresar en formulario: % ', NEW.formulario;
    ELSE
      SELECT 1 INTO vhaynormalizablessindato
        FROM cvp.control_normalizables_sindato
        WHERE periodo = NEW.periodo and informante = NEW.informante and visita = NEW.visita and formulario = NEW.formulario
        LIMIT 1;
      IF vhaynormalizablessindato=1 THEN
        RAISE EXCEPTION 'ERROR hay normalizables sin dato en formulario: % ', NEW.formulario;
      ELSE
        SELECT 1 INTO vhayatributosfueraderango
          FROM cvp.control_atributos
          WHERE periodo = NEW.periodo and informante = NEW.informante and visita = NEW.visita and formulario = NEW.formulario
          LIMIT 1;
        IF vhayatributosfueraderango=1 THEN
          RAISE EXCEPTION 'ERROR hay atributos fuera de rango en formulario: % ', NEW.formulario;
        ELSE
          SELECT 1 INTO vhayefectivasinprecio
            FROM cvp.hdrexportarefectivossinprecio
            WHERE periodo = NEW.periodo and informante = NEW.informante and visita = NEW.visita and formulario = NEW.formulario
            LIMIT 1;
          IF vhayefectivasinprecio=1 THEN
            RAISE EXCEPTION 'ERROR hay respuesta efectiva sin precios en formulario: % ', NEW.formulario;
          ELSE
            SELECT 1 INTO vhayvigenciasincorrectas
              FROM cvp.controlvigencias
              WHERE periodo = NEW.periodo and informante = NEW.informante
            LIMIT 1;
            IF vhayvigenciasincorrectas=1 THEN
                RAISE EXCEPTION 'ERROR hay vigencias incorrectas en informante: % ', NEW.informante;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;        
  ELSIF NEW.verificado_rec='S' OR not(vesadministrador=1 OR vescoordinacion=1 OR vesrecepcion=1) THEN --quiere verificar (o desverificar) pero no tiene los permisos
     RAISE EXCEPTION 'ERROR Perfil no autorizado para realizar esta operacion "%" ', current_user;
  END IF;     
END IF;
RETURN NEW;
END;
$$;


--
-- Name: validar_transmitir_canasta_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_transmitir_canasta_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vesadministrador integer;
  vescoordinacion integer;
BEGIN

SELECT 1 INTO vesadministrador
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_administrador' ; 
SELECT 1 INTO vescoordinacion
  FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
  WHERE a.roleid=p.oid AND p.rolname='cvp_coordinacion' ;    
IF OLD.transmitir_canastas IS DISTINCT FROM NEW.transmitir_canastas AND NEW.transmitir_canastas='S' THEN
  IF vesadministrador=1 OR vescoordinacion=1 THEN
    IF NEW.abierto = 'N' THEN
        IF NEW.calculo <> 0 THEN
            RAISE EXCEPTION 'ERROR No se pueden transmitir canastas para cálculos provisorios';
        --ELSE
            --NEW.fechatransmitircanastas = CURRENT_TIMESTAMP(3);
        END IF;
    ELSE
     RAISE EXCEPTION 'ERROR No se pueden transmitir canastas porque aún no se cerró el cálculo';
    END IF;
  ELSE
     RAISE EXCEPTION 'ERROR Perfil no autorizado para realizar esta operacion "%" ', current_user;
  END IF;
END IF;
RETURN NEW;
END;
$$;


--
-- Name: validar_unidadmedidaabreviada(character varying); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.validar_unidadmedidaabreviada(p_producto character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  rec record; --registro para las especificaciones completas
  ruma record; --registro para las unidades de medida abreviadas
  v_es_valida  boolean;
  v_arr_espec decimal array;
  v_arr_unid decimal array;
  v_elem decimal;
  v_i integer;
BEGIN
v_es_valida = true;
v_arr_espec = array[]::decimal[];
FOR rec IN
 SELECT DISTINCT producto, nombreproducto, especificacioncompleta, 
     regexp_matches(replace(especificacioncompleta,'m3',''),'[0-9]*\.?[0-9]+','g')::decimal[] as arr_espec
   FROM cvp.paraimpresionformulariosenblanco
   WHERE producto = p_producto
   ORDER BY producto, nombreproducto, especificacioncompleta, 
     regexp_matches(replace(especificacioncompleta,'m3',''),'[0-9]*\.?[0-9]+','g')::decimal[]
 LOOP
    v_arr_espec = array_cat(v_arr_espec, rec.arr_espec);
    --RAISE notice 'Valores % espec %', v_arr_espec, rec.arr_espec;
 END LOOP;
--RAISE NOTICE 'Especificaciones %',  v_arr_espec;
v_arr_unid = array[]::decimal[];
FOR ruma IN
  SELECT producto, unidadmedidaabreviada, regexp_matches(replace(unidadmedidaabreviada,'m3',''),'[0-9]*\.?[0-9]+','g')::decimal[] as arr_unid
   FROM cvp.productos
   WHERE producto = p_producto
   ORDER BY producto, regexp_matches(replace(unidadmedidaabreviada,'m3',''),'[0-9]*\.?[0-9]+','g')::decimal[]
 LOOP 
    v_arr_unid = array_cat(v_arr_unid, ruma.arr_unid);
    --RAISE notice 'Valores % unid %', v_arr_unid, ruma.arr_unid;
 END LOOP;
 v_es_valida = v_arr_espec @> v_arr_unid; --el array de especificaciones contiene al array de unidades
--RAISE NOTICE 'Unidades %',  v_arr_unid;
 IF NOT v_es_valida THEN
     FOREACH v_elem IN ARRAY v_arr_unid
       LOOP
         v_es_valida = false;
         v_i = 1;
         WHILE not v_es_valida and v_i < array_length(v_arr_espec, 1) loop
           v_es_valida = v_elem between v_arr_espec[v_i] and v_arr_espec[v_i+1];
           --RAISE notice 'Elemento de unidades % Elemento de especificaciones inf % sup %', v_elem, v_arr_espec[v_i], v_arr_espec[v_i+1];
           v_i = v_i+1;
         end loop;
       END LOOP;
  END IF;
 RETURN v_es_valida;
END;
$$;


--
-- Name: verificar_act_promedio(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_act_promedio() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 vpromdivant double precision;
 vvariacion double precision;
 vpromedioext double precision;
BEGIN
  IF TG_OP='UPDATE' THEN
     vvariacion:=OLD.variacion;
     vpromedioext = OLD.promedioext;
  ELSE
     vvariacion:=null;
  END IF;

  if vvariacion is distinct from NEW.variacion then
    SELECT promdiv INTO vpromdivant 
      FROM cvp.calculos c left join cvp.caldiv d on d.periodo = c.periodoanterior and d.calculo = c.calculoanterior 
      WHERE d.division = '0' and c.periodo = NEW.periodo and c.calculo = NEW.calculo and d.producto = NEW.producto;
    NEW.promedioext := (NEW.variacion+100)*vpromdivant/100;
  else
    if vpromedioext is distinct from NEW.promedioext then
        SELECT promdiv INTO vpromdivant 
          FROM cvp.calculos c left join cvp.caldiv d on d.periodo = c.periodoanterior and d.calculo = c.calculoanterior
                              left join cvp.productos p on d.producto = p.producto      
          WHERE d.division = '0' and c.periodo = NEW.periodo and c.calculo = NEW.calculo and d.producto = NEW.producto and p.tipoexterno = 'D';
        if vpromdivant is null then 
            RAISE EXCEPTION 'El producto % no es externo definitivo. Sólo se permite ingresar variación', NEW.producto;
        else
            NEW.variacion := ((NEW.promedioext*100)/vpromdivant)-100;
        end if;
    end if;
  end if;

  RETURN NEW;
END;
$$;


--
-- Name: verificar_calcularprerep(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_calcularprerep() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  dummy text;
  hayPreRepLote1 integer;
  hayPreRepLote2 integer;
BEGIN
  if TG_OP='UPDATE' then
    SELECT distinct 1 INTO hayPreRepLote1
    FROM cvp.prerep p 
    LEFT JOIN cvp.relpre r on p.periodo = r.periodo and p.informante = r.informante and p.producto = r.producto
    LEFT JOIN cvp.relvis v on r.periodo = v.periodo and r.informante = v.informante and r.visita = v.visita and r.formulario = v.formulario
    WHERE p.periodo = NEW.periodo and v.panel >= 1 and v.panel <= 10;

    SELECT distinct 1 INTO hayPreRepLote2
    FROM cvp.prerep p 
    LEFT JOIN cvp.relpre r on p.periodo = r.periodo and p.informante = r.informante and p.producto = r.producto
    LEFT JOIN cvp.relvis v on r.periodo = v.periodo and r.informante = v.informante and r.visita = v.visita and r.formulario = v.formulario
    WHERE p.periodo = NEW.periodo and v.panel >= 11 and v.panel <= 20;
    
    if OLD.fechaCalculoPreRepLote1 is null and NEW.fechaCalculoPreRepLote1 is not null and hayPreRepLote1 is null
       --or OLD.fechaCalculoPreRepLote1<>NEW.fechaCalculoPreRepLote1 
       --27/11/17 no se va a recalcular la repregunta si ya se calculó una vez (Requerimiento IPCBA 371)
       --16/10/18 no se va a recalcular la repregunta si ya se calculó una vez para el bloque de 4 meses de impresión al que pertenece
       --el periodo (Requerimiento IPCBA 439)
    then
		dummy:=cvp.CalcularPreRep(new.periodo,1);
		dummy:=cvp.CalcularPreRep(cvp.MoverPeriodos(new.periodo,1),1);	   
		dummy:=cvp.CalcularPreRep(cvp.MoverPeriodos(new.periodo,2),1);	   
		dummy:=cvp.CalcularPreRep(cvp.MoverPeriodos(new.periodo,3),1);
    else
        if OLD.fechaCalculoPreRepLote1 is distinct from NEW.fechaCalculoPreRepLote1
        then --NO dejo que cambie la fecha de calculo de Prerep
           NEW.fechaCalculoPreRepLote1:=OLD.fechaCalculoPreRepLote1;
        end if;        
    end if;
    if OLD.fechaCalculoPreRepLote2 is null and NEW.fechaCalculoPreRepLote2 is not null and hayPreRepLote2 is null
       --or OLD.fechaCalculoPreRepLote2<>NEW.fechaCalculoPreRepLote2
       --27/11/17 no se va a recalcular la repregunta si ya se calculó una vez (Requerimiento IPCBA 371)
       --16/10/18 no se va a recalcular la repregunta si ya se calculó una vez para el bloque de 4 meses de impresión al que pertenece
       --el periodo (Requerimiento IPCBA 439)
    then
		dummy:=cvp.CalcularPreRep(new.periodo,2); 
		dummy:=cvp.CalcularPreRep(cvp.MoverPeriodos(new.periodo,1),2);	   
		dummy:=cvp.CalcularPreRep(cvp.MoverPeriodos(new.periodo,2),2);	   
		dummy:=cvp.CalcularPreRep(cvp.MoverPeriodos(new.periodo,3),2);	   
    else
        if OLD.fechaCalculoPreRepLote2 is distinct from NEW.fechaCalculoPreRepLote2
        then --NO dejo que cambie la fecha de calculo de Prerep
           NEW.fechaCalculoPreRepLote2:=OLD.fechaCalculoPreRepLote2;
        end if;        
    end if;
  end if;
  RETURN NEW;
END;
$$;


--
-- Name: verificar_cargado_dm(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_cargado_dm() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
vPeriodo     varchar(20);
vpanel       INTEGER;
vtarea       INTEGER;
vtabla       varchar(100);
vinformante  integer;
vvisita      integer;
vformulario  integer;
vpermitido   boolean;
vcargado     text;
vdescargado  text;
vproducto    character varying(8);
vobservacion integer;
BEGIN
vpermitido=true;
vtabla= TG_TABLE_NAME;
CASE vtabla
    WHEN 'relvis' THEN
        IF TG_OP= 'DELETE' THEN
            vperiodo= old.periodo;   
            vpanel= old.panel;   
            vtarea= old.tarea;   
        ELSE
            vperiodo= new.periodo;   
            vpanel= new.panel;   
            vtarea= new.tarea;   
        END IF;
        SELECT cargado IS NULL AND descargado IS NULL 
               OR cargado IS NOT NULL AND descargado IS NOT NULL AND cargado < descargado 
               OR cargado IS NULL AND descargado IS NOT NULL, 
               CASE WHEN cargado IS NULL THEN 'No cargado aún...' ELSE 'Cargado a DM el '||to_char(cargado,'DD/MM/YY hh24:mm:ss') END,
               CASE WHEN descargado IS NULL THEN 'No descargado aún...' ELSE 'Descargado de DM el '||to_char(descargado,'DD/MM/YY hh24:mm:ss') END
               INTO vpermitido, vcargado, vdescargado 
        FROM cvp.reltar
        WHERE periodo = vperiodo AND panel = vpanel AND tarea = vtarea;
    WHEN 'relpre' THEN
        IF TG_OP= 'DELETE' THEN
            vperiodo= old.periodo;   
            vinformante= old.informante;   
            vvisita= old.visita;   
            vformulario= old.formulario;   
        ELSE
            vperiodo= new.periodo;   
            vinformante= new.informante;   
            vvisita= new.visita;   
            vformulario= new.formulario;   
        END IF;
        SELECT cargado IS NULL AND descargado IS NULL 
               OR cargado IS NOT NULL AND descargado IS NOT NULL AND cargado < descargado 
               OR cargado IS NULL AND descargado IS NOT NULL, 
               CASE WHEN cargado IS NULL THEN 'No cargado aún...' ELSE 'Cargado a DM el '||to_char(cargado,'DD/MM/YY hh24:mm:ss') END,
               CASE WHEN descargado IS NULL THEN 'No descargado aún...' ELSE 'Descargado de DM el '||to_char(descargado,'DD/MM/YY hh24:mm:ss') END,
               r.panel, r.tarea
               INTO vpermitido, vcargado, vdescargado, vpanel, vtarea 
        FROM cvp.relvis r
        LEFT JOIN cvp.reltar t ON r.periodo = t.periodo AND r.panel = t.panel AND r.tarea = t.tarea   
        WHERE r.periodo = vperiodo AND r.informante = vinformante AND r.visita = vvisita AND r.formulario = vformulario;
    WHEN 'relatr' THEN
        IF TG_OP= 'DELETE' THEN
            vperiodo= old.periodo;   
            vinformante= old.informante;   
            vvisita= old.visita;   
            vproducto= old.producto;   
            vobservacion= old.observacion;   
        ELSE
            vperiodo= new.periodo;   
            vinformante= new.informante;   
            vvisita= new.visita;   
            vproducto= new.producto;   
            vobservacion= new.observacion;   
        END IF;
        SELECT cargado IS NULL AND descargado IS NULL 
               OR cargado IS NOT NULL AND descargado IS NOT NULL AND cargado < descargado 
               OR cargado IS NULL AND descargado IS NOT NULL, 
               CASE WHEN cargado IS NULL THEN 'No cargado aún...' ELSE 'Cargado a DM el '||to_char(cargado,'DD/MM/YY hh24:mm:ss') END,
               CASE WHEN descargado IS NULL THEN 'No descargado aún...' ELSE 'Descargado de DM el '||to_char(descargado,'DD/MM/YY hh24:mm:ss') END,
               r.panel, r.tarea
               INTO vpermitido, vcargado, vdescargado, vpanel, vtarea 
        FROM cvp.relpre p
        LEFT JOIN cvp.relvis r ON p.periodo = r.periodo AND p.informante = r.informante AND p.visita = r.visita AND p.formulario = r.formulario 
        LEFT JOIN cvp.reltar t ON r.periodo = t.periodo AND r.panel = t.panel AND r.tarea = t.tarea   
        WHERE p.periodo = vperiodo AND p.informante = vinformante AND p.visita = vvisita AND p.producto = vproducto AND p.observacion = vobservacion;
END CASE;
IF NOT vpermitido THEN
    RAISE EXCEPTION 'No se permite modificar el periodo %, panel %, tarea %. %, %', vperiodo, vpanel, vtarea, vcargado, vdescargado;
    RETURN NULL;
END IF;
IF TG_OP='DELETE' THEN
   RETURN OLD;
ELSE   
   RETURN NEW;
END IF;
END;
$$;


--
-- Name: verificar_generar_externos(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_generar_externos() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    if OLD.fechageneracionexternos is null and NEW.fechageneracionexternos is not null
       or OLD.fechageneracionexternos<>NEW.fechageneracionexternos
    then
        --NovProd (externos)
        INSERT INTO cvp.NovProd (periodo, calculo, producto, promedioext, variacion)
        (SELECT l.periodo, l.calculo, c.producto, c.promdiv, 0
            FROM cvp.calculos l
            LEFT JOIN cvp.caldiv c ON c.periodo = l.periodoanterior AND c.calculo = l.calculoanterior
            LEFT JOIN cvp.productos p ON c.producto = p.producto
            LEFT JOIN cvp.novprod n ON l.periodo = n.periodo AND l.calculo = n.calculo AND c.producto = n.producto 
            WHERE l.periodo = NEW.periodo AND l.calculo = NEW.calculo /*actual*/ 
                AND c.division = '0'
                AND p.tipoexterno IS NOT NULL /*productos seleccionados para ser externos, Definitivos o Provisorios*/ 
                AND n.producto IS NULL /*los que aún no están en novprod*/
        );
    end if;
  RETURN NEW;
END;
$$;


--
-- Name: verificar_generar_formulario(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_generar_formulario() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  -- V080923
  -- Modif: V100707
  dummy text;
BEGIN
  IF TG_OP='UPDATE' THEN
    IF /*(*/ OLD.razon IS DISTINCT FROM NEW.razon /*OR OLD.supervisor IS DISTINCT FROM NEW.supervisor)*/ AND NEW.visita = 1 THEN
       NEW.fechageneracion:= current_timestamp(3);
       dummy:=cvp.generar_formulario(new.periodo,new.informante,new.formulario,new.fechageneracion); 
    END IF;
  END IF;
  RETURN NEW;
END;
$$;


--
-- Name: verificar_generar_panel(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_generar_panel() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  dummy text;
BEGIN
  if TG_OP='UPDATE' then
    if OLD.fechageneracionpanel is null and NEW.fechageneracionpanel is not null
       or OLD.fechageneracionpanel<>NEW.fechageneracionpanel
    then
       dummy:=cvp.generar_panel(new.periodo,new.panel,new.fechasalida,new.fechageneracionpanel); 
    end if;
  end if;
  RETURN NEW;
END;
$$;


--
-- Name: verificar_generar_periodo(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_generar_periodo() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  dummy text;
  vperiodoanterior character varying(11);
  vexiste integer; 
BEGIN
  vperiodoanterior := cvp.moverperiodos(NEW.periodo,-1);
  SELECT 1 INTO vexiste
  FROM cvp.periodos
  WHERE periodo = vperiodoanterior;
  IF vexiste = 1 THEN
    NEW.periodoanterior:= vperiodoanterior;
  ELSE
    NEW.periodoanterior:= NULL;
  END IF;
  if TG_OP='UPDATE' then
    if OLD.fechageneracionperiodo is null and NEW.fechageneracionperiodo is not null
       or OLD.fechageneracionperiodo<>NEW.fechageneracionperiodo
    then
       dummy:=cvp.generar_periodo(new.periodo,new.fechageneracionperiodo); 
    end if;
  end if;
  RETURN NEW;
END;
$$;


--
-- Name: verificar_ingresando(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_ingresando() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    vIngresando varchar(1);
    vPeriodo varchar(20);
    vCerrarIngresoCampoHastaPanel integer;
    vpanel      INTEGER;
    vformulario INTEGER;
    vtabla      varchar(100);
    vinformante integer;
    vvisita     integer;
    vproducto   text;
    vobservacion integer;
    vatributo   integer;
    voperativo  text;
    vesadministrador integer;
    vescoordinacion integer;
    vhabilitado character varying(1);
    vconpermiso boolean;
    vverificado_rec character varying(1);
BEGIN
    SELECT 1 INTO vesadministrador
    FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
    WHERE a.roleid=p.oid AND p.rolname='cvp_administrador' ; 
    SELECT 1 INTO vescoordinacion
    FROM pg_roles p,  
    (SELECT r.rolname, r.oid,m.member, m.roleid  
       FROM pg_auth_members m, pg_roles r
       WHERE m.member=r.oid 
         AND r.rolname=current_user
    )a
    WHERE a.roleid=p.oid AND p.rolname='cvp_coordinacion' ;    
    IF vesadministrador=1 OR vescoordinacion=1 THEN 
       vconpermiso = true; 
    ELSE 
       vconpermiso = false; 
    END IF;    
    vtabla= TG_TABLE_NAME;
    IF TG_OP='DELETE' THEN
       vPeriodo:=OLD.Periodo;
    ELSE
       vPeriodo:=NEW.Periodo;
    END IF;
    SELECT Ingresando, CerrarIngresoCampoHastaPanel, habilitado 
            INTO vIngresando, vCerrarIngresoCampoHastaPanel, vhabilitado
        FROM cvp.periodos where Periodo=vPeriodo;
    --RAISE EXCEPTION 'Vconpermiso %',vconpermiso;
    IF vIngresando = 'N' OR (vhabilitado = 'N' and not vconpermiso) then
        RAISE EXCEPTION 'Periodo Cerrado. Actualizacion no permitida en tabla %', vtabla;
        RETURN NULL;
    ELSE
        CASE vtabla
           WHEN 'relvis' THEN
               IF TG_OP= 'DELETE' THEN
                   vformulario= old.formulario;   
                   vpanel= old.panel;   
               ELSE
                   vformulario=new.formulario;
                   vpanel= new.panel;   
               END IF;
           WHEN 'relpre' THEN
               IF TG_OP= 'DELETE' THEN
                   vformulario = OLD.formulario;  
                   vperiodo= OLD.periodo;
                   vinformante= OLD.informante;
                   vvisita= OLD.visita;
               ELSE    
                   vformulario=new.formulario;
                   vperiodo= NEW.periodo;
                   vinformante= NEW.informante;
                   vvisita= NEW.visita;
               END IF;
               SELECT panel INTO  vpanel
                  FROM cvp.relvis rv 
                  WHERE  rv.periodo=vperiodo AND
                                    rv.informante=vinformante AND
                                    rv.visita=vvisita AND
                                    rv.formulario=vformulario;
           WHEN 'relatr' THEN
                IF TG_OP='DELETE' then
                   vperiodo= OLD.periodo;
                   vproducto= OLD.producto;
                   vobservacion= OLD.observacion;
                   vinformante= OLD.informante;
                   vvisita= OLD.visita;
                   vatributo= OLD.atributo;
                ELSE   
                   vperiodo= NEW.periodo;
                   vproducto= NEW.producto;
                   vobservacion= NEW.observacion;
                   vinformante= NEW.informante;
                   vvisita= NEW.visita;
                   vatributo= NEW.atributo;
                END IF;              
               SELECT  rv.formulario, rv.panel
                  INTO  vformulario  , vpanel
                  FROM cvp.relatr ra 
                    JOIN cvp.relpre rp ON ra.periodo=rp.periodo AND
                                       ra.producto=rp.producto AND
                                       ra.observacion=rp.observacion AND
                                       ra.informante=rp.informante AND
                                       ra.visita=rp.visita
                    JOIN cvp.relvis rv ON ra.periodo=rv.periodo AND
                                          ra.informante=rv.informante AND
                                          ra.visita=rv.visita AND
                                          rp.formulario=rv.formulario
                  WHERE ra.periodo=vperiodo and ra.producto=vproducto and
                        ra.observacion=vobservacion and ra.informante=vinformante and
                        ra.visita=vvisita and ra.atributo=vatributo ;                    
           ELSE
               vformulario=null;   
               vpanel= null;   
        END CASE;   
        IF vpanel IS NOT NULL AND vformulario IS NOT NULL  THEN
            SELECT operativo INTO voperativo FROM cvp.formularios where formulario=vformulario;
            IF vIngresando='S' AND voperativo='C' AND vpanel <=vCerrarIngresoCampoHastaPanel THEN 
               RAISE EXCEPTION 'El panel % esta cerrado para ingreso de campo', vpanel;
               RETURN NULL;
            END IF;
        END IF;
        /* Se puede editar la encuesta después de verificar la recepción, comento esta parte
        IF vtabla = 'relvis' THEN
            IF TG_OP in ('UPDATE','DELETE') then
                IF NEW.verificado_rec = OLD.verificado_rec AND NEW.verificado_rec ='S' THEN
                    RAISE EXCEPTION 'Se ha verificado la recepción para periodo % informante % visita % formulario %', NEW.periodo, NEW.informante, NEW.visita, NEW.formulario;
                    RETURN NULL;
                END IF;
            END IF;
        ELSE
            IF vperiodo IS NOT NULL AND vinformante IS NOT NULL AND vvisita IS NOT NULL AND vformulario IS NOT NULL THEN
                SELECT verificado_rec INTO vverificado_rec 
                FROM cvp.relvis WHERE 
                periodo = vperiodo AND
                informante = vinformante AND
                visita = vvisita AND
                formulario = vformulario;
                IF vverificado_rec='S' THEN 
                    RAISE EXCEPTION 'Se ha verificado la recepción para periodo % informante % visita % formulario %', vperiodo, vinformante, vvisita, vformulario;
                    RETURN NULL;
                END IF;
            END IF;
        END IF;
        */
    END IF;    
    if TG_OP='DELETE' then
       RETURN OLD;
    ELSE   
       RETURN NEW;
    END IF;
END;
$$;


--
-- Name: verificar_insercion_ultima_visita_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_insercion_ultima_visita_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
 vHay INTEGER; 
 vPanel INTEGER;
 vTarea INTEGER;
BEGIN
IF OLD.ultima_visita IS DISTINCT FROM NEW.ultima_visita and OLD.ultima_visita is TRUE THEN
  SELECT DISTINCT 1 INTO vHay
    FROM cvp.prodatr p, cvp.parametros par, cvp.atributos a 
    WHERE p.atributo = a.atributo AND (a.Es_Vigencia = TRUE OR par.puedeagregarvisita = 'S') AND p.producto = new.producto;
	
  IF vHay is null THEN
     RAISE EXCEPTION 'No se permite agregar visitas para este producto % ',new.producto;
     RETURN NULL;
  ELSE
     SELECT 1 INTO vHay  
       FROM cvp.relvis v
       WHERE v.periodo = new.periodo and v.informante = new.informante and v.visita = new.visita+1 and v.formulario = new.formulario;
       
     IF vHay is null THEN
       SELECT panel, tarea INTO vPanel, vTarea 
         FROM cvp.relvis v
         WHERE v.periodo = new.periodo and v.informante = new.informante and v.ultima_visita = TRUE and v.formulario = new.formulario;
       
       UPDATE cvp.relvis SET ultima_visita = NULL 
         WHERE periodo = new.periodo and informante = new.informante and ultima_visita = TRUE and formulario = new.formulario; 
       
	   --RAISE NOTICE 'verificar_insercion_ultima_visita_trg PERIODO: % informante: % formulario: % visita: % ', new.periodo, new.informante, new.formulario, new.visita+1;
       
	   INSERT INTO cvp.relvis
         (periodo ,
         informante,
         formulario,
         panel,
         tarea,
         visita,
         ultima_visita)
         VALUES (new.periodo, new.informante, new.formulario, vPanel, vTarea, new.visita+1, TRUE);              
     END IF;
 
     new.ultima_visita = null;
  END IF;       
END IF; 
  RETURN NEW;
END;
$$;


--
-- Name: verificar_lanzamiento_calculo(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_lanzamiento_calculo() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  -- V080907
  dummy text;
BEGIN
  if TG_OP='UPDATE' then
    if OLD.fechacalculo is null and NEW.fechacalculo is not null
       or OLD.fechacalculo<>NEW.fechacalculo
    then
       dummy:=cvp.CalcularUnPeriodo(new.periodo,new.calculo); 
    end if;
  end if;
  RETURN NEW;
END;
$$;


--
-- Name: verificar_sincronizacion(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_sincronizacion() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$

DECLARE
 vexisterazon integer:=null;
BEGIN
IF new.vencimiento_sincronizacion IS NOT NULL THEN
    SELECT DISTINCT 1 INTO vexisterazon
    FROM cvp.relvis
    WHERE periodo = new.periodo AND panel = new.panel AND tarea = new.tarea AND not(razon IS NULL OR razon=0);
    IF vexisterazon is distinct from NULL THEN  
        RAISE EXCEPTION 'Existe algún formulario con razon no nula en el periodo: %, panel: %, tarea: %',new.periodo, new.panel, new.tarea;
        RETURN NULL;
    END IF;
END IF;
RETURN NEW;
END;
$$;


--
-- Name: verificar_valor_pesos_trg(); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.verificar_valor_pesos_trg() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  ves_nacional boolean;
BEGIN 
 SELECT es_nacional  INTO ves_nacional
   FROM cvp.monedas
   WHERE moneda=NEW.moneda;
 IF ves_nacional AND NEW.valor_pesos IS DISTINCT FROM 1 THEN 
   RAISE EXCEPTION 'No se permite actualizar valor_pesos si moneda es nacional % ',new.moneda;
   RETURN NULL;
 END IF;
 RETURN NEW;     
END;  
$$;


--
-- Name: voypor(text); Type: FUNCTION; Schema: cvp; Owner: -
--

CREATE FUNCTION cvp.voypor(p_mensaje text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_prefijos text:='';
BEGIN
  INSERT INTO cvp.bitacora (que) VALUES ('voy por: '|| v_prefijos || p_mensaje);
END;
$$;


--
-- Name: concato(text); Type: AGGREGATE; Schema: comun; Owner: -
--

CREATE AGGREGATE comun.concato(text) (
    SFUNC = comun.concato_add,
    STYPE = text,
    INITCOND = '',
    FINALFUNC = comun.concato_fin
);


--
-- Name: maxlen(boolean); Type: AGGREGATE; Schema: comun; Owner: -
--

CREATE AGGREGATE comun.maxlen(boolean) (
    SFUNC = comun.maxlen_unir,
    STYPE = boolean,
    FINALFUNC = comun.maxlen_fin
);


--
-- Name: maxlen(date); Type: AGGREGATE; Schema: comun; Owner: -
--

CREATE AGGREGATE comun.maxlen(date) (
    SFUNC = comun.maxlen_unir,
    STYPE = date,
    FINALFUNC = comun.maxlen_fin
);


--
-- Name: maxlen(double precision); Type: AGGREGATE; Schema: comun; Owner: -
--

CREATE AGGREGATE comun.maxlen(double precision) (
    SFUNC = comun.maxlen_unir,
    STYPE = double precision,
    FINALFUNC = comun.maxlen_fin
);


--
-- Name: maxlen(integer); Type: AGGREGATE; Schema: comun; Owner: -
--

CREATE AGGREGATE comun.maxlen(integer) (
    SFUNC = comun.maxlen_unir,
    STYPE = integer,
    FINALFUNC = comun.maxlen_fin
);


--
-- Name: maxlen(text); Type: AGGREGATE; Schema: comun; Owner: -
--

CREATE AGGREGATE comun.maxlen(text) (
    SFUNC = comun.maxlen_unir,
    STYPE = text,
    FINALFUNC = comun.maxlen_fin
);


SET default_with_oids = false;

--
-- Name: agrupaciones; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.agrupaciones (
    agrupacion character varying(9) NOT NULL,
    nombreagrupacion character varying(250),
    paravarioshogares boolean DEFAULT false NOT NULL,
    calcular_junto_grupo character varying(1),
    valoriza boolean,
    tipo_agrupacion character varying(10),
    CONSTRAINT "texto invalido en nombreagrupacion de tabla agrupaciones" CHECK (comun.cadena_valida((nombreagrupacion)::text, 'castellano'::text))
);


--
-- Name: atributos; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.atributos (
    atributo integer NOT NULL,
    nombreatributo character varying(250),
    tipodato character varying(12) NOT NULL,
    abratributo character varying(250),
    escantidad character varying(1) DEFAULT 'N'::character varying,
    unidaddemedida character varying(25),
    es_vigencia boolean,
    valorinicial character varying(20),
    visible cvp.sino_dom DEFAULT 'S'::character varying NOT NULL,
    CONSTRAINT "El tipo de atributo debe ser C (caracter) o N (número)" CHECK (((tipodato)::text = ANY (ARRAY[('C'::character varying)::text, ('N'::character varying)::text]))),
    CONSTRAINT atributos_es_vigencia_check CHECK (es_vigencia),
    CONSTRAINT "texto invalido en abratributo de tabla atributos" CHECK (comun.cadena_valida((abratributo)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en nombreatributo de tabla atributos" CHECK (comun.cadena_valida((nombreatributo)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en unidaddemedida de tabla atributos" CHECK (comun.cadena_valida((unidaddemedida)::text, 'extendido'::text)),
    CONSTRAINT "texto invalido en valorinicial de tabla atributos" CHECK (comun.cadena_valida((valorinicial)::text, 'amplio'::text))
);

--
-- Name: periodos; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.periodos (
    periodo character varying(11) NOT NULL,
    ano integer NOT NULL,
    mes integer NOT NULL,
    visita integer DEFAULT 1 NOT NULL,
    ingresando cvp.sino_dom DEFAULT 'N'::character varying,
    periodoanterior character varying(10),
    fechageneracionperiodo timestamp without time zone,
    comentariosper character varying(500),
    fechacalculoprereplote1 timestamp without time zone,
    fechacalculoprereplote2 timestamp without time zone,
    fecha_cierre_ingreso timestamp without time zone,
    cerraringresocampohastapanel integer DEFAULT 0 NOT NULL,
    habilitado cvp.sino_dom DEFAULT 'S'::character varying,
    CONSTRAINT cerraringresocampohastapanel_invalido CHECK (((cerraringresocampohastapanel >= 0) AND (cerraringresocampohastapanel <= 20))),
    CONSTRAINT formato_periodo CHECK ((((substr((periodo)::text, 2, 4))::integer = ano) AND ((substr((periodo)::text, 7, 2))::integer = mes) AND (length((periodo)::text) = 8)))
);


--
-- Name: bienvenida; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.bienvenida AS
 SELECT 9 AS orden,
    'version'::text AS codigo,
    'V160909'::text AS dato,
    'es la versión de la base de datos'::text AS explicacion,
    'N1'::text AS nivel
UNION
 SELECT 10 AS orden,
    'version_cliente'::text AS codigo,
    'V190813'::text AS dato,
    'es la versión necesaria en el cliente'::text AS explicacion,
    'N9'::text AS nivel
UNION
 SELECT 11 AS orden,
    'session_user'::text AS codigo,
    "session_user"() AS dato,
    'es el usuario conectado'::text AS explicacion,
    'N1'::text AS nivel
UNION
 SELECT 12 AS orden,
    'nivel_usuario'::text AS codigo,
        CASE
            WHEN pg_has_role('cvp_administrador'::name, 'member'::text) THEN 'N3'::text
            WHEN pg_has_role('cvp_analistas'::name, 'member'::text) THEN 'N2'::text
            WHEN pg_has_role('cvp_usuarios'::name, 'member'::text) THEN 'N1'::text
            WHEN pg_has_role('cvp_recepcionista'::name, 'member'::text) THEN 'N1'::text
            ELSE 'N0'::text
        END AS dato,
    'es el nivel de permisos del usuario'::text AS explicacion,
    'N1'::text AS nivel
UNION
 SELECT 13 AS orden,
    'current_timestamp'::text AS codigo,
    to_char(now(), 'DD/MM/YYYY HH24:MI:SS'::text) AS dato,
    'es la fecha del sistema'::text AS explicacion,
    'N1'::text AS nivel
UNION
 SELECT 14 AS orden,
    'base_instalada'::text AS codigo,
    (((( SELECT sql_implementation_info.character_value
           FROM information_schema.sql_implementation_info
          WHERE ((sql_implementation_info.implementation_info_id)::text = '17'::text)))::text || ' '::text) || (( SELECT sql_implementation_info.character_value
           FROM information_schema.sql_implementation_info
          WHERE ((sql_implementation_info.implementation_info_id)::text = '18'::text)))::text) AS dato,
    'es la base de datos que está instalada'::text AS explicacion,
    'N3'::text AS nivel
UNION
 SELECT 21 AS orden,
    'separador'::text AS codigo,
    '- - - - - -'::text AS dato,
    '- - - - - - - - - - - - - - - - - - - - -'::text AS explicacion,
    'N1'::text AS nivel
UNION
 SELECT 22 AS orden,
    'min_periodo'::text AS codigo,
    min((periodos.periodo)::text) AS dato,
    'es el periodo abierto más antiguo'::text AS explicacion,
    'N3'::text AS nivel
   FROM cvp.periodos
  WHERE ((periodos.ingresando)::text = 'S'::text)
UNION
 SELECT 23 AS orden,
    'max_periodo'::text AS codigo,
    max((periodos.periodo)::text) AS dato,
    'es el último periodo abierto '::text AS explicacion,
    'N1'::text AS nivel
   FROM cvp.periodos
  WHERE ((periodos.ingresando)::text = 'S'::text)
UNION
 SELECT 24 AS orden,
    'rol_user'::text AS codigo,
    r.listaroles AS dato,
    (
        CASE
            WHEN (r.listaroles ~~ '%,%'::text) THEN 'son los roles '::text
            ELSE 'es el rol '::text
        END || 'del usuario conectado'::text) AS explicacion,
    'N1'::text AS nivel
   FROM ( SELECT string_agg((pg_roles.rolname)::text, ','::text) AS listaroles
           FROM pg_roles
          WHERE (pg_has_role("session_user"(), pg_roles.oid, 'member'::text) AND (pg_roles.rolname <> "session_user"()))) r;


--
-- Name: bitacora; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.bitacora (
    cuando timestamp without time zone DEFAULT now(),
    que text
);


--
-- Name: blaatr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.blaatr (
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    atributo integer NOT NULL,
    valor character varying(250),
    visita integer DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    validar_con_valvalatr boolean,
    CONSTRAINT "El valor de Validar_con_ValValAtr debe ser TRUE o nulo" CHECK (validar_con_valvalatr),
    CONSTRAINT "no se puede poner el sombrero en el atributo" CHECK (((valor)::text !~~ '%~%'::text))
);


--
-- Name: blapre; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.blapre (
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    formulario integer NOT NULL,
    precio double precision,
    tipoprecio character varying(10),
    visita integer DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentariosrelpre text,
    cambio character varying(1),
    precionormalizado double precision,
    especificacion integer NOT NULL,
    ultima_visita boolean,
    CONSTRAINT "El precio no puede ser 0 o negativo" CHECK ((precio > (0)::double precision)),
    CONSTRAINT "El valor del campo cambio debe ser C o nulo" CHECK (((cambio)::text = 'C'::text))
);


--
-- Name: cal_mensajes; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.cal_mensajes (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    corrida timestamp without time zone DEFAULT now() NOT NULL,
    paso character varying(200) NOT NULL,
    renglon integer NOT NULL,
    tipo character varying(10) DEFAULT 'log'::character varying NOT NULL,
    mensaje text,
    producto character varying(8),
    division character varying(1000),
    informante integer,
    observacion integer,
    formulario integer,
    grupo character varying(9),
    agrupacion character varying(9),
    fechahora timestamp without time zone,
    CONSTRAINT "tipo: error o log o comenzo o finalizo" CHECK (((tipo)::text = ANY (ARRAY[('error'::character varying)::text, ('log'::character varying)::text, ('comenzo'::character varying)::text, ('finalizo'::character varying)::text])))
);


--
-- Name: calbase_div; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calbase_div (
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    division character varying(250) NOT NULL,
    ultimo_mes_anterior_bajas character varying(11),
    CONSTRAINT "texto invalido en division de tabla calbase_div" CHECK (comun.cadena_valida((division)::text, 'amplio'::text))
);


--
-- Name: calbase_obs; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calbase_obs (
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    informante integer NOT NULL,
    observacion integer NOT NULL,
    periodo_aparicion character varying(11),
    incluido boolean,
    periodo_anterior_baja character varying(11)
);


--
-- Name: calbase_prod; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calbase_prod (
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    mes_inicio character varying(11)
);


--
-- Name: calculos; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calculos (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    esperiodobase character varying(1) DEFAULT 'N'::character varying,
    periodoanterior character varying(11),
    fechacalculo timestamp without time zone,
    calculoanterior integer,
    abierto character varying(1) DEFAULT 'S'::character varying NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    agrupacionprincipal character varying(10) DEFAULT 'A'::character varying NOT NULL,
    valido character varying(1) DEFAULT 'N'::character varying NOT NULL,
    pb_calculobase integer,
    motivocopia text,
    fechageneracionexternos timestamp without time zone,
    estimacion integer DEFAULT 0 NOT NULL,
    transmitir_canastas character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fechatransmitircanastas timestamp without time zone,
    denominadordefinitivosegimp boolean DEFAULT true NOT NULL,
    descartedefinitivosegimp boolean DEFAULT true NOT NULL,
    hasta_panel integer,
    CONSTRAINT "Abierto debe ser S (Si) o N (No)" CHECK (((abierto)::text = ANY (ARRAY['S'::text, 'N'::text]))),
    CONSTRAINT "Transmitir Canastas debe ser S (Si) o N (No)" CHECK (((transmitir_canastas)::text = ANY (ARRAY['S'::text, 'N'::text]))),
    CONSTRAINT "texto invalido en motivocopia de tabla calculos" CHECK (comun.cadena_valida(motivocopia, 'amplio'::text))
);


--
-- Name: calculos_def; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calculos_def (
    calculo integer NOT NULL,
    definicion text,
    principal boolean,
    agrupacionprincipal character varying(10) DEFAULT 'A'::character varying NOT NULL,
    basado_en_extraccion_calculo integer,
    basado_en_extraccion_muestra integer,
    para_rellenado_de_base boolean DEFAULT false NOT NULL,
    grupo_raiz character varying(9),
    rellenante_de integer,
    CONSTRAINT calculos_def_principal_check CHECK (principal),
    CONSTRAINT "texto invalido en definicion de tabla calculos_def" CHECK (comun.cadena_valida(definicion, 'amplio'::text))
);


--
-- Name: caldiv; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.caldiv (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    division character varying(1000) NOT NULL,
    prompriimpact double precision,
    prompriimpant double precision,
    cantpriimp integer,
    promprel double precision,
    promdiv double precision,
    impdiv character varying(10),
    cantincluidos integer,
    cantrealesincluidos integer,
    cantrealesexcluidos integer,
    promvar double precision,
    cantaltas integer,
    promaltas double precision,
    cantbajas integer,
    prombajas double precision,
    cantimputados integer,
    ponderadordiv double precision,
    umbralpriimp integer,
    umbraldescarte integer,
    umbralbajaauto integer,
    cantidadconprecio integer,
    profundidad integer,
    divisionpadre character varying(500),
    tipo_promedio character varying(20),
    raiz boolean,
    cantexcluidos integer,
    promexcluidos double precision,
    promimputados double precision,
    promrealesincluidos double precision,
    promrealesexcluidos double precision,
    promedioredondeado double precision,
    cantrealesdescartados integer,
    cantpreciostotales integer,
    cantpreciosingresados integer,
    cantconprecioparacalestac integer,
    promsinimpext double precision,
    promrealessincambio double precision,
    promrealessincambioant double precision,
    promsinaltasbajas double precision,
    promsinaltasbajasant double precision,
    CONSTRAINT "la division raiz debe ser 0" CHECK (((raiz IS TRUE) = ((division)::text = '0'::text))),
    CONSTRAINT "la division raiz debe tener profundidad 0" CHECK (((raiz IS TRUE) = (profundidad = 0))),
    CONSTRAINT "la division raiz no debe tener padre" CHECK ((((raiz IS TRUE) = (divisionpadre IS NULL)) OR (calculo < '-1'::integer))),
    CONSTRAINT "texto invalido en division de tabla caldiv" CHECK (comun.cadena_valida((division)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en divisionpadre de tabla caldiv" CHECK (comun.cadena_valida((divisionpadre)::text, 'amplio'::text))
);


--
-- Name: calprodresp; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calprodresp (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    responsable character varying(30),
    revisado cvp.sino_dom DEFAULT 'N'::character varying,
    observaciones text
);


--
-- Name: grupos; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.grupos (
    agrupacion character varying(9) NOT NULL,
    grupo character varying(9) NOT NULL,
    nombregrupo character varying(250),
    grupopadre character varying(9),
    ponderador double precision,
    nivel integer,
    esproducto character varying(1) DEFAULT 'N'::character varying,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    nombrecanasta character varying(250),
    agrupacionorigen character varying(9),
    detallarcanasta character varying(1),
    explicaciongrupo text,
    responsable character varying(30),
    CONSTRAINT "Si esproducto=S o agrupacionorigen no nula => nombregrupo nulo" CHECK (((NOT (((esproducto)::text = 'S'::text) OR (agrupacionorigen IS NOT NULL))) OR (nombregrupo IS NULL))),
    CONSTRAINT "Solo se puede usar como origen la agrupacion A" CHECK (((agrupacionorigen)::text = 'A'::text)),
    CONSTRAINT "texto invalido en explicaciongrupo de tabla grupos" CHECK (comun.cadena_valida(explicaciongrupo, 'amplio'::text)),
    CONSTRAINT "texto invalido en nombrecanasta de tabla grupos" CHECK (comun.cadena_valida((nombrecanasta)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en nombregrupo de tabla grupos" CHECK (comun.cadena_valida((nombregrupo)::text, 'castellano'::text))
);


--
-- Name: gru_grupos; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.gru_grupos AS
 WITH RECURSIVE hijos_de(agrupacion, grupo_padre, grupo, esproducto) AS (
         SELECT grupos.agrupacion,
            grupos.grupopadre AS grupo_padre,
            grupos.grupo,
            grupos.esproducto
           FROM cvp.grupos
          WHERE (grupos.grupopadre IS NOT NULL)
        UNION ALL
         SELECT p.agrupacion,
            g.grupopadre AS grupo_padre,
            p.grupo,
            p.esproducto
           FROM (hijos_de p
             JOIN cvp.grupos g ON ((((g.grupo)::text = (p.grupo_padre)::text) AND ((g.agrupacion)::text = (p.agrupacion)::text))))
          WHERE (g.grupopadre IS NOT NULL)
        )
 SELECT hijos_de.agrupacion,
    hijos_de.grupo_padre,
    hijos_de.grupo,
    hijos_de.esproducto
   FROM hijos_de
UNION ALL
 SELECT DISTINCT grupos.agrupacion,
    grupos.grupo AS grupo_padre,
    grupos.grupo,
    grupos.esproducto
   FROM cvp.grupos
  WHERE ((grupos.esproducto)::text = 'N'::text)
  ORDER BY 3, 2, 1;


--
-- Name: productos; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.productos (
    producto character varying(8) NOT NULL,
    nombreproducto character varying(250),
    formula character varying(20) DEFAULT 'General'::character varying NOT NULL,
    estacional character varying(1) DEFAULT 'N'::character varying NOT NULL,
    imputacon character varying(8),
    cantperaltaauto integer,
    cantperbajaauto integer,
    unidadmedidaporunidcons character varying(20),
    esexternohabitual cvp.sino_dom,
    tipocalculo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    cantobs integer,
    unidadmedidaabreviada character varying(50),
    codigo_ccba character varying(8),
    porc_adv_inf double precision,
    porc_adv_sup double precision,
    tipoexterno character varying(1),
    nombreparaformulario character varying(250),
    serepregunta boolean DEFAULT false,
    nombreparapublicar text,
    calculo_desvios character varying(1) DEFAULT 'N'::character varying,
    CONSTRAINT "TipoCalculo: D(Dividido) o A(Autoponderado)" CHECK (((tipocalculo)::text = ANY (ARRAY[('A'::character varying)::text, ('D'::character varying)::text]))),
    CONSTRAINT "Tipoexterno: D(Definitivo) o P(Provisorio)" CHECK (((tipoexterno)::text = ANY (ARRAY[('P'::character varying)::text, ('D'::character varying)::text]))),
    CONSTRAINT "calculo_desvios: N(Normal) o E(Especial)" CHECK (((calculo_desvios)::text = ANY (ARRAY['N'::text, 'E'::text]))),
    CONSTRAINT "texto invalido en formula de tabla productos" CHECK (comun.cadena_valida((formula)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en nombreproducto de tabla productos" CHECK (comun.cadena_valida((nombreproducto)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en unidadmedidaporunidcons de tabla productos" CHECK (comun.cadena_valida((unidadmedidaporunidcons)::text, 'extendido'::text))
);


--
-- Name: caldiv_vw; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.caldiv_vw AS
 SELECT c.periodo,
    c.calculo,
    c.producto,
    p.nombreproducto,
    c.division,
    c.prompriimpact,
    c.prompriimpant,
        CASE
            WHEN ((c.prompriimpact > (0)::double precision) AND (c.prompriimpant > (0)::double precision)) THEN round(((((c.prompriimpact / c.prompriimpant) * (100)::double precision) - (100)::double precision))::numeric, 1)
            ELSE NULL::numeric
        END AS varpriimp,
    c.cantpriimp,
    c.promprel,
    c.promdiv,
    c0.promdiv AS promdivant,
    c.promedioredondeado,
    c.impdiv,
        CASE
            WHEN (((c.division)::text = '0'::text) AND ((p.tipoexterno)::text = 'D'::text)) THEN 1
            ELSE c.cantincluidos
        END AS cantincluidos,
        CASE
            WHEN (((c.division)::text = '0'::text) AND ((p.tipoexterno)::text = 'D'::text)) THEN 1
            ELSE c.cantrealesincluidos
        END AS cantrealesincluidos,
    c.cantrealesexcluidos,
    c.promvar,
    c.cantaltas,
    c.promaltas,
    c.cantbajas,
    c.prombajas,
    c.cantimputados,
    c.ponderadordiv,
    c.umbralpriimp,
    c.umbraldescarte,
    c.umbralbajaauto,
    c.cantidadconprecio,
    c.profundidad,
    c.divisionpadre,
    c.tipo_promedio,
    c.raiz,
    c.cantexcluidos,
    c.promexcluidos,
    c.promimputados,
    c.promrealesincluidos,
    c.promrealesexcluidos,
    c.cantrealesdescartados,
    c.cantpreciostotales,
    c.cantpreciosingresados,
    c.cantconprecioparacalestac,
        CASE
            WHEN ((c.promdiv > (0)::double precision) AND (c0.promdiv > (0)::double precision)) THEN round(((((c.promdiv / c0.promdiv) * (100)::double precision) - (100)::double precision))::numeric, 1)
            ELSE NULL::numeric
        END AS variacion,
    c.promsinimpext,
        CASE
            WHEN ((c.promsinimpext > (0)::double precision) AND (c0.promdiv > (0)::double precision)) THEN round(((((c.promsinimpext / c0.promdiv) * (100)::double precision) - (100)::double precision))::numeric, 1)
            ELSE NULL::numeric
        END AS varsinimpext,
        CASE
            WHEN ((c.promrealessincambio > (0)::double precision) AND (c.promrealessincambioant > (0)::double precision)) THEN round(((((c.promrealessincambio / c.promrealessincambioant) * (100)::double precision) - (100)::double precision))::numeric, 1)
            ELSE NULL::numeric
        END AS varsincambio,
        CASE
            WHEN ((c.promsinaltasbajas > (0)::double precision) AND (c.promsinaltasbajasant > (0)::double precision)) THEN round(((((c.promsinaltasbajas / c.promsinaltasbajasant) * (100)::double precision) - (100)::double precision))::numeric, 1)
            ELSE NULL::numeric
        END AS varsinaltasbajas,
        CASE
            WHEN (gg.grupo IS NOT NULL) THEN true
            ELSE false
        END AS publicado,
    r.responsable
   FROM (((((cvp.caldiv c
     LEFT JOIN cvp.productos p ON (((c.producto)::text = (p.producto)::text)))
     LEFT JOIN cvp.periodos l ON (((c.periodo)::text = (l.periodo)::text)))
     LEFT JOIN cvp.caldiv c0 ON ((((c0.periodo)::text = (l.periodoanterior)::text) AND (((c.calculo = 0) AND (c0.calculo = c.calculo)) OR ((c.calculo > 0) AND (c0.calculo = 0))) AND ((c.producto)::text = (c0.producto)::text) AND ((c.division)::text = (c0.division)::text))))
     LEFT JOIN ( SELECT gru_grupos.grupo
           FROM cvp.gru_grupos
          WHERE (((gru_grupos.agrupacion)::text = 'C'::text) AND ((gru_grupos.grupo_padre)::text = ANY (ARRAY[('C1'::character varying)::text, ('C2'::character varying)::text])) AND ((gru_grupos.esproducto)::text = 'S'::text))) gg ON (((c.producto)::text = (gg.grupo)::text)))
     LEFT JOIN cvp.calprodresp r ON ((((c.periodo)::text = (r.periodo)::text) AND (c.calculo = r.calculo) AND ((c.producto)::text = (r.producto)::text))));


--
-- Name: calobs; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calobs (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    informante integer NOT NULL,
    observacion integer NOT NULL,
    division character varying(1000),
    promobs double precision,
    impobs character varying(10) NOT NULL,
    antiguedadconprecio integer,
    antiguedadsinprecio integer,
    antiguedadexcluido integer,
    antiguedadincluido integer,
    sindatosestacional integer,
    muestra integer,
    CONSTRAINT "Ambos nulos o no nulos y SinDatosEstacional<=AntiguedadSinPreci" CHECK ((((sindatosestacional IS NULL) AND (antiguedadsinprecio IS NULL)) OR (sindatosestacional <= antiguedadsinprecio) OR (sindatosestacional >= 100))),
    CONSTRAINT "No pueden ser ambos no nulos: AntiguedadIncluido,AntiguedadExcl" CHECK (((antiguedadincluido IS NULL) OR (antiguedadexcluido IS NULL))),
    CONSTRAINT "No pueden ser ambos no nulos: AntiguedadSinPrecio, AntiguedadCo" CHECK (((antiguedadconprecio IS NULL) OR (antiguedadsinprecio IS NULL))),
    CONSTRAINT "texto invalido en division de tabla calobs" CHECK (comun.cadena_valida((division)::text, 'amplio'::text))
);


--
-- Name: relpre; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relpre (
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    formulario integer NOT NULL,
    precio double precision,
    tipoprecio character varying(10),
    visita integer DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentariosrelpre text,
    cambio character varying(1),
    precionormalizado double precision,
    especificacion integer NOT NULL,
    ultima_visita boolean,
    observaciones text,
    esvisiblecomentarioendm boolean DEFAULT false,
    CONSTRAINT "El precio no puede ser 0 o negativo" CHECK ((precio > (0)::double precision)),
    CONSTRAINT "El valor del campo cambio debe ser C o nulo" CHECK (((cambio)::text = 'C'::text)),
    CONSTRAINT "texto invalido en comentariosrelpre de tabla relpre" CHECK ((((periodo)::text < 'a2014m03'::text) OR comun.cadena_valida(comentariosrelpre, 'amplio'::text)))
);


--
-- Name: caldivsincambio; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.caldivsincambio AS
 SELECT x.periodo,
    x.calculo,
    x.producto,
    x.division,
    x.promdivsincambio,
    x.promdivant,
        CASE
            WHEN ((x.promdivant > (0)::double precision) AND (x.promdivsincambio > (0)::double precision)) THEN round(((((x.promdivsincambio / x.promdivant) * (100)::double precision) - (100)::double precision))::numeric, 1)
            ELSE NULL::numeric
        END AS varsincambio
   FROM ( SELECT c.periodo,
            c.calculo,
            c.producto,
            c.division,
            exp(avg(ln(
                CASE
                    WHEN ((c.promobs > (0)::double precision) AND (c.antiguedadincluido > 0) AND (c0.antiguedadincluido > 0) AND (r.periodo IS NULL)) THEN c.promobs
                    ELSE NULL::double precision
                END))) AS promdivsincambio,
            exp(avg(ln(
                CASE
                    WHEN ((c.promobs > (0)::double precision) AND (c.antiguedadincluido > 0) AND (c0.antiguedadincluido > 0) AND (r.periodo IS NULL)) THEN c0.promobs
                    ELSE NULL::double precision
                END))) AS promdivant
           FROM ((((cvp.calobs c
             LEFT JOIN ( SELECT DISTINCT relpre.periodo,
                    relpre.producto,
                    relpre.observacion,
                    relpre.informante
                   FROM cvp.relpre
                  WHERE ((relpre.cambio)::text = 'C'::text)) r ON ((((c.periodo)::text = (r.periodo)::text) AND ((c.producto)::text = (r.producto)::text) AND (c.observacion = r.observacion) AND (c.informante = r.informante))))
             LEFT JOIN cvp.calculos ca ON ((((c.periodo)::text = (ca.periodo)::text) AND (c.calculo = ca.calculo))))
             LEFT JOIN cvp.calobs c0 ON ((((ca.periodoanterior)::text = (c0.periodo)::text) AND (ca.calculoanterior = c0.calculo) AND ((c.producto)::text = (c0.producto)::text) AND (c.informante = c0.informante) AND (c.observacion = c0.observacion))))
             LEFT JOIN cvp.caldiv d ON ((((c.periodo)::text = (d.periodo)::text) AND (c.calculo = d.calculo) AND ((c.producto)::text = (d.producto)::text) AND ((c.division)::text = (d.division)::text))))
          WHERE ((c.calculo = 0) AND ((c.impobs)::text = ANY (ARRAY[('R'::character varying)::text, ('RA'::character varying)::text])) AND ((c0.impobs)::text = ANY (ARRAY[('R'::character varying)::text, ('RA'::character varying)::text])))
          GROUP BY c.periodo, c.calculo, c.producto, c.division) x;


--
-- Name: calgru; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calgru (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    agrupacion character varying(9) NOT NULL,
    grupo character varying(9) NOT NULL,
    variacion double precision,
    impgru character varying(10),
    valorprel double precision,
    valorgru double precision,
    grupopadre character varying(9),
    nivel integer,
    esproducto cvp.sino_dom,
    ponderador double precision,
    indice double precision,
    indiceprel double precision,
    incidencia double precision,
    indiceredondeado double precision,
    incidenciaredondeada double precision,
    ponderadorimplicito double precision
);


--
-- Name: calgru_promedios; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.calgru_promedios AS
 SELECT c.periodo,
    c.calculo,
    c.agrupacion,
    c.grupo,
    c.variacion,
    c.impgru,
    c.valorprel,
    c.valorgru,
    c.grupopadre,
    c.nivel,
    c.esproducto,
    c.ponderador,
    c.indice,
    c.indiceprel,
    c.incidencia,
    c.indiceredondeado,
    c.incidenciaredondeada,
    c.ponderadorimplicito,
    (((c0.valorgru + c1.valorgru) + c.valorgru) / (3)::double precision) AS valorgrupromedio
   FROM (((cvp.calgru c
     LEFT JOIN cvp.periodos p ON (((c.periodo)::text = (p.periodo)::text)))
     LEFT JOIN cvp.calgru c0 ON ((((c0.periodo)::text = (p.periodoanterior)::text) AND (c.calculo = c0.calculo) AND ((c.agrupacion)::text = (c0.agrupacion)::text) AND ((c.grupo)::text = (c0.grupo)::text))))
     LEFT JOIN cvp.calgru c1 ON ((((c1.periodo)::text = cvp.moverperiodos((c.periodo)::text, 1)) AND (c1.calculo = c.calculo) AND ((c1.agrupacion)::text = (c.agrupacion)::text) AND ((c1.grupo)::text = (c.grupo)::text))))
  WHERE (c.calculo = 0);


--
-- Name: calgru_vw; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.calgru_vw AS
 SELECT c.periodo,
    c.calculo,
    c.agrupacion,
    c.grupo,
    COALESCE(g.nombregrupo, p.nombreproducto) AS nombre,
    c.variacion,
    c.impgru,
    c.grupopadre,
    c.nivel,
    c.esproducto,
    c.ponderador,
    c.indice,
    c.indiceprel,
    c.incidencia,
    c.indiceredondeado,
    c.incidenciaredondeada,
    ((((c.indice - cb.indice) * c.ponderador) / pb.indice) * (100)::double precision) AS incidenciainteranual,
        CASE
            WHEN (c.nivel = 0) THEN round(((((((round((c.indice)::numeric, 2) - round((cb.indice)::numeric, 2)))::double precision * c.ponderador) / (round((pb.indice)::numeric, 2))::double precision) * (100)::double precision))::numeric, 1)
            WHEN (c.nivel = 1) THEN round(((((((round((c.indice)::numeric, 2) - round((cb.indice)::numeric, 2)))::double precision * c.ponderador) / (round((pb.indice)::numeric, 2))::double precision) * (100)::double precision))::numeric, 2)
            ELSE NULL::numeric
        END AS incidenciainteranualredondeada,
    ((((c.indice - ca.indice) * c.ponderador) / pa.indice) * (100)::double precision) AS incidenciaacumuladaanual,
    (round((
        CASE
            WHEN (c.nivel = ANY (ARRAY[0, 1])) THEN (((((round((c.indice)::numeric, 2) - round((ca.indice)::numeric, 2)))::double precision * c.ponderador) / (round((pa.indice)::numeric, 2))::double precision) * (100)::double precision)
            ELSE NULL::double precision
        END)::numeric, 2))::double precision AS incidenciaacumuladaanualredondeada,
        CASE
            WHEN (cb.indiceredondeado = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.indiceredondeado)::numeric / (cb.indiceredondeado)::numeric) * (100)::numeric) - (100)::numeric), 1)
        END AS variacioninteranualredondeada,
        CASE
            WHEN (cb.indice = (0)::double precision) THEN NULL::numeric
            ELSE ((((c.indice)::numeric / (cb.indice)::numeric) * (100)::numeric) - (100)::numeric)
        END AS variacioninteranual,
        CASE
            WHEN (c_3.indice = (0)::double precision) THEN NULL::numeric
            ELSE ((((c.indice)::numeric / (c_3.indice)::numeric) * (100)::numeric) - (100)::numeric)
        END AS variaciontrimestral,
        CASE
            WHEN (ca.indiceredondeado = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.indiceredondeado / ca.indiceredondeado) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacionacumuladaanualredondeada,
        CASE
            WHEN (ca.indice = (0)::double precision) THEN NULL::double precision
            ELSE (((c.indice / ca.indice) * (100)::double precision) - (100)::double precision)
        END AS variacionacumuladaanual,
    c.ponderadorimplicito,
    ('Z'::text || substr((c.grupo)::text, 2)) AS ordenpor,
        CASE
            WHEN (gg.grupo IS NOT NULL) THEN true
            ELSE false
        END AS publicado,
    pr.responsable
   FROM ((((((((((cvp.calgru c
     LEFT JOIN cvp.calgru cb ON ((((cb.agrupacion)::text = (c.agrupacion)::text) AND ((cb.grupo)::text = (c.grupo)::text) AND (((c.calculo = 0) AND (cb.calculo = c.calculo)) OR ((c.calculo > 0) AND (cb.calculo = 0))) AND ((cb.periodo)::text = cvp.periodo_igual_mes_anno_anterior((c.periodo)::text)))))
     LEFT JOIN cvp.calgru c_3 ON ((((c_3.agrupacion)::text = (c.agrupacion)::text) AND ((c_3.grupo)::text = (c.grupo)::text) AND (((c.calculo = 0) AND (c_3.calculo = c.calculo)) OR ((c.calculo > 0) AND (c_3.calculo = 0))) AND ((c_3.periodo)::text = cvp.moverperiodos((c.periodo)::text, '-3'::integer)))))
     LEFT JOIN cvp.calgru pb ON (((((c.calculo = 0) AND (pb.calculo = c.calculo)) OR ((c.calculo > 0) AND (pb.calculo = 0))) AND ((pb.agrupacion)::text = (c.agrupacion)::text) AND ((pb.periodo)::text = cvp.periodo_igual_mes_anno_anterior((c.periodo)::text)) AND (pb.nivel = 0))))
     LEFT JOIN cvp.calgru pa ON (((((c.calculo = 0) AND (pa.calculo = c.calculo)) OR ((c.calculo > 0) AND (pa.calculo = 0))) AND ((pa.agrupacion)::text = (c.agrupacion)::text) AND ((pa.periodo)::text = (('a'::text || ((substr((c.periodo)::text, 2, 4))::integer - 1)) || 'm12'::text)) AND (pa.nivel = 0))))
     LEFT JOIN cvp.calgru ca ON ((((ca.agrupacion)::text = (c.agrupacion)::text) AND ((ca.grupo)::text = (c.grupo)::text) AND (((c.calculo = 0) AND (ca.calculo = c.calculo)) OR ((c.calculo > 0) AND (ca.calculo = 0))) AND ((ca.periodo)::text = (('a'::text || ((substr((c.periodo)::text, 2, 4))::integer - 1)) || 'm12'::text)))))
     JOIN cvp.agrupaciones a ON (((a.agrupacion)::text = (c.agrupacion)::text)))
     LEFT JOIN cvp.grupos g ON ((((c.agrupacion)::text = (g.agrupacion)::text) AND ((c.grupo)::text = (g.grupo)::text))))
     LEFT JOIN cvp.productos p ON (((c.grupo)::text = (p.producto)::text)))
     LEFT JOIN ( SELECT gru_grupos.grupo
           FROM cvp.gru_grupos
          WHERE (((gru_grupos.agrupacion)::text = 'C'::text) AND ((gru_grupos.grupo_padre)::text = ANY (ARRAY[('C1'::character varying)::text, ('C2'::character varying)::text])) AND ((gru_grupos.esproducto)::text = 'S'::text))) gg ON (((c.grupo)::text = (gg.grupo)::text)))
     LEFT JOIN cvp.calprodresp pr ON ((((c.periodo)::text = (pr.periodo)::text) AND (c.calculo = pr.calculo) AND ((c.grupo)::text = (pr.producto)::text))))
  WHERE ((a.tipo_agrupacion)::text = 'INDICE'::text);


--
-- Name: calhoggru; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calhoggru (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    hogar character varying(9) NOT NULL,
    agrupacion character varying(9) NOT NULL,
    grupo character varying(9) NOT NULL,
    valorhoggru double precision,
    coefhoggru double precision
);


--
-- Name: calhogsubtotales; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calhogsubtotales (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    hogar character varying(9) NOT NULL,
    agrupacion character varying(9) NOT NULL,
    grupo character varying(9) NOT NULL,
    valorhogsub double precision
);


--
-- Name: calobs_periodos; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.calobs_periodos AS
 SELECT c.producto,
    c.informante,
    c.observacion,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m01'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m01_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m01'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m01_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m02'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m02_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m02'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m02_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m03'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m03_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m03'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m03_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m04'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m04_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m04'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m04_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m05'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m05_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m05'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m05_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m06'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m06_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m06'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m06_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m07'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m07_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m07'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m07_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m08'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m08_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m08'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m08_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m09'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m09_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m09'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m09_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m10'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m10_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m10'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m10_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m11'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m11_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m11'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m11_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2011m12'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2011m12_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2011m12'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2011m12_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2012m01'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2012m01_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2012m01'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2012m01_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2012m02'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2012m02_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2012m02'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2012m02_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2012m03'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2012m03_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2012m03'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2012m03_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2012m04'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2012m04_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2012m04'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2012m04_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2012m05'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2012m05_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2012m05'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2012m05_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2012m06'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2012m06_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2012m06'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2012m06_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2012m07'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2012m07_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2012m07'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2012m07_imp,
    round((avg(
        CASE
            WHEN ((c.periodo)::text = 'a2012m08'::text) THEN c.promobs
            ELSE NULL::double precision
        END))::numeric, 2) AS a2012m08_prom,
    max(
        CASE
            WHEN ((c.periodo)::text = 'a2012m08'::text) THEN (((((
            CASE
                WHEN (c.antiguedadexcluido > 0) THEN 'X'::text
                ELSE ''::text
            END || (COALESCE(c.impobs, ''::character varying))::text) ||
            CASE
                WHEN (r.tipoprecio IS NOT NULL) THEN ':'::text
                ELSE ''::text
            END) || (COALESCE(r.tipoprecio, ''::character varying))::text) ||
            CASE
                WHEN (r.cambio IS NOT NULL) THEN ','::text
                ELSE ''::text
            END) || (COALESCE(r.cambio, ''::character varying))::text)
            ELSE NULL::text
        END) AS a2012m08_imp
   FROM (cvp.calobs c
     LEFT JOIN cvp.relpre r ON ((((c.periodo)::text = (r.periodo)::text) AND ((c.producto)::text = (r.producto)::text) AND (c.informante = r.informante) AND (c.observacion = r.observacion) AND (r.visita = 1))))
  WHERE (c.calculo = 0)
  GROUP BY c.producto, c.informante, c.observacion
  ORDER BY c.producto, c.informante, c.observacion;


--
-- Name: calobs_vw; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.calobs_vw AS
 SELECT calobs.periodo,
    calobs.calculo,
    calobs.producto,
    calobs.informante,
    calobs.observacion,
    calobs.division,
    calobs.promobs,
    calobs.impobs,
    calobs.antiguedadconprecio,
    calobs.antiguedadsinprecio,
    calobs.antiguedadexcluido,
    calobs.antiguedadincluido,
    calobs.sindatosestacional,
    calobs.muestra
   FROM cvp.calobs
  WHERE (calobs.calculo = 0);


--
-- Name: calprod; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calprod (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    promprod double precision,
    impprod character varying(10),
    valorprod double precision,
    cantincluidos integer,
    promprel double precision,
    valorprel double precision,
    cantaltas integer,
    promaltas double precision,
    cantbajas integer,
    prombajas double precision,
    cantperaltaauto integer,
    cantperbajaauto integer,
    esexternohabitual cvp.sino_dom,
    imputacon character varying(9) NOT NULL,
    cantporunidcons double precision,
    unidadmedidaporunidcons character varying(20),
    pesovolumenporunidad double precision,
    cantidad numeric,
    unidaddemedida character varying(20),
    indice double precision,
    indiceprel double precision,
    CONSTRAINT "texto invalido en unidaddemedida de tabla calprod" CHECK (comun.cadena_valida((unidaddemedida)::text, 'extendido'::text)),
    CONSTRAINT "texto invalido en unidadmedidaporunidcons de tabla calprod" CHECK (comun.cadena_valida((unidadmedidaporunidcons)::text, 'extendido'::text))
);


--
-- Name: calprodagr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.calprodagr (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    agrupacion character varying(9) NOT NULL,
    cantporunidcons double precision,
    valorprod double precision,
    unidadmedidaporunidcons character varying(20),
    cantidad numeric,
    unidaddemedida character varying(20),
    pesovolumenporunidad double precision
);


--
-- Name: matrizperiodos6; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.matrizperiodos6 AS
 SELECT p.periodo AS periodo6,
        CASE
            WHEN ((p.periodo)::text = 'a2010m01'::text) THEN NULL::character varying
            ELSE a.periodo
        END AS periodo5,
        CASE
            WHEN ((p.periodo)::text <= 'a2010m02'::text) THEN NULL::character varying
            ELSE b.periodo
        END AS periodo4,
        CASE
            WHEN ((p.periodo)::text <= 'a2010m03'::text) THEN NULL::character varying
            ELSE c.periodo
        END AS periodo3,
        CASE
            WHEN ((p.periodo)::text <= 'a2010m04'::text) THEN NULL::character varying
            ELSE d.periodo
        END AS periodo2,
        CASE
            WHEN ((p.periodo)::text <= 'a2010m05'::text) THEN NULL::character varying
            ELSE e.periodo
        END AS periodo1
   FROM (((((cvp.calculos p
     LEFT JOIN cvp.calculos a ON ((((a.periodo)::text = (p.periodoanterior)::text) AND (a.calculo = 0))))
     LEFT JOIN cvp.calculos b ON ((((b.periodo)::text = (a.periodoanterior)::text) AND (b.calculo = 0))))
     LEFT JOIN cvp.calculos c ON ((((c.periodo)::text = (b.periodoanterior)::text) AND (c.calculo = 0))))
     LEFT JOIN cvp.calculos d ON ((((d.periodo)::text = (c.periodoanterior)::text) AND (d.calculo = 0))))
     LEFT JOIN cvp.calculos e ON ((((e.periodo)::text = (d.periodoanterior)::text) AND (e.calculo = 0))))
  WHERE (p.calculo = 0);


--
-- Name: canasta_alimentaria; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.canasta_alimentaria AS
 SELECT
        CASE
            WHEN (((x.agrupacion)::text = 'B'::text) AND (x.nivel = 2)) THEN x.grupopadre
            ELSE x.grupo
        END AS grupo,
    x.nombregrupo,
    round((c1.valorgru)::numeric, 2) AS valorgru1,
    round((c2.valorgru)::numeric, 2) AS valorgru2,
    round((c3.valorgru)::numeric, 2) AS valorgru3,
    round((c4.valorgru)::numeric, 2) AS valorgru4,
    round((c5.valorgru)::numeric, 2) AS valorgru5,
    round((c6.valorgru)::numeric, 2) AS valorgru6,
    c1.periodo AS periodo1,
    c2.periodo AS periodo2,
    c3.periodo AS periodo3,
    c4.periodo AS periodo4,
    c5.periodo AS periodo5,
    c6.periodo AS periodo6,
    x.agrupacion,
    x.calculo,
    x.nivel
   FROM (((((((((cvp.matrizperiodos6 p
     JOIN ( SELECT DISTINCT c.grupo,
            g.nombregrupo,
            c.agrupacion,
            c.calculo,
            c.periodo,
            g.nivel,
            c.agrupacion AS agrupprincipal,
            g.grupopadre
           FROM ((cvp.calgru c
             JOIN cvp.grupos g ON ((((c.agrupacion)::text = (g.agrupacion)::text) AND ((c.grupo)::text = (g.grupo)::text))))
             JOIN cvp.matrizperiodos6 a ON ((((a.periodo1 IS NULL) OR ((c.periodo)::text >= (a.periodo1)::text)) AND ((c.periodo)::text <= (a.periodo6)::text))))
          WHERE ((c.calculo = 0) AND ((c.agrupacion)::text = ANY (ARRAY[('A'::character varying)::text, ('B'::character varying)::text])) AND (g.nivel = ANY (ARRAY[2, 3])) AND (substr((g.grupopadre)::text, 1, 2) = ANY (ARRAY['A1'::text, 'B1'::text])))) x ON (((x.periodo)::text = (p.periodo6)::text)))
     LEFT JOIN cvp.calgru c1 ON ((((x.agrupprincipal)::text = (c1.agrupacion)::text) AND ((x.grupo)::text = (c1.grupo)::text) AND ((c1.periodo)::text = (p.periodo1)::text) AND (c1.calculo = x.calculo))))
     LEFT JOIN cvp.calgru c2 ON ((((x.agrupprincipal)::text = (c2.agrupacion)::text) AND ((x.grupo)::text = (c2.grupo)::text) AND ((c2.periodo)::text = (p.periodo2)::text) AND (c2.calculo = x.calculo))))
     LEFT JOIN cvp.calgru c3 ON ((((x.agrupprincipal)::text = (c3.agrupacion)::text) AND ((x.grupo)::text = (c3.grupo)::text) AND ((c3.periodo)::text = (p.periodo3)::text) AND (c3.calculo = x.calculo))))
     LEFT JOIN cvp.calgru c4 ON ((((x.agrupprincipal)::text = (c4.agrupacion)::text) AND ((x.grupo)::text = (c4.grupo)::text) AND ((c4.periodo)::text = (p.periodo4)::text) AND (c4.calculo = x.calculo))))
     LEFT JOIN cvp.calgru c5 ON ((((x.agrupprincipal)::text = (c5.agrupacion)::text) AND ((x.grupo)::text = (c5.grupo)::text) AND ((c5.periodo)::text = (p.periodo5)::text) AND (c5.calculo = x.calculo))))
     LEFT JOIN cvp.calgru c6 ON ((((x.agrupprincipal)::text = (c6.agrupacion)::text) AND ((x.grupo)::text = (c6.grupo)::text) AND ((c6.periodo)::text = (p.periodo6)::text) AND (c6.calculo = x.calculo))))
     LEFT JOIN cvp.periodos p0 ON ((((p0.periodo)::text = (p.periodo1)::text) AND ((p0.periodoanterior)::text <> (p.periodo1)::text))))
     LEFT JOIN cvp.calgru cl0 ON ((((x.agrupacion)::text = (cl0.agrupacion)::text) AND ((x.grupo)::text = (cl0.grupo)::text) AND ((cl0.periodo)::text = (p0.periodoanterior)::text) AND (cl0.calculo = x.calculo))))
  ORDER BY x.agrupacion, c6.periodo, x.nivel,
        CASE
            WHEN (((x.agrupacion)::text = 'B'::text) AND (x.nivel = 2)) THEN x.grupopadre
            ELSE x.grupo
        END;


--
-- Name: canasta_alimentaria_var; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.canasta_alimentaria_var AS
 SELECT
        CASE
            WHEN (((x.agrupacion)::text = 'B'::text) AND (x.nivel = 2)) THEN x.grupopadre
            ELSE x.grupo
        END AS grupo,
    x.nombregrupo,
    round((c0.valorgru)::numeric, 2) AS valorgruant,
    round((c.valorgru)::numeric, 2) AS valorgru,
    round((c.variacion)::numeric, 1) AS variacion,
        CASE
            WHEN (ca.valorgru = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.valorgru / ca.valorgru) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variaciondiciembre,
        CASE
            WHEN (cm.valorgru = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.valorgru / cm.valorgru) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacionmesanioanterior,
    x.agrupacion,
    x.calculo,
    x.periodo,
    c0.calculo AS calculoant,
    c0.periodo AS periodoant,
    ca.periodo AS periododiciembre,
    cm.periodo AS periodoaniooanterior,
    x.nivel
   FROM ((((( SELECT DISTINCT c_1.grupo,
            g.nombregrupo,
            c_1.agrupacion,
            c_1.calculo,
            c_1.periodo,
            g.nivel,
            c_1.agrupacion AS agrupprincipal,
            p.calculoanterior,
            p.periodoanterior,
            g.grupopadre
           FROM ((cvp.calgru c_1
             JOIN cvp.grupos g ON ((((c_1.agrupacion)::text = (g.agrupacion)::text) AND ((c_1.grupo)::text = (g.grupo)::text))))
             JOIN cvp.calculos p ON ((((c_1.periodo)::text = (p.periodo)::text) AND ('A'::text = (p.agrupacionprincipal)::text) AND (0 = p.calculo))))
          WHERE ((c_1.calculo = 0) AND ((c_1.agrupacion)::text = ANY (ARRAY[('A'::character varying)::text, ('B'::character varying)::text])) AND (g.nivel = ANY (ARRAY[2, 3])) AND (substr((g.grupopadre)::text, 1, 2) = ANY (ARRAY['A1'::text, 'B1'::text])))) x
     LEFT JOIN cvp.calgru c ON ((((x.agrupprincipal)::text = (c.agrupacion)::text) AND ((x.grupo)::text = (c.grupo)::text) AND (c.calculo = x.calculo) AND ((c.periodo)::text = (x.periodo)::text))))
     LEFT JOIN cvp.calgru c0 ON ((((x.agrupprincipal)::text = (c0.agrupacion)::text) AND ((x.grupo)::text = (c0.grupo)::text) AND (c0.calculo = x.calculoanterior) AND ((c0.periodo)::text = (x.periodoanterior)::text))))
     LEFT JOIN cvp.calgru ca ON ((((x.agrupprincipal)::text = (ca.agrupacion)::text) AND ((x.grupo)::text = (ca.grupo)::text) AND (ca.calculo = x.calculo) AND ((ca.periodo)::text = (('a'::text || ((substr((x.periodo)::text, 2, 4))::integer - 1)) || 'm12'::text)))))
     LEFT JOIN cvp.calgru cm ON ((((x.agrupprincipal)::text = (cm.agrupacion)::text) AND ((x.grupo)::text = (cm.grupo)::text) AND (cm.calculo = x.calculo) AND ((cm.periodo)::text = ((('a'::text || ((substr((x.periodo)::text, 2, 4))::integer - 1)) || 'm'::text) || substr((x.periodo)::text, 7, 2))))))
  ORDER BY x.agrupacion, x.periodo, x.nivel,
        CASE
            WHEN (((x.agrupacion)::text = 'B'::text) AND (x.nivel = 2)) THEN x.grupopadre
            ELSE x.grupo
        END;


--
-- Name: canasta_consumo; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.canasta_consumo AS
 SELECT x.hogar,
        CASE
            WHEN (x.nivel = 1) THEN (((x.grupo)::text || 'X'::text))::character varying
            ELSE x.grupo
        END AS grupo,
    x.nombre,
    round((
        CASE
            WHEN (x.nivel = 1) THEN s1.valorhogsub
            ELSE c1.valorhoggru
        END)::numeric, 2) AS valorgru1,
    round((
        CASE
            WHEN (x.nivel = 1) THEN s2.valorhogsub
            ELSE c2.valorhoggru
        END)::numeric, 2) AS valorgru2,
    round((
        CASE
            WHEN (x.nivel = 1) THEN s3.valorhogsub
            ELSE c3.valorhoggru
        END)::numeric, 2) AS valorgru3,
    round((
        CASE
            WHEN (x.nivel = 1) THEN s4.valorhogsub
            ELSE c4.valorhoggru
        END)::numeric, 2) AS valorgru4,
    round((
        CASE
            WHEN (x.nivel = 1) THEN s5.valorhogsub
            ELSE c5.valorhoggru
        END)::numeric, 2) AS valorgru5,
    round((
        CASE
            WHEN (x.nivel = 1) THEN s6.valorhogsub
            ELSE c6.valorhoggru
        END)::numeric, 2) AS valorgru6,
        CASE
            WHEN (x.nivel = 1) THEN s1.periodo
            ELSE c1.periodo
        END AS periodo1,
        CASE
            WHEN (x.nivel = 1) THEN s2.periodo
            ELSE c2.periodo
        END AS periodo2,
        CASE
            WHEN (x.nivel = 1) THEN s3.periodo
            ELSE c3.periodo
        END AS periodo3,
        CASE
            WHEN (x.nivel = 1) THEN s4.periodo
            ELSE c4.periodo
        END AS periodo4,
        CASE
            WHEN (x.nivel = 1) THEN s5.periodo
            ELSE c5.periodo
        END AS periodo5,
        CASE
            WHEN (x.nivel = 1) THEN s6.periodo
            ELSE c6.periodo
        END AS periodo6,
    x.agrupacion,
    x.nivel,
    x.calculo
   FROM (((((((((((((((cvp.matrizperiodos6 p
     JOIN ( SELECT c.grupo,
            c.hogar,
            g.nombregrupo AS nombre,
            c.agrupacion,
            c.calculo,
            a.periodo6,
            g.nivel
           FROM ((cvp.calhoggru c
             JOIN cvp.grupos g ON ((((c.agrupacion)::text = (g.agrupacion)::text) AND ((c.grupo)::text = (g.grupo)::text))))
             JOIN cvp.matrizperiodos6 a ON ((((a.periodo1 IS NULL) OR ((c.periodo)::text >= (a.periodo1)::text)) AND ((c.periodo)::text <= (a.periodo6)::text))))
          WHERE ((c.calculo = 0) AND ((g.nivel = 2) AND (substr((g.grupopadre)::text, 1, 2) <> ALL (ARRAY['A1'::text, 'B1'::text]))))
        UNION
         SELECT c.grupo,
            c.hogar,
            g.nombrecanasta AS nombre,
            c.agrupacion,
            c.calculo,
            a.periodo6,
            g.nivel
           FROM ((cvp.calhogsubtotales c
             JOIN cvp.grupos g ON ((((c.agrupacion)::text = (g.agrupacion)::text) AND ((c.grupo)::text = (g.grupo)::text))))
             JOIN cvp.matrizperiodos6 a ON ((((a.periodo1 IS NULL) OR ((c.periodo)::text >= (a.periodo1)::text)) AND ((c.periodo)::text <= (a.periodo6)::text))))
          WHERE ((c.calculo = 0) AND (g.nivel = 1))
          GROUP BY c.grupo, c.hogar, g.nombrecanasta, c.agrupacion, c.calculo, a.periodo6, g.nivel) x ON (((x.periodo6)::text = (p.periodo6)::text)))
     LEFT JOIN cvp.calhoggru c1 ON ((((x.agrupacion)::text = (c1.agrupacion)::text) AND ((x.grupo)::text = (c1.grupo)::text) AND ((x.hogar)::text = (c1.hogar)::text) AND ((c1.periodo)::text = (p.periodo1)::text) AND (c1.calculo = x.calculo) AND (x.nivel = 2))))
     LEFT JOIN cvp.calhoggru c2 ON ((((x.agrupacion)::text = (c2.agrupacion)::text) AND ((x.grupo)::text = (c2.grupo)::text) AND ((x.hogar)::text = (c2.hogar)::text) AND ((c2.periodo)::text = (p.periodo2)::text) AND (c2.calculo = x.calculo) AND (x.nivel = 2))))
     LEFT JOIN cvp.calhoggru c3 ON ((((x.agrupacion)::text = (c3.agrupacion)::text) AND ((x.grupo)::text = (c3.grupo)::text) AND ((x.hogar)::text = (c3.hogar)::text) AND ((c3.periodo)::text = (p.periodo3)::text) AND (c3.calculo = x.calculo) AND (x.nivel = 2))))
     LEFT JOIN cvp.calhoggru c4 ON ((((x.agrupacion)::text = (c4.agrupacion)::text) AND ((x.grupo)::text = (c4.grupo)::text) AND ((x.hogar)::text = (c4.hogar)::text) AND ((c4.periodo)::text = (p.periodo4)::text) AND (c4.calculo = x.calculo) AND (x.nivel = 2))))
     LEFT JOIN cvp.calhoggru c5 ON ((((x.agrupacion)::text = (c5.agrupacion)::text) AND ((x.grupo)::text = (c5.grupo)::text) AND ((x.hogar)::text = (c5.hogar)::text) AND ((c5.periodo)::text = (p.periodo5)::text) AND (c5.calculo = x.calculo) AND (x.nivel = 2))))
     LEFT JOIN cvp.calhoggru c6 ON ((((x.agrupacion)::text = (c6.agrupacion)::text) AND ((x.grupo)::text = (c6.grupo)::text) AND ((x.hogar)::text = (c6.hogar)::text) AND ((c6.periodo)::text = (p.periodo6)::text) AND (c6.calculo = x.calculo) AND (x.nivel = 2))))
     LEFT JOIN cvp.calhogsubtotales s1 ON ((((x.agrupacion)::text = (s1.agrupacion)::text) AND ((x.grupo)::text = (s1.grupo)::text) AND ((x.hogar)::text = (s1.hogar)::text) AND ((s1.periodo)::text = (p.periodo1)::text) AND (s1.calculo = x.calculo) AND (x.nivel = 1))))
     LEFT JOIN cvp.calhogsubtotales s2 ON ((((x.agrupacion)::text = (s2.agrupacion)::text) AND ((x.grupo)::text = (s2.grupo)::text) AND ((x.hogar)::text = (s2.hogar)::text) AND ((s2.periodo)::text = (p.periodo2)::text) AND (s2.calculo = x.calculo) AND (x.nivel = 1))))
     LEFT JOIN cvp.calhogsubtotales s3 ON ((((x.agrupacion)::text = (s3.agrupacion)::text) AND ((x.grupo)::text = (s3.grupo)::text) AND ((x.hogar)::text = (s3.hogar)::text) AND ((s3.periodo)::text = (p.periodo3)::text) AND (s3.calculo = x.calculo) AND (x.nivel = 1))))
     LEFT JOIN cvp.calhogsubtotales s4 ON ((((x.agrupacion)::text = (s4.agrupacion)::text) AND ((x.grupo)::text = (s4.grupo)::text) AND ((x.hogar)::text = (s4.hogar)::text) AND ((s4.periodo)::text = (p.periodo4)::text) AND (s4.calculo = x.calculo) AND (x.nivel = 1))))
     LEFT JOIN cvp.calhogsubtotales s5 ON ((((x.agrupacion)::text = (s5.agrupacion)::text) AND ((x.grupo)::text = (s5.grupo)::text) AND ((x.hogar)::text = (s5.hogar)::text) AND ((s5.periodo)::text = (p.periodo5)::text) AND (s5.calculo = x.calculo) AND (x.nivel = 1))))
     LEFT JOIN cvp.calhogsubtotales s6 ON ((((x.agrupacion)::text = (s6.agrupacion)::text) AND ((x.grupo)::text = (s6.grupo)::text) AND ((x.hogar)::text = (s6.hogar)::text) AND ((s6.periodo)::text = (p.periodo6)::text) AND (s6.calculo = x.calculo) AND (x.nivel = 1))))
     LEFT JOIN cvp.periodos p0 ON ((((p0.periodo)::text = (p.periodo1)::text) AND ((p0.periodoanterior)::text <> (p.periodo1)::text))))
     LEFT JOIN cvp.calhoggru cl0 ON ((((x.agrupacion)::text = (cl0.agrupacion)::text) AND ((x.grupo)::text = (cl0.grupo)::text) AND ((x.hogar)::text = (cl0.hogar)::text) AND ((cl0.periodo)::text = (p0.periodoanterior)::text) AND (cl0.calculo = x.calculo))))
  ORDER BY x.agrupacion,
        CASE
            WHEN (x.nivel = 1) THEN s6.periodo
            ELSE c6.periodo
        END, x.hogar,
        CASE
            WHEN (x.nivel = 1) THEN (((x.grupo)::text || 'X'::text))::character varying
            ELSE x.grupo
        END;


--
-- Name: canasta_consumo_var; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.canasta_consumo_var AS
 SELECT c.hogar,
    c.grupo,
    g.nombregrupo AS nombre,
    round((c0.valorhoggru)::numeric, 2) AS valorgruant,
    round((c.valorhoggru)::numeric, 2) AS valorhg,
        CASE
            WHEN (c0.valorhoggru = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.valorhoggru / c0.valorhoggru) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacion,
        CASE
            WHEN (ca.valorhoggru = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.valorhoggru / ca.valorhoggru) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variaciondiciembre,
        CASE
            WHEN (cm.valorhoggru = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.valorhoggru / cm.valorhoggru) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacionmesanioanterior,
    c.agrupacion,
    c.calculo,
    c.periodo,
    c0.calculo AS calculoant,
    c0.periodo AS periodoant,
    ca.periodo AS periododiciembre,
    cm.periodo AS periodoaniooanterior,
    g.nivel
   FROM (((((cvp.calhoggru c
     JOIN cvp.grupos g ON ((((c.agrupacion)::text = (g.agrupacion)::text) AND ((c.grupo)::text = (g.grupo)::text))))
     JOIN cvp.calculos p ON ((((c.periodo)::text = (p.periodo)::text) AND ('A'::text = (p.agrupacionprincipal)::text) AND (0 = p.calculo))))
     JOIN cvp.calhoggru c0 ON ((((c.agrupacion)::text = (c0.agrupacion)::text) AND ((c.hogar)::text = (c0.hogar)::text) AND ((c.grupo)::text = (c0.grupo)::text) AND (c0.calculo = p.calculoanterior) AND ((c0.periodo)::text = (p.periodoanterior)::text))))
     LEFT JOIN cvp.calhoggru ca ON ((((c.agrupacion)::text = (ca.agrupacion)::text) AND ((c.hogar)::text = (ca.hogar)::text) AND ((c.grupo)::text = (ca.grupo)::text) AND (c.calculo = ca.calculo) AND ((ca.periodo)::text = (('a'::text || ((substr((c.periodo)::text, 2, 4))::integer - 1)) || 'm12'::text)))))
     LEFT JOIN cvp.calhoggru cm ON ((((c.agrupacion)::text = (cm.agrupacion)::text) AND ((c.hogar)::text = (cm.hogar)::text) AND ((c.grupo)::text = (cm.grupo)::text) AND (c.calculo = cm.calculo) AND ((cm.periodo)::text = ((('a'::text || ((substr((c.periodo)::text, 2, 4))::integer - 1)) || 'm'::text) || substr((c.periodo)::text, 7, 2))))))
  WHERE ((c.calculo = 0) AND ((g.nivel = 2) AND (substr((g.grupopadre)::text, 1, 2) <> ALL (ARRAY['A1'::text, 'B1'::text]))))
UNION
 SELECT c.hogar,
    ((c.grupo)::text || 'X'::text) AS grupo,
    g.nombrecanasta AS nombre,
    round((c0.valorhogsub)::numeric, 2) AS valorgruant,
    round((c.valorhogsub)::numeric, 2) AS valorhg,
        CASE
            WHEN (c0.valorhogsub = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.valorhogsub / c0.valorhogsub) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacion,
        CASE
            WHEN (ca.valorhogsub = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.valorhogsub / ca.valorhogsub) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variaciondiciembre,
        CASE
            WHEN (cm.valorhogsub = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.valorhogsub / cm.valorhogsub) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacionmesanioanterior,
    c.agrupacion,
    c.calculo,
    c.periodo,
    c0.calculo AS calculoant,
    c0.periodo AS periodoant,
    ca.periodo AS periododiciembre,
    cm.periodo AS periodoaniooanterior,
    g.nivel
   FROM (((((cvp.calhogsubtotales c
     JOIN cvp.grupos g ON ((((c.agrupacion)::text = (g.agrupacion)::text) AND ((c.grupo)::text = (g.grupo)::text))))
     JOIN cvp.calculos p ON ((((c.periodo)::text = (p.periodo)::text) AND ('A'::text = (p.agrupacionprincipal)::text) AND (0 = p.calculo))))
     JOIN cvp.calhogsubtotales c0 ON ((((c.agrupacion)::text = (c0.agrupacion)::text) AND ((c.hogar)::text = (c0.hogar)::text) AND ((c.grupo)::text = (c0.grupo)::text) AND (c0.calculo = p.calculoanterior) AND ((c0.periodo)::text = (p.periodoanterior)::text))))
     LEFT JOIN cvp.calhogsubtotales ca ON ((((c.agrupacion)::text = (ca.agrupacion)::text) AND ((c.hogar)::text = (ca.hogar)::text) AND ((c.grupo)::text = (ca.grupo)::text) AND (c.calculo = ca.calculo) AND ((ca.periodo)::text = (('a'::text || ((substr((c.periodo)::text, 2, 4))::integer - 1)) || 'm12'::text)))))
     LEFT JOIN cvp.calhogsubtotales cm ON ((((c.agrupacion)::text = (cm.agrupacion)::text) AND ((c.hogar)::text = (cm.hogar)::text) AND ((c.grupo)::text = (cm.grupo)::text) AND (c.calculo = cm.calculo) AND ((cm.periodo)::text = ((('a'::text || ((substr((c.periodo)::text, 2, 4))::integer - 1)) || 'm'::text) || substr((c.periodo)::text, 7, 2))))))
  WHERE ((c.calculo = 0) AND (g.nivel = 1))
  ORDER BY 9, 11, 1, 2;


--
-- Name: hogparagr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.hogparagr (
    parametro character varying(30) NOT NULL,
    hogar character varying(9) NOT NULL,
    coefhogpar double precision NOT NULL,
    agrupacion character varying(9) NOT NULL
);


--
-- Name: parhog; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.parhog (
    parametro character varying(30) NOT NULL,
    nombreparametro character varying(300) NOT NULL,
    CONSTRAINT "texto invalido en nombreparametro de tabla parhog" CHECK (comun.cadena_valida((nombreparametro)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en parametro de tabla parhog" CHECK (comun.cadena_valida((parametro)::text, 'castellano'::text))
);


--
-- Name: parhoggru; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.parhoggru (
    parametro character varying(30) NOT NULL,
    agrupacion character varying(9) NOT NULL,
    grupo character varying(9) NOT NULL
);


--
-- Name: prodagr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.prodagr (
    producto character varying(8) NOT NULL,
    agrupacion character varying(9) NOT NULL,
    cantporunidcons double precision
);


--
-- Name: canasta_producto; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.canasta_producto AS
 SELECT c.periodo,
    c.calculo,
    c.agrupacion,
    c.grupo AS producto,
    p.nombreproducto,
    c.valorgru AS valorprod,
    c.grupopadre,
    g.grupo_padre AS grupoparametro,
    string_agg((ph.parametro)::text, ', '::text) AS parametro,
    string_agg((o.nombreparametro)::text, ', '::text) AS nombreparametro,
    hp.hogar,
        CASE
            WHEN (min(COALESCE(abs(hp.coefhogpar))) > (0)::double precision) THEN exp(sum(ln(NULLIF(hp.coefhogpar, (0)::double precision))))
            ELSE (0)::double precision
        END AS coefhoggru,
    (c.valorgru *
        CASE
            WHEN (min(COALESCE(abs(hp.coefhogpar))) > (0)::double precision) THEN exp(sum(ln(NULLIF(hp.coefhogpar, (0)::double precision))))
            ELSE (0)::double precision
        END) AS valorhogprod,
    substr((c.grupo)::text, 2, 2) AS divisioncanasta,
    a.agrupo1,
    a.agrupo2,
    a.agrupo3,
    a.agrupo4,
    b.bgrupo0,
    b.bgrupo1,
    b.bgrupo2,
    b.bgrupo3,
    b.bgrupo4
   FROM ((((((((cvp.calgru c
     LEFT JOIN cvp.gru_grupos g ON ((((c.agrupacion)::text = (g.agrupacion)::text) AND ((c.grupo)::text = (g.grupo)::text))))
     LEFT JOIN cvp.productos p ON (((c.grupo)::text = (p.producto)::text)))
     LEFT JOIN cvp.prodagr ag ON ((((c.agrupacion)::text = (ag.agrupacion)::text) AND ((p.producto)::text = (ag.producto)::text))))
     JOIN cvp.parhoggru ph ON ((((c.agrupacion)::text = (ph.agrupacion)::text) AND ((g.grupo_padre)::text = (ph.grupo)::text))))
     LEFT JOIN cvp.hogparagr hp ON ((((ph.parametro)::text = (hp.parametro)::text) AND ((ph.agrupacion)::text = (hp.agrupacion)::text))))
     LEFT JOIN cvp.parhog o ON (((ph.parametro)::text = (o.parametro)::text)))
     LEFT JOIN ( SELECT g_1.agrupacion,
            g_1.grupo AS agrupo0,
            g4.grupo AS agrupo4,
            g3.grupo AS agrupo3,
            g2.grupo AS agrupo2,
            g1.grupo AS agrupo1
           FROM ((((cvp.grupos g_1
             JOIN cvp.grupos g4 ON ((((g_1.grupopadre)::text = (g4.grupo)::text) AND ((g_1.agrupacion)::text = (g4.agrupacion)::text) AND ((g4.agrupacion)::text = ANY (ARRAY[('A'::character varying)::text, ('D'::character varying)::text])))))
             JOIN cvp.grupos g3 ON ((((g4.grupopadre)::text = (g3.grupo)::text) AND ((g_1.agrupacion)::text = (g4.agrupacion)::text) AND ((g3.agrupacion)::text = ANY (ARRAY[('A'::character varying)::text, ('D'::character varying)::text])))))
             JOIN cvp.grupos g2 ON ((((g3.grupopadre)::text = (g2.grupo)::text) AND ((g_1.agrupacion)::text = (g4.agrupacion)::text) AND ((g2.agrupacion)::text = ANY (ARRAY[('A'::character varying)::text, ('D'::character varying)::text])))))
             JOIN cvp.grupos g1 ON ((((g2.grupopadre)::text = (g1.grupo)::text) AND ((g_1.agrupacion)::text = (g4.agrupacion)::text) AND ((g1.agrupacion)::text = ANY (ARRAY[('A'::character varying)::text, ('D'::character varying)::text])))))
          WHERE (((g_1.agrupacion)::text = ANY (ARRAY[('A'::character varying)::text, ('D'::character varying)::text])) AND (g_1.nivel = 5))) a ON ((((c.grupo)::text = (a.agrupo0)::text) AND ((c.agrupacion)::text = (a.agrupacion)::text))))
     LEFT JOIN ( SELECT g_1.grupo AS bgrupo0,
            g4.grupo AS bgrupo4,
            g3.grupo AS bgrupo3,
            g2.grupo AS bgrupo2,
            g1.grupo AS bgrupo1
           FROM ((((cvp.grupos g_1
             JOIN cvp.grupos g4 ON ((((g_1.grupopadre)::text = (g4.grupo)::text) AND ((g4.agrupacion)::text = 'B'::text))))
             JOIN cvp.grupos g3 ON ((((g4.grupopadre)::text = (g3.grupo)::text) AND ((g3.agrupacion)::text = 'B'::text))))
             JOIN cvp.grupos g2 ON ((((g3.grupopadre)::text = (g2.grupo)::text) AND ((g2.agrupacion)::text = 'B'::text))))
             JOIN cvp.grupos g1 ON ((((g2.grupopadre)::text = (g1.grupo)::text) AND ((g1.agrupacion)::text = 'B'::text))))
          WHERE (((g_1.agrupacion)::text = 'B'::text) AND (g_1.nivel = 4))) b ON (((g.grupo_padre)::text = (b.bgrupo0)::text)))
  WHERE ((c.calculo = 0) AND ((c.agrupacion)::text = ANY (ARRAY[('A'::character varying)::text, ('D'::character varying)::text])) AND ((g.esproducto)::text = 'S'::text) AND (ag.cantporunidcons > (0)::double precision) AND (c.valorgru IS NOT NULL))
  GROUP BY c.periodo, c.calculo, c.agrupacion, c.grupo, p.nombreproducto, c.valorgru, c.grupopadre, g.grupo_padre, hp.hogar, a.agrupo1, a.agrupo2, a.agrupo3, a.agrupo4, b.bgrupo0, b.bgrupo1, b.bgrupo2, b.bgrupo3, b.bgrupo4
  ORDER BY c.periodo, c.calculo, c.agrupacion, c.grupo, p.nombreproducto, c.valorgru, c.grupopadre, g.grupo_padre, hp.hogar, a.agrupo1, a.agrupo2, a.agrupo3, a.agrupo4, b.bgrupo0, b.bgrupo1, b.bgrupo2, b.bgrupo3, b.bgrupo4;


--
-- Name: conjuntomuestral; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.conjuntomuestral (
    conjuntomuestral integer NOT NULL,
    panel integer,
    encuestador character varying(10),
    tiponegociomuestra integer
);


--
-- Name: TABLE conjuntomuestral; Type: COMMENT; Schema: cvp; Owner: -
--

COMMENT ON TABLE cvp.conjuntomuestral IS 'Conjuntos Muestrales de Informantes de donde se elegirán reemplazantes';


--
-- Name: conjuntomuestral_conjuntomuestral_seq; Type: SEQUENCE; Schema: cvp; Owner: -
--

CREATE SEQUENCE cvp.conjuntomuestral_conjuntomuestral_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: conjuntomuestral_conjuntomuestral_seq; Type: SEQUENCE OWNED BY; Schema: cvp; Owner: -
--

ALTER SEQUENCE cvp.conjuntomuestral_conjuntomuestral_seq OWNED BY cvp.conjuntomuestral.conjuntomuestral;


--
-- Name: informantes; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.informantes (
    informante integer DEFAULT cvp.proximonumeroinformante() NOT NULL,
    nombreinformante character varying(250),
    tipoinformante character varying(1) NOT NULL,
    rubroclanae character varying(250),
    cadena character varying(250),
    direccion character varying(250),
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    altamanualperiodo character varying(11),
    altamanualpanel integer,
    altamanualtarea integer,
    altamanualconfirmar timestamp without time zone,
    razonsocial character varying(100),
    nombrecalle character varying(100),
    altura character varying(5),
    piso character varying(3),
    departamento character varying(4),
    cuit numeric(11,0),
    naecba numeric(9,0),
    totalpers numeric(3,0),
    cp character varying(8),
    distrito integer,
    fraccion integer,
    radio numeric(2,0),
    manzana numeric(3,0),
    lado numeric(1,0),
    obs_listador character varying(1000),
    nr_listador character(1),
    fecha_listado date,
    grupo_listado character varying(14),
    conjuntomuestral integer,
    rubro integer NOT NULL,
    ordenhdr integer DEFAULT 100 NOT NULL,
    cue numeric(6,0),
    idlocal numeric(2,0),
    muestra integer DEFAULT 1 NOT NULL,
    contacto character varying(100),
    telcontacto character varying(100),
    estado text DEFAULT 'No usado'::text,
    CONSTRAINT "Estado: No usado, Nuevo, Activo, Inactivo" CHECK ((estado = ANY (ARRAY['No usado'::text, 'Nuevo'::text, 'Activo'::text, 'Inactivo'::text]))),
    CONSTRAINT "Muestra 1: muestra vieja; 2:muestra nueva" CHECK ((muestra = ANY (ARRAY[1, 2]))),
    CONSTRAINT "el código postal debe estar escrito en mayúscula" CHECK (((cp)::text = upper((cp)::text))),
    CONSTRAINT "el informante debe ser positivo y tener 6 dígitos o menos" CHECK (((informante <= 999999) AND (informante > 0))),
    CONSTRAINT "el ordenhdr debe ser positivo ó 0" CHECK ((ordenhdr >= 0)),
    CONSTRAINT "texto invalido en altura de tabla informantes" CHECK (comun.cadena_valida((altura)::text, 'extendido'::text)),
    CONSTRAINT "texto invalido en contacto de tabla informantes" CHECK (comun.cadena_valida((contacto)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en cp de tabla informantes" CHECK (comun.cadena_valida((cp)::text, 'codigo'::text)),
    CONSTRAINT "texto invalido en departamento de tabla informantes" CHECK (comun.cadena_valida((departamento)::text, 'codigo'::text)),
    CONSTRAINT "texto invalido en direccion de tabla informantes" CHECK (comun.cadena_valida((direccion)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en nombrecalle de tabla informantes" CHECK (comun.cadena_valida((nombrecalle)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en nombreinformante de tabla informantes" CHECK (comun.cadena_valida((nombreinformante)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en obs_listador de tabla informantes" CHECK (comun.cadena_valida((obs_listador)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en piso de tabla informantes" CHECK (comun.cadena_valida((piso)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en razonsocial de tabla informantes" CHECK (comun.cadena_valida((razonsocial)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en telcontacto de tabla informantes" CHECK (comun.cadena_valida((telcontacto)::text, 'amplio'::text))
);


--
-- Name: relvis; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relvis (
    periodo character varying(11) NOT NULL,
    informante integer NOT NULL,
    formulario integer NOT NULL,
    panel integer NOT NULL,
    tarea integer NOT NULL,
    fechasalida date,
    fechaingreso date,
    ingresador character varying(250),
    razon integer,
    fechageneracion timestamp without time zone,
    visita integer DEFAULT 1 NOT NULL,
    ultimavisita integer DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentarios character varying(1000),
    encuestador character varying(10),
    supervisor character varying(10),
    recepcionista character varying(10),
    informantereemplazante integer,
    ultima_visita boolean,
    verificado_rec cvp.sino_dom DEFAULT 'N'::character varying,
    CONSTRAINT "Visita mayor o igual que 1" CHECK ((visita >= 1)),
    CONSTRAINT "texto invalido en comentarios de tabla relvis" CHECK (comun.cadena_valida((comentarios)::text, 'amplio'::text))
);


--
-- Name: control_ajustes; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_ajustes AS
 SELECT per.periodo,
    rv.panel,
    rv.tarea,
    rp.informante,
    i.tipoinformante,
    rp.visita,
    rp.formulario,
    split_part(string_agg((((gg_1.grupo_padre)::text || '|'::text) || (g_1.nombregrupo)::text), '|'::text ORDER BY g_1.nivel), '|'::text, 1) AS grupo_padre_1,
    split_part(string_agg((((gg_1.grupo_padre)::text || '|'::text) || (g_1.nombregrupo)::text), '|'::text ORDER BY g_1.nivel), '|'::text, 2) AS nombregrupo_1,
    split_part(string_agg((((gg_1.grupo_padre)::text || '|'::text) || (g_1.nombregrupo)::text), '|'::text ORDER BY g_1.nivel), '|'::text, 3) AS grupo_padre_2,
    split_part(string_agg((((gg_1.grupo_padre)::text || '|'::text) || (g_1.nombregrupo)::text), '|'::text ORDER BY g_1.nivel), '|'::text, 4) AS nombregrupo_2,
    split_part(string_agg((((gg_1.grupo_padre)::text || '|'::text) || (g_1.nombregrupo)::text), '|'::text ORDER BY g_1.nivel), '|'::text, 5) AS grupo_padre_3,
    split_part(string_agg((((gg_1.grupo_padre)::text || '|'::text) || (g_1.nombregrupo)::text), '|'::text ORDER BY g_1.nivel), '|'::text, 6) AS nombregrupo_3,
    rp.producto,
    p.nombreproducto,
    rp.observacion,
    rp.precionormalizado,
    rp.tipoprecio,
    rp.cambio,
    (((rp.precionormalizado / rp_1.precionormalizado) * (100.0)::double precision) - (100)::double precision) AS variacion_1,
    sign((((rp.precionormalizado / rp_1.precionormalizado) * (100.0)::double precision) - (100)::double precision)) AS varia_1,
    rp_1.precionormalizado AS precionormalizado_1,
    rp_1.tipoprecio AS tipoprecio_1,
    rp_1.cambio AS cambio_1,
    (((rp_1.precionormalizado / rp_2.precionormalizado) * (100.0)::double precision) - (100)::double precision) AS variacion_2,
    sign((((rp_1.precionormalizado / rp_2.precionormalizado) * (100.0)::double precision) - (100)::double precision)) AS varia_2,
    rp_2.precionormalizado AS precionormalizado_2,
    rp_2.tipoprecio AS tipoprecio_2,
    rp_2.cambio AS cambio_2,
    ((COALESCE((sign((((rp.precionormalizado / rp_1.precionormalizado) * (100.0)::double precision) - (100)::double precision)))::text, 'N'::text) || '_'::text) || COALESCE((sign((((rp_1.precionormalizado / rp_2.precionormalizado) * (100.0)::double precision) - (100)::double precision)))::text, 'N'::text)) AS varia_ambos
   FROM ((((((((( SELECT periodos.periodo,
            periodos.periodoanterior,
            cvp.moverperiodos((periodos.periodoanterior)::text, '-1'::integer) AS periodoanterioranterior
           FROM cvp.periodos
          WHERE ((periodos.ingresando)::text = 'S'::text)) per
     LEFT JOIN cvp.relpre rp ON (((per.periodo)::text = (rp.periodo)::text)))
     LEFT JOIN cvp.relvis rv ON ((((rv.periodo)::text = (rp.periodo)::text) AND (rv.informante = rp.informante) AND (rv.visita = rp.visita) AND (rv.formulario = rp.formulario))))
     LEFT JOIN cvp.productos p USING (producto))
     LEFT JOIN cvp.informantes i ON ((rp.informante = i.informante)))
     LEFT JOIN cvp.relpre rp_1 ON ((((rp_1.periodo)::text = (per.periodoanterior)::text) AND ((rp_1.producto)::text = (rp.producto)::text) AND (rp_1.observacion = rp.observacion) AND (rp_1.informante = rp.informante) AND (rp_1.visita = rp.visita))))
     LEFT JOIN cvp.relpre rp_2 ON ((((rp_2.periodo)::text = per.periodoanterioranterior) AND ((rp_2.producto)::text = (rp.producto)::text) AND (rp_2.observacion = rp.observacion) AND (rp_2.informante = rp.informante) AND (rp_2.visita = rp.visita))))
     LEFT JOIN cvp.gru_grupos gg_1 ON (((rp.producto)::text = (gg_1.grupo)::text)))
     LEFT JOIN cvp.grupos g_1 ON (((gg_1.grupo_padre)::text = (g_1.grupo)::text)))
  WHERE (((gg_1.agrupacion)::text = 'Z'::text) AND ((gg_1.esproducto)::text = 'S'::text) AND (g_1.nivel = ANY (ARRAY[1, 2, 3])))
  GROUP BY per.periodo, rv.panel, rv.tarea, rp.informante, i.tipoinformante, rp.visita, rp.formulario, rp.producto, p.nombreproducto, rp.observacion, rp.precionormalizado, rp.tipoprecio, rp.cambio, (((rp.precionormalizado / rp_1.precionormalizado) * (100.0)::double precision) - (100)::double precision), (sign((((rp.precionormalizado / rp_1.precionormalizado) * (100.0)::double precision) - (100)::double precision))), rp_1.precionormalizado, rp_1.tipoprecio, rp_1.cambio, (((rp_1.precionormalizado / rp_2.precionormalizado) * (100.0)::double precision) - (100)::double precision), (sign((((rp_1.precionormalizado / rp_2.precionormalizado) * (100.0)::double precision) - (100)::double precision))), rp_2.precionormalizado, rp_2.tipoprecio, rp_2.cambio, ((COALESCE((sign((((rp.precionormalizado / rp_1.precionormalizado) * (100.0)::double precision) - (100)::double precision)))::text, 'N'::text) || '_'::text) || COALESCE((sign((((rp_1.precionormalizado / rp_2.precionormalizado) * (100.0)::double precision) - (100)::double precision)))::text, 'N'::text));


--
-- Name: personal; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.personal (
    persona character varying(10) NOT NULL,
    labor character varying(1) NOT NULL,
    nombre character varying(100),
    apellido character varying(100),
    username character varying(100),
    activo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    super_labor character varying(1) DEFAULT 'N'::character varying,
    ipad text,
    id_instalacion integer,
    CONSTRAINT "Activo= S (Activo); N (Inactivo)" CHECK (((activo)::text = ANY (ARRAY[('S'::character varying)::text, ('N'::character varying)::text]))),
    CONSTRAINT "Labor= E(Enc);S(Sup);R(Recep);I(Ingre);A(Anali);C(Coord)" CHECK (((labor)::text = ANY (ARRAY[('E'::character varying)::text, ('S'::character varying)::text, ('R'::character varying)::text, ('I'::character varying)::text, ('A'::character varying)::text, ('C'::character varying)::text]))),
    CONSTRAINT "Super_labor debe ser S (Si) o N (No) o P (Parcial)" CHECK (((super_labor)::text = ANY (ARRAY['S'::text, 'N'::text, 'P'::text]))),
    CONSTRAINT "texto invalido en apellido de tabla personal" CHECK (comun.cadena_valida((apellido)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en nombre de tabla personal" CHECK (comun.cadena_valida((nombre)::text, 'castellano'::text))
);


--
-- Name: control_anulados_recep; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_anulados_recep AS
 SELECT r.periodo,
    r.producto,
    p.nombreproducto,
    r.informante,
    r.observacion,
    r.visita,
    v.panel,
    v.tarea,
    (((v.encuestador)::text || ':'::text) || (e.apellido)::text) AS encuestador,
    v.recepcionista,
    v.formulario,
    r.comentariosrelpre
   FROM (((cvp.relpre r
     LEFT JOIN cvp.productos p ON (((r.producto)::text = (p.producto)::text)))
     LEFT JOIN cvp.relvis v ON ((((r.periodo)::text = (v.periodo)::text) AND (r.informante = v.informante) AND (r.visita = v.visita) AND (r.formulario = v.formulario))))
     LEFT JOIN cvp.personal e ON (((v.encuestador)::text = (e.persona)::text)))
  WHERE ((r.tipoprecio)::text = 'A'::text);


--
-- Name: prodatr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.prodatr (
    producto character varying(8) NOT NULL,
    atributo integer NOT NULL,
    valornormal double precision,
    orden integer NOT NULL,
    normalizable character varying(1) DEFAULT 'N'::character varying,
    tiponormalizacion character varying(12),
    alterable character varying(1) DEFAULT 'N'::character varying,
    prioridad integer,
    operacion character varying(250),
    rangodesde double precision,
    rangohasta double precision,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    orden_calculo_especial integer,
    tipo_promedio character varying(20),
    esprincipal character varying(1) DEFAULT 'N'::character varying,
    visiblenombreatributo cvp.sino_dom DEFAULT 'N'::character varying NOT NULL,
    otraunidaddemedida character varying(25),
    opciones character varying(1) DEFAULT 'N'::character varying NOT NULL,
    CONSTRAINT "Opciones debe ser N (No), A (Abierta) o C (Cerrada)" CHECK (((opciones)::text = ANY (ARRAY['N'::text, 'C'::text, 'A'::text]))),
    CONSTRAINT "texto invalido en tipo_promedio de tabla prodatr" CHECK (comun.cadena_valida((tipo_promedio)::text, 'castellano'::text))
);


--
-- Name: relatr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relatr (
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    atributo integer NOT NULL,
    valor character varying(250),
    visita integer DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    validar_con_valvalatr boolean,
    CONSTRAINT "El valor de Validar_con_ValValAtr debe ser TRUE o nulo" CHECK (validar_con_valvalatr),
    CONSTRAINT "no se puede poner el sombrero en el atributo" CHECK (((valor)::text !~~ '%~%'::text)),
    CONSTRAINT "texto invalido en valor de tabla relatr" CHECK ((((periodo)::text < 'a2013m12'::text) OR comun.cadena_valida((valor)::text, 'amplio'::text)))
);


--
-- Name: tipopre; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.tipopre (
    tipoprecio character varying(10) NOT NULL,
    nombretipoprecio character varying(100),
    espositivo cvp.sino_dom DEFAULT 'N'::character varying NOT NULL,
    visibleparaencuestador cvp.sino_dom DEFAULT 'S'::character varying NOT NULL,
    registrablanqueo boolean DEFAULT false NOT NULL,
    activo character varying(1) DEFAULT 'S'::character varying,
    puedecopiar character varying(1) DEFAULT 'N'::character varying,
    orden integer,
    CONSTRAINT "texto invalido en nombretipoprecio de tabla tipopre" CHECK (comun.cadena_valida((nombretipoprecio)::text, 'castellano'::text))
);


--
-- Name: control_atributos; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_atributos AS
 SELECT v.periodo,
    v.producto,
    f.nombreproducto,
    vi.formulario,
    v.informante,
    v.observacion,
    v.visita,
    vi.panel,
    vi.tarea,
    vi.encuestador,
    vi.recepcionista,
    ((((((((('Valor Normal '::text || pa.valornormal) || ' '::text) || (a.nombreatributo)::text) || ' '::text) || (v.valor)::text) || ' Rango '::text) || pa.rangodesde) || ' a '::text) || pa.rangohasta) AS fueraderango
   FROM ((((((cvp.relatr v
     JOIN cvp.relpre r ON ((((v.periodo)::text = (r.periodo)::text) AND ((v.producto)::text = (r.producto)::text) AND (v.informante = r.informante) AND (v.observacion = r.observacion) AND (v.visita = r.visita))))
     JOIN cvp.productos f ON (((v.producto)::text = (f.producto)::text)))
     JOIN cvp.relvis vi ON (((v.informante = vi.informante) AND ((v.periodo)::text = (vi.periodo)::text) AND (v.visita = vi.visita) AND (r.formulario = vi.formulario))))
     LEFT JOIN cvp.prodatr pa ON ((((v.producto)::text = (pa.producto)::text) AND (v.atributo = pa.atributo))))
     LEFT JOIN cvp.atributos a ON ((pa.atributo = a.atributo)))
     LEFT JOIN cvp.tipopre t ON (((r.tipoprecio)::text = (t.tipoprecio)::text)))
  WHERE (((t.espositivo)::text = 'S'::text) AND comun.es_numero((v.valor)::text) AND (pa.rangohasta IS NOT NULL) AND (pa.rangodesde IS NOT NULL) AND
        CASE
            WHEN comun.es_numero((v.valor)::text) THEN ((((v.valor)::double precision > pa.rangohasta) OR ((v.valor)::double precision < pa.rangodesde)) AND ((v.valor)::double precision <> pa.valornormal))
            ELSE false
        END)
  ORDER BY v.periodo, vi.panel, vi.tarea, v.producto, v.informante, vi.formulario, v.observacion;


--
-- Name: proddiv; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.proddiv (
    producto character varying(8) NOT NULL,
    division character varying(250) NOT NULL,
    incluye_supermercados boolean,
    incluye_tradicionales boolean,
    tipoinformante character varying(1),
    sindividir boolean,
    ponderadordiv double precision,
    umbralpriimp integer,
    umbraldescarte integer,
    umbralbajaauto integer,
    CONSTRAINT "El ponderador debe ser positivo. Lo que se puede es eliminar el" CHECK ((ponderadordiv > (0)::double precision)),
    CONSTRAINT "El umbral de primera imputación debe ser mayor a cero" CHECK ((umbralpriimp > 0)),
    CONSTRAINT proddiv_sindividir_check CHECK (sindividir),
    CONSTRAINT "texto invalido en division de tabla proddiv" CHECK (comun.cadena_valida((division)::text, 'amplio'::text))
);


--
-- Name: control_calculoresultados; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_calculoresultados AS
 SELECT c.grupo AS codigo,
    g.nombregrupo AS nombre,
    NULL::character varying AS ti,
    c.nivel,
    c.valorgru AS valor,
    c.variacion,
    c.impgru AS imp,
    NULL::double precision AS cant,
    NULL::character varying AS unidad,
    NULL::double precision AS promedio,
    NULL::text AS unidadnormal,
    NULL::integer AS cantincluidos,
    NULL::integer AS cantimputados,
    NULL::double precision AS promvar,
    NULL::integer AS cantaltas,
    NULL::double precision AS promaltas,
    NULL::integer AS cantbajas,
    NULL::double precision AS prombajas,
    c.periodo,
    c.grupo AS ordenamiento,
    c.esproducto,
    NULL::double precision AS ponderadordiv,
    NULL::double precision AS promedio_1,
    NULL::double precision AS varprom,
    NULL::integer AS cantexcluidos,
    NULL::double precision AS promexcluidos
   FROM (((cvp.calgru c
     JOIN cvp.grupos g ON (((c.grupo)::text = (g.grupo)::text)))
     JOIN cvp.calculos a ON ((((a.periodo)::text = (c.periodo)::text) AND (a.calculo = c.calculo))))
     JOIN cvp.calculos_def cd ON ((a.calculo = cd.calculo)))
  WHERE ((c.calculo = 0) AND ((c.agrupacion)::text = (cd.agrupacionprincipal)::text) AND ((c.esproducto)::text = 'N'::text))
UNION
 SELECT c.producto AS codigo,
    p.nombreproducto AS nombre,
    c.division AS ti,
    g.nivel,
    cpa.valorprod AS valor,
        CASE
            WHEN ((c.division)::text = '0'::text) THEN g.variacion
            ELSE NULL::double precision
        END AS variacion,
    c.impdiv AS imp,
    cpa.cantporunidcons AS cant,
    cp.unidadmedidaporunidcons AS unidad,
    c.promdiv AS promedio,
    cvp.obtenerunidadnormalizada((p.producto)::text) AS unidadnormal,
    c.cantincluidos,
    c.cantimputados,
    c.promvar,
    c.cantaltas,
    c.promaltas,
    c.cantbajas,
    c.prombajas,
    c.periodo,
    (((g.grupopadre)::text || '-'::text) || (g.grupo)::text) AS ordenamiento,
    'S'::character varying AS esproducto,
    v.ponderadordiv,
    c_1.promdiv AS promedio_1,
    (((c.promdiv / c_1.promdiv) * (100)::double precision) - (100)::double precision) AS varprom,
    c.cantexcluidos,
    c.promexcluidos
   FROM (((((((((cvp.caldiv c
     JOIN cvp.productos p ON (((c.producto)::text = (p.producto)::text)))
     JOIN cvp.calculos a ON ((((a.periodo)::text = (c.periodo)::text) AND (a.calculo = c.calculo))))
     JOIN cvp.calculos_def cd ON ((a.calculo = cd.calculo)))
     JOIN cvp.calgru g ON ((((g.periodo)::text = (c.periodo)::text) AND (g.calculo = c.calculo) AND ((g.agrupacion)::text = (cd.agrupacionprincipal)::text) AND ((g.grupo)::text = (c.producto)::text))))
     JOIN ( SELECT x.periodo,
            x.calculo,
            x.producto,
            count(*) AS canttipo
           FROM cvp.caldiv x
          GROUP BY x.periodo, x.calculo, x.producto) y ON ((((y.periodo)::text = (c.periodo)::text) AND (y.calculo = c.calculo) AND ((y.producto)::text = (c.producto)::text))))
     JOIN cvp.calprod cp ON ((((c.periodo)::text = (cp.periodo)::text) AND (c.calculo = cp.calculo) AND ((c.producto)::text = (cp.producto)::text))))
     JOIN cvp.calprodagr cpa ON ((((c.periodo)::text = (cpa.periodo)::text) AND (c.calculo = cpa.calculo) AND ((c.producto)::text = (cpa.producto)::text) AND ((g.agrupacion)::text = (cpa.agrupacion)::text))))
     LEFT JOIN cvp.proddiv v ON ((((p.producto)::text = (v.producto)::text) AND ((c.division)::text = (v.division)::text))))
     LEFT JOIN cvp.caldiv c_1 ON ((((a.periodoanterior)::text = (c_1.periodo)::text) AND (a.calculoanterior = c_1.calculo) AND ((c.producto)::text = (c_1.producto)::text) AND ((c.division)::text = (c_1.division)::text))))
  WHERE (c.calculo = 0);


--
-- Name: control_calobs; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_calobs AS
 SELECT c.producto,
    c.informante,
    c.observacion,
    c.periodo,
    r.visita,
        CASE
            WHEN (r.visita > 1) THEN NULL::numeric
            ELSE round((c.promobs)::numeric, 2)
        END AS promobs,
        CASE
            WHEN (r.visita > 1) THEN NULL::character varying
            ELSE c.impobs
        END AS impobs,
        CASE
            WHEN (r.visita > 1) THEN NULL::numeric
            ELSE round((c_1.promobs)::numeric, 2)
        END AS promobs_1,
        CASE
            WHEN ((r.visita > 1) OR (c_1.promobs = (0)::double precision)) THEN NULL::numeric
            ELSE round(((((c.promobs / c_1.promobs) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacion,
    r.cambio,
    r.precionormalizado,
    r.precio,
    r.tipoprecio
   FROM (((cvp.relpre r
     FULL JOIN cvp.calobs c ON ((((c.periodo)::text = (r.periodo)::text) AND ((c.producto)::text = (r.producto)::text) AND (c.observacion = r.observacion) AND (c.informante = r.informante))))
     JOIN cvp.calculos ca ON ((((ca.periodo)::text = (c.periodo)::text) AND (ca.calculo = c.calculo))))
     LEFT JOIN cvp.calobs c_1 ON ((((c_1.producto)::text = (c.producto)::text) AND (c_1.calculo = ca.calculoanterior) AND (c_1.informante = c.informante) AND (c_1.observacion = c.observacion) AND ((c_1.periodo)::text = (ca.periodoanterior)::text))))
  WHERE (c.calculo = 0);


--
-- Name: control_comentariosrelpre; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_comentariosrelpre AS
 SELECT r.periodo,
    r.informante,
    r.visita,
    v.panel,
    v.tarea,
    v.recepcionista,
    (((pr.nombre)::text || ' '::text) || (pr.apellido)::text) AS nombrerecepcionista,
    r.producto,
    p.nombreproducto,
    r.observacion,
    r.tipoprecio,
    r.esvisiblecomentarioendm,
    r.comentariosrelpre
   FROM (((cvp.relpre r
     LEFT JOIN cvp.relvis v ON ((((r.periodo)::text = (v.periodo)::text) AND (r.informante = v.informante) AND (r.formulario = v.formulario) AND (r.visita = v.visita))))
     LEFT JOIN cvp.personal pr ON (((v.recepcionista)::text = (pr.persona)::text)))
     LEFT JOIN cvp.productos p ON (((r.producto)::text = (p.producto)::text)))
  WHERE ((r.comentariosrelpre IS NOT NULL) AND (r.comentariosrelpre <> ''::text) AND (r.comentariosrelpre <> ' '::text))
  ORDER BY r.periodo, v.panel, v.tarea, r.informante, r.visita;


--
-- Name: formularios; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.formularios (
    formulario integer NOT NULL,
    nombreformulario character varying(250),
    soloparatipo character varying(1),
    operativo character varying(1) NOT NULL,
    activo cvp.sino_dom,
    despacho character varying(1),
    altamanualdesdeperiodo character varying(11),
    orden integer NOT NULL,
    pie text,
    CONSTRAINT "Operativo debe ser C (Campo), G (Gabinete) o A (Ambos)" CHECK (((operativo)::text = ANY (ARRAY[('C'::character varying)::text, ('G'::character varying)::text, ('A'::character varying)::text]))),
    CONSTRAINT formularios_despacho_check CHECK (((despacho)::text = ANY (ARRAY[('A'::character varying)::text, ('P'::character varying)::text]))),
    CONSTRAINT "texto invalido en nombreformulario de tabla formularios" CHECK (comun.cadena_valida((nombreformulario)::text, 'castellano'::text))
);


--
-- Name: rubros; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.rubros (
    rubro integer NOT NULL,
    nombrerubro character varying(50) NOT NULL,
    tipoinformante character varying(1) NOT NULL,
    despacho character varying(1) NOT NULL,
    grupozonal character varying(1),
    telefonico cvp.sino_dom DEFAULT 'N'::character varying,
    CONSTRAINT "Despacho debe ser A (Autoservicio) o P (Personalizado)" CHECK (((despacho)::text = ANY (ARRAY[('A'::character varying)::text, ('P'::character varying)::text]))),
    CONSTRAINT "texto invalido en nombrerubro de tabla rubros" CHECK (comun.cadena_valida((nombrerubro)::text, 'castellano'::text))
);


--
-- Name: control_comentariosrelvis; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_comentariosrelvis AS
 SELECT r.periodo,
    r.informante,
    r.visita,
    r.panel,
    r.tarea,
    r.encuestador,
    (((pe.nombre)::text || ' '::text) || (pe.apellido)::text) AS nombreencuestador,
    r.recepcionista,
    (((pr.nombre)::text || ' '::text) || (pr.apellido)::text) AS nombrerecepcionista,
    i.rubro,
    u.nombrerubro,
    r.formulario,
    f.nombreformulario,
    r.comentarios
   FROM (((((cvp.relvis r
     LEFT JOIN cvp.informantes i ON ((r.informante = i.informante)))
     LEFT JOIN cvp.personal pe ON (((r.encuestador)::text = (pe.persona)::text)))
     LEFT JOIN cvp.personal pr ON (((r.recepcionista)::text = (pr.persona)::text)))
     LEFT JOIN cvp.rubros u ON ((i.rubro = u.rubro)))
     LEFT JOIN cvp.formularios f ON ((r.formulario = f.formulario)))
  WHERE (r.comentarios IS NOT NULL)
  ORDER BY r.periodo, r.panel, r.tarea, r.informante, r.visita, r.formulario;


--
-- Name: forprod; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.forprod (
    formulario integer NOT NULL,
    producto character varying(8) NOT NULL,
    orden integer,
    ordenimpresion integer
);


--
-- Name: razones; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.razones (
    razon integer NOT NULL,
    nombrerazon character varying(250),
    espositivoinformante cvp.sino_dom NOT NULL,
    espositivoformulario cvp.sino_dom NOT NULL,
    escierredefinitivoinf cvp.sino_dom NOT NULL,
    escierredefinitivofor cvp.sino_dom NOT NULL,
    visibleparaencuestador cvp.sino_dom DEFAULT 'S'::character varying NOT NULL,
    escierretemporalfor cvp.sino_dom DEFAULT 'N'::character varying,
    CONSTRAINT "texto invalido en nombrerazon de tabla razones" CHECK (comun.cadena_valida((nombrerazon)::text, 'castellano'::text))
);


--
-- Name: control_generacion_formularios; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_generacion_formularios AS
 SELECT p.periodo,
    r_1.panel,
    r_1.tarea,
    r_1.informante,
    r_1.formulario,
    r_1.visita,
    r_1.razon AS razonant,
    r.razon,
        CASE
            WHEN ((r.periodo IS NULL) AND ((z.escierredefinitivoinf)::text = 'N'::text) AND ((z.escierredefinitivofor)::text = 'N'::text)) THEN 'Falta generar'::text
            WHEN ((r.periodo IS NOT NULL) AND (r.razon IS NULL)) THEN 'Razon en blanco'::text
            WHEN ((r.razon IS NOT NULL) AND (pr.tieneprecio IS DISTINCT FROM 1)) THEN
            CASE
                WHEN (fp.tieneproductos = 1) THEN 'Sin precios'::text
                ELSE 'Sin productos'::text
            END
            ELSE 'Error no contemplado'::text
        END AS descripcion,
    r.panel AS panelactual,
    r.tarea AS tareaactual
   FROM (((((((cvp.relvis r_1
     JOIN cvp.formularios f ON ((r_1.formulario = f.formulario)))
     JOIN cvp.periodos p ON (((r_1.periodo)::text = (p.periodoanterior)::text)))
     JOIN cvp.razones z ON ((r_1.razon = z.razon)))
     LEFT JOIN cvp.relvis r ON ((((r.periodo)::text = (p.periodo)::text) AND (r.informante = r_1.informante) AND (r.formulario = r_1.formulario) AND (r.visita = r_1.visita))))
     LEFT JOIN ( SELECT DISTINCT relpre.periodo,
            relpre.informante,
            relpre.formulario,
            relpre.visita,
            1 AS tieneprecio
           FROM cvp.relpre) pr ON ((((pr.periodo)::text = (r.periodo)::text) AND (pr.informante = r.informante) AND (pr.formulario = r.formulario) AND (pr.visita = r.visita))))
     LEFT JOIN ( SELECT DISTINCT f_1.formulario,
            1 AS tiene_vigencia
           FROM ((cvp.forprod f_1
             JOIN cvp.prodatr pa ON (((f_1.producto)::text = (pa.producto)::text)))
             JOIN cvp.atributos a ON (((a.atributo = pa.atributo) AND (a.es_vigencia = true))))
          GROUP BY f_1.formulario) e ON ((e.formulario = r_1.formulario)))
     LEFT JOIN ( SELECT DISTINCT f_1.formulario,
            1 AS tieneproductos
           FROM cvp.forprod f_1) fp ON ((fp.formulario = r_1.formulario)))
  WHERE ((((r.periodo IS NULL) AND ((z.escierredefinitivoinf)::text = 'N'::text) AND ((z.escierredefinitivofor)::text = 'N'::text) AND (e.tiene_vigencia IS DISTINCT FROM 1)) OR ((r.periodo IS NOT NULL) AND (r.razon IS NULL)) OR ((r.periodo IS NOT NULL) AND (r.razon IS NOT NULL) AND (pr.tieneprecio IS DISTINCT FROM 1))) AND ((f.activo)::text = 'S'::text))
  ORDER BY p.periodo, r_1.panel, r_1.tarea, r_1.informante, r_1.formulario, r_1.visita;


--
-- Name: gru_prod; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.gru_prod AS
 WITH RECURSIVE productos_de(agrupacion, grupo_padre, producto) AS (
         SELECT grupos.agrupacion,
            grupos.grupopadre AS grupo_padre,
            grupos.grupo AS producto
           FROM cvp.grupos
          WHERE ((grupos.esproducto)::text = 'S'::text)
        UNION ALL
         SELECT p.agrupacion,
            g.grupopadre AS grupo_padre,
            p.producto
           FROM (productos_de p
             JOIN cvp.grupos g ON ((((g.grupo)::text = (p.grupo_padre)::text) AND ((g.agrupacion)::text = (p.agrupacion)::text))))
          WHERE (g.grupopadre IS NOT NULL)
        )
 SELECT productos_de.agrupacion,
    productos_de.grupo_padre,
    productos_de.producto
   FROM productos_de
  ORDER BY productos_de.producto, productos_de.agrupacion, productos_de.grupo_padre;


--
-- Name: control_grupos_para_cierre; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_grupos_para_cierre AS
 SELECT x.periodo,
    x.calculo,
    x.agrupacion,
    x.grupo,
    x.nombregrupo AS nombre,
    x.nivel,
    c.variacion,
    c.incidencia,
    c.variacioninteranualredondeada,
    c.incidenciainteranual,
    x.ponderador,
    x.cantincluidos,
    x.cantrealesincluidos,
    x.cantimputados,
    ('Z'::text || substr((x.grupo)::text, 2)) AS ordenpor
   FROM (( SELECT d.periodo,
            d.calculo,
            gp.agrupacion,
            gp.grupo_padre AS grupo,
            g.nombregrupo,
            g.ponderador,
            g.nivel,
            sum(d.cantincluidos) AS cantincluidos,
            sum(d.cantrealesincluidos) AS cantrealesincluidos,
            sum(d.cantimputados) AS cantimputados
           FROM (((cvp.caldiv d
             LEFT JOIN cvp.gru_prod gp ON (((d.producto)::text = (gp.producto)::text)))
             LEFT JOIN cvp.grupos g ON ((((gp.grupo_padre)::text = (g.grupo)::text) AND ((gp.agrupacion)::text = (g.agrupacion)::text))))
             LEFT JOIN cvp.agrupaciones a ON (((gp.agrupacion)::text = (a.agrupacion)::text)))
          WHERE (((d.division)::text = '0'::text) AND ((a.tipo_agrupacion)::text = 'INDICE'::text) AND (d.calculo = 0))
          GROUP BY d.periodo, d.calculo, gp.agrupacion, gp.grupo_padre, g.nombregrupo, g.ponderador, g.nivel) x
     LEFT JOIN cvp.calgru_vw c ON ((((c.periodo)::text = (x.periodo)::text) AND (c.calculo = x.calculo) AND ((c.agrupacion)::text = (x.agrupacion)::text) AND ((c.grupo)::text = (x.grupo)::text))))
  ORDER BY ('Z'::text || substr((x.grupo)::text, 2));


--
-- Name: control_hojas_ruta; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_hojas_ruta AS
 SELECT v.periodo,
    v.panel,
    v.tarea,
    v.fechasalida,
    v.informante,
    v.encuestador,
    (COALESCE(p.apellido, NULL::character varying))::text AS nombreencuestador,
    v.recepcionista,
    (COALESCE(s.apellido, NULL::character varying))::text AS nombrerecepcionista,
    v.ingresador,
    (COALESCE(n.apellido, NULL::character varying))::text AS nombreingresador,
    v.supervisor,
    (COALESCE(r.apellido, NULL::character varying))::text AS nombresupervisor,
    v.formulario,
    f.nombreformulario,
    f.operativo,
    v.razon,
    r_1.razon AS razonanterior,
    v.visita,
    i.nombreinformante,
    i.direccion,
    i.conjuntomuestral,
    i.ordenhdr
   FROM ((((((((cvp.relvis v
     JOIN cvp.informantes i ON ((v.informante = i.informante)))
     JOIN cvp.formularios f ON ((v.formulario = f.formulario)))
     LEFT JOIN cvp.personal p ON (((v.encuestador)::text = (p.persona)::text)))
     LEFT JOIN cvp.personal s ON (((v.recepcionista)::text = (s.persona)::text)))
     LEFT JOIN cvp.personal n ON (((v.ingresador)::text = (n.persona)::text)))
     LEFT JOIN cvp.personal r ON (((v.supervisor)::text = (r.persona)::text)))
     LEFT JOIN cvp.periodos o ON (((v.periodo)::text = (o.periodo)::text)))
     LEFT JOIN cvp.relvis r_1 ON ((((r_1.periodo)::text = (
        CASE
            WHEN (v.visita > 1) THEN v.periodo
            ELSE o.periodoanterior
        END)::text) AND (((r_1.ultima_visita = true) AND (v.visita = 1)) OR ((v.visita > 1) AND (r_1.visita = (v.visita - 1)))) AND (r_1.informante = v.informante) AND (r_1.formulario = v.formulario))))
  ORDER BY v.periodo, v.panel, v.tarea, v.informante, v.formulario;


--
-- Name: control_ingresados_calculo; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_ingresados_calculo AS
 SELECT p.periodo,
    p.producto,
    o.nombreproducto,
    p.informante,
    i.nombreinformante,
    p.observacion,
    i.tipoinformante,
    pd.divisionesdelproducto,
        CASE
            WHEN (NOT ((i.tipoinformante)::text IS DISTINCT FROM pd.divisionesdelproducto)) THEN date_trunc('second'::text, i.modi_fec)
            ELSE NULL::timestamp without time zone
        END AS fechamodificacioninformante
   FROM (((((( SELECT DISTINCT relpre.periodo,
            relpre.producto,
            relpre.informante,
            relpre.observacion,
            relpre.modi_fec
           FROM cvp.relpre
          WHERE (relpre.precionormalizado IS NOT NULL)) p
     JOIN cvp.productos o ON (((p.producto)::text = (o.producto)::text)))
     JOIN cvp.informantes i ON ((p.informante = i.informante)))
     JOIN cvp.calculos a ON ((((p.periodo)::text = (a.periodo)::text) AND (a.calculo = 0))))
     LEFT JOIN ( SELECT proddiv.producto,
            string_agg((proddiv.division)::text, ','::text ORDER BY (proddiv.division)::text) AS divisionesdelproducto
           FROM cvp.proddiv
          GROUP BY proddiv.producto) pd ON (((p.producto)::text = (pd.producto)::text)))
     LEFT JOIN ( SELECT calobs.periodo,
            calobs.calculo,
            calobs.producto,
            calobs.informante,
            calobs.observacion,
            calobs.division,
            calobs.promobs,
            calobs.impobs,
            calobs.antiguedadconprecio,
            calobs.antiguedadsinprecio,
            calobs.antiguedadexcluido,
            calobs.antiguedadincluido,
            calobs.sindatosestacional,
            calobs.muestra
           FROM cvp.calobs
          WHERE (calobs.calculo = 0)) c ON ((((c.periodo)::text = (p.periodo)::text) AND ((c.producto)::text = (p.producto)::text) AND (c.informante = p.informante) AND (c.observacion = p.observacion))))
  WHERE ((c.division IS NULL) AND (p.modi_fec < a.fechacalculo))
  ORDER BY p.periodo, p.producto, p.informante, p.observacion;


--
-- Name: control_ingreso_atributos; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_ingreso_atributos AS
 SELECT v.periodo,
    v.panel,
    v.tarea,
    v.informante,
    v.formulario,
    v.visita,
    p.producto,
    p.observacion,
    a.atributo,
    atr.nombreatributo,
    a.valor,
    atr.tipodato
   FROM (((cvp.relvis v
     JOIN cvp.relpre p ON ((((v.periodo)::text = (p.periodo)::text) AND (v.informante = p.informante) AND (v.formulario = p.formulario) AND (v.visita = p.visita))))
     LEFT JOIN cvp.relatr a ON ((((a.periodo)::text = (p.periodo)::text) AND (a.visita = p.visita) AND (a.informante = p.informante) AND ((a.producto)::text = (p.producto)::text) AND (a.observacion = p.observacion))))
     LEFT JOIN cvp.atributos atr ON ((atr.atributo = a.atributo)))
  WHERE ((p.precio > (0.0)::double precision) AND (a.atributo IS NOT NULL) AND ((v.periodo)::text >= 'a2009m05'::text) AND ((a.valor IS NULL) OR (((atr.tipodato)::text = 'N'::text) AND (NOT comun.es_numero((a.valor)::text)))))
  ORDER BY v.periodo, v.panel, v.tarea, v.informante, v.formulario, p.producto, p.observacion;


--
-- Name: control_ingreso_precios; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_ingreso_precios AS
 SELECT p.periodo,
    v.panel,
    v.tarea,
    p.informante,
    p.formulario,
    p.visita,
    v.razon,
    p.producto,
    p.observacion
   FROM ((cvp.relvis v
     JOIN cvp.razones z ON ((v.razon = z.razon)))
     LEFT JOIN cvp.relpre p ON ((((v.periodo)::text = (p.periodo)::text) AND (v.informante = p.informante) AND (v.formulario = p.formulario) AND (v.visita = p.visita))))
  WHERE ((p.precio IS NULL) AND (p.tipoprecio IS NULL) AND ((z.espositivoformulario)::text = 'S'::text))
  ORDER BY p.periodo, v.panel, v.tarea, p.informante, p.formulario, p.visita, p.producto, p.observacion;


--
-- Name: control_normalizables_sindato; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_normalizables_sindato AS
 SELECT ra.periodo,
    ra.producto,
    x.nombreproducto,
    ra.observacion,
    ra.informante,
    ra.atributo,
    ra.valor,
    ra.visita,
    ra.validar_con_valvalatr,
    y.nombreatributo,
    pa.valornormal,
    pa.orden,
    pa.normalizable,
    pa.tiponormalizacion,
    pa.alterable,
    pa.prioridad,
    pa.operacion,
    pa.rangodesde,
    pa.rangohasta,
    pa.orden_calculo_especial,
    pa.tipo_promedio,
    rp.formulario,
    rp.precio,
    rp.tipoprecio,
    rp.comentariosrelpre,
    rp.cambio,
    rp.precionormalizado,
    rp.especificacion,
    rp.ultima_visita,
    v.panel,
    v.tarea,
    (((v.encuestador)::text || ':'::text) || (pe.apellido)::text) AS encuestador,
    v.recepcionista
   FROM ((((((cvp.relatr ra
     JOIN cvp.prodatr pa ON (((pa.atributo = ra.atributo) AND ((pa.producto)::text = (ra.producto)::text))))
     JOIN cvp.relpre rp ON ((((rp.periodo)::text = (ra.periodo)::text) AND (rp.visita = ra.visita) AND ((rp.producto)::text = (ra.producto)::text) AND (rp.observacion = ra.observacion) AND (rp.informante = ra.informante))))
     JOIN cvp.relvis v ON ((((v.periodo)::text = (rp.periodo)::text) AND (v.informante = rp.informante) AND (v.visita = rp.visita) AND (v.formulario = rp.formulario))))
     JOIN cvp.personal pe ON (((v.encuestador)::text = (pe.persona)::text)))
     JOIN cvp.productos x ON (((x.producto)::text = (ra.producto)::text)))
     JOIN cvp.atributos y ON ((y.atributo = ra.atributo)))
  WHERE ((pa.valornormal IS NOT NULL) AND ((pa.normalizable)::text = 'S'::text) AND (ra.valor IS NULL) AND (rp.precio IS NOT NULL))
  ORDER BY ra.periodo, ra.producto, ra.observacion, ra.informante, ra.atributo, ra.visita;


--
-- Name: control_precios; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_precios AS
 SELECT x.periodo,
    x.producto,
    p.nombreproducto,
    x.precio_min,
    p_min.observacion AS observacion_min,
    p_min.informante AS informante_min,
    p_min.formulario AS formulario_min,
    x.precio_max,
    p_max.observacion AS observacion_max,
    p_max.informante AS informante_max,
    p_max.formulario AS formulario_max
   FROM ( SELECT pr.periodo,
            pr.producto,
            max(pr.precio) AS precio_max,
            min(pr.precio) AS precio_min
           FROM cvp.relpre pr
          WHERE (pr.precio > (0)::double precision)
          GROUP BY pr.periodo, pr.producto) x,
    cvp.relpre p_min,
    cvp.relpre p_max,
    cvp.productos p
  WHERE (((p_min.periodo)::text = (x.periodo)::text) AND ((p_min.producto)::text = (x.producto)::text) AND (p_min.precio = x.precio_min) AND ((p_max.periodo)::text = (x.periodo)::text) AND ((p_max.producto)::text = (x.producto)::text) AND (p_max.precio = x.precio_max) AND ((p.producto)::text = (x.producto)::text));


--
-- Name: control_precios2; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_precios2 AS
 SELECT x.periodo,
    x.producto,
    p.nombreproducto,
    rp.observacion,
    rp.informante,
    rp.formulario,
        CASE
            WHEN (rp.precio = x.precio_min) THEN 'precio min'::text
            WHEN (rp.precio = x.precio_max) THEN 'PRECIO MAX'::text
            ELSE ''::text
        END AS categoria,
    rp.precio,
    rp.tipoprecio
   FROM ( SELECT pr.periodo,
            pr.producto,
            max(pr.precio) AS precio_max,
            min(pr.precio) AS precio_min
           FROM cvp.relpre pr
          WHERE (pr.precio > (0)::double precision)
          GROUP BY pr.periodo, pr.producto) x,
    cvp.relpre rp,
    cvp.productos p
  WHERE (((rp.periodo)::text = (x.periodo)::text) AND ((rp.producto)::text = (x.producto)::text) AND ((rp.precio = x.precio_min) OR (rp.precio = x.precio_max)) AND ((p.producto)::text = (x.producto)::text))
  ORDER BY x.periodo, x.producto, rp.observacion, rp.precio;


--
-- Name: control_productos_para_cierre; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_productos_para_cierre AS
 SELECT o.periodo,
    o.calculo,
    o.producto,
    p.nombreproducto,
    g.variacion,
    g.incidencia,
    o.cantincluidos,
    o.cantrealesincluidos,
    o.cantimputados,
    round((((round((s.promdiv)::numeric, 2) / round((s0.promdiv)::numeric, 2)) * (100)::numeric) - (100)::numeric), 1) AS s_variacion,
    s.cantincluidos AS s_cantincluidos,
    s.cantrealesincluidos AS s_cantrealesincluidos,
    s.cantimputados AS s_cantimputados,
    round((((round((t.promdiv)::numeric, 2) / round((t0.promdiv)::numeric, 2)) * (100)::numeric) - (100)::numeric), 1) AS t_variacion,
    t.cantincluidos AS t_cantincluidos,
    t.cantrealesincluidos AS t_cantrealesincluidos,
    t.cantimputados AS t_cantimputados
   FROM (((((((( SELECT caldiv.periodo,
            caldiv.calculo,
            caldiv.producto,
            caldiv.division,
            caldiv.prompriimpact,
            caldiv.prompriimpant,
            caldiv.cantpriimp,
            caldiv.promprel,
            caldiv.promdiv,
            caldiv.impdiv,
            caldiv.cantincluidos,
            caldiv.cantrealesincluidos,
            caldiv.cantrealesexcluidos,
            caldiv.promvar,
            caldiv.cantaltas,
            caldiv.promaltas,
            caldiv.cantbajas,
            caldiv.prombajas,
            caldiv.cantimputados,
            caldiv.ponderadordiv,
            caldiv.umbralpriimp,
            caldiv.umbraldescarte,
            caldiv.umbralbajaauto,
            caldiv.cantidadconprecio,
            caldiv.profundidad,
            caldiv.divisionpadre,
            caldiv.tipo_promedio,
            caldiv.raiz,
            caldiv.cantexcluidos,
            caldiv.promexcluidos,
            caldiv.promimputados,
            caldiv.promrealesincluidos,
            caldiv.promrealesexcluidos,
            caldiv.promedioredondeado,
            caldiv.cantrealesdescartados,
            caldiv.cantpreciostotales,
            caldiv.cantpreciosingresados,
            caldiv.cantconprecioparacalestac,
            caldiv.promsinimpext
           FROM cvp.caldiv
          WHERE (((caldiv.division)::text = '0'::text) AND (caldiv.calculo = 0))) o
     LEFT JOIN cvp.periodos r ON (((o.periodo)::text = (r.periodo)::text)))
     LEFT JOIN ( SELECT caldiv.periodo,
            caldiv.calculo,
            caldiv.producto,
            caldiv.division,
            caldiv.prompriimpact,
            caldiv.prompriimpant,
            caldiv.cantpriimp,
            caldiv.promprel,
            caldiv.promdiv,
            caldiv.impdiv,
            caldiv.cantincluidos,
            caldiv.cantrealesincluidos,
            caldiv.cantrealesexcluidos,
            caldiv.promvar,
            caldiv.cantaltas,
            caldiv.promaltas,
            caldiv.cantbajas,
            caldiv.prombajas,
            caldiv.cantimputados,
            caldiv.ponderadordiv,
            caldiv.umbralpriimp,
            caldiv.umbraldescarte,
            caldiv.umbralbajaauto,
            caldiv.cantidadconprecio,
            caldiv.profundidad,
            caldiv.divisionpadre,
            caldiv.tipo_promedio,
            caldiv.raiz,
            caldiv.cantexcluidos,
            caldiv.promexcluidos,
            caldiv.promimputados,
            caldiv.promrealesincluidos,
            caldiv.promrealesexcluidos,
            caldiv.promedioredondeado,
            caldiv.cantrealesdescartados,
            caldiv.cantpreciostotales,
            caldiv.cantpreciosingresados,
            caldiv.cantconprecioparacalestac,
            caldiv.promsinimpext
           FROM cvp.caldiv
          WHERE (((caldiv.division)::text = 'S'::text) AND (caldiv.calculo >= 0))) s ON ((((o.periodo)::text = (s.periodo)::text) AND (o.calculo = s.calculo) AND ((o.producto)::text = (s.producto)::text))))
     LEFT JOIN ( SELECT caldiv.periodo,
            caldiv.calculo,
            caldiv.producto,
            caldiv.division,
            caldiv.prompriimpact,
            caldiv.prompriimpant,
            caldiv.cantpriimp,
            caldiv.promprel,
            caldiv.promdiv,
            caldiv.impdiv,
            caldiv.cantincluidos,
            caldiv.cantrealesincluidos,
            caldiv.cantrealesexcluidos,
            caldiv.promvar,
            caldiv.cantaltas,
            caldiv.promaltas,
            caldiv.cantbajas,
            caldiv.prombajas,
            caldiv.cantimputados,
            caldiv.ponderadordiv,
            caldiv.umbralpriimp,
            caldiv.umbraldescarte,
            caldiv.umbralbajaauto,
            caldiv.cantidadconprecio,
            caldiv.profundidad,
            caldiv.divisionpadre,
            caldiv.tipo_promedio,
            caldiv.raiz,
            caldiv.cantexcluidos,
            caldiv.promexcluidos,
            caldiv.promimputados,
            caldiv.promrealesincluidos,
            caldiv.promrealesexcluidos,
            caldiv.promedioredondeado,
            caldiv.cantrealesdescartados,
            caldiv.cantpreciostotales,
            caldiv.cantpreciosingresados,
            caldiv.cantconprecioparacalestac,
            caldiv.promsinimpext
           FROM cvp.caldiv
          WHERE (((caldiv.division)::text = 'S'::text) AND (caldiv.calculo >= 0))) s0 ON ((((s0.periodo)::text = (r.periodoanterior)::text) AND (s0.calculo = s.calculo) AND ((s0.producto)::text = (s.producto)::text) AND ((s0.division)::text = (s.division)::text))))
     LEFT JOIN ( SELECT caldiv.periodo,
            caldiv.calculo,
            caldiv.producto,
            caldiv.division,
            caldiv.prompriimpact,
            caldiv.prompriimpant,
            caldiv.cantpriimp,
            caldiv.promprel,
            caldiv.promdiv,
            caldiv.impdiv,
            caldiv.cantincluidos,
            caldiv.cantrealesincluidos,
            caldiv.cantrealesexcluidos,
            caldiv.promvar,
            caldiv.cantaltas,
            caldiv.promaltas,
            caldiv.cantbajas,
            caldiv.prombajas,
            caldiv.cantimputados,
            caldiv.ponderadordiv,
            caldiv.umbralpriimp,
            caldiv.umbraldescarte,
            caldiv.umbralbajaauto,
            caldiv.cantidadconprecio,
            caldiv.profundidad,
            caldiv.divisionpadre,
            caldiv.tipo_promedio,
            caldiv.raiz,
            caldiv.cantexcluidos,
            caldiv.promexcluidos,
            caldiv.promimputados,
            caldiv.promrealesincluidos,
            caldiv.promrealesexcluidos,
            caldiv.promedioredondeado,
            caldiv.cantrealesdescartados,
            caldiv.cantpreciostotales,
            caldiv.cantpreciosingresados,
            caldiv.cantconprecioparacalestac,
            caldiv.promsinimpext
           FROM cvp.caldiv
          WHERE (((caldiv.division)::text = 'T'::text) AND (caldiv.calculo >= 0))) t ON ((((s.periodo)::text = (t.periodo)::text) AND (s.calculo = t.calculo) AND ((s.producto)::text = (t.producto)::text))))
     LEFT JOIN ( SELECT caldiv.periodo,
            caldiv.calculo,
            caldiv.producto,
            caldiv.division,
            caldiv.prompriimpact,
            caldiv.prompriimpant,
            caldiv.cantpriimp,
            caldiv.promprel,
            caldiv.promdiv,
            caldiv.impdiv,
            caldiv.cantincluidos,
            caldiv.cantrealesincluidos,
            caldiv.cantrealesexcluidos,
            caldiv.promvar,
            caldiv.cantaltas,
            caldiv.promaltas,
            caldiv.cantbajas,
            caldiv.prombajas,
            caldiv.cantimputados,
            caldiv.ponderadordiv,
            caldiv.umbralpriimp,
            caldiv.umbraldescarte,
            caldiv.umbralbajaauto,
            caldiv.cantidadconprecio,
            caldiv.profundidad,
            caldiv.divisionpadre,
            caldiv.tipo_promedio,
            caldiv.raiz,
            caldiv.cantexcluidos,
            caldiv.promexcluidos,
            caldiv.promimputados,
            caldiv.promrealesincluidos,
            caldiv.promrealesexcluidos,
            caldiv.promedioredondeado,
            caldiv.cantrealesdescartados,
            caldiv.cantpreciostotales,
            caldiv.cantpreciosingresados,
            caldiv.cantconprecioparacalestac,
            caldiv.promsinimpext
           FROM cvp.caldiv
          WHERE (((caldiv.division)::text = 'T'::text) AND (caldiv.calculo >= 0))) t0 ON ((((t0.periodo)::text = (r.periodoanterior)::text) AND (t.calculo = t0.calculo) AND ((t.producto)::text = (t0.producto)::text) AND ((t.division)::text = (t0.division)::text))))
     LEFT JOIN cvp.productos p ON (((o.producto)::text = (p.producto)::text)))
     LEFT JOIN ( SELECT calgru.periodo,
            calgru.calculo,
            calgru.agrupacion,
            calgru.grupo,
            calgru.variacion,
            calgru.impgru,
            calgru.valorprel,
            calgru.valorgru,
            calgru.grupopadre,
            calgru.nivel,
            calgru.esproducto,
            calgru.ponderador,
            calgru.indice,
            calgru.indiceprel,
            calgru.incidencia,
            calgru.indiceredondeado,
            calgru.incidenciaredondeada,
            calgru.ponderadorimplicito
           FROM cvp.calgru
          WHERE (((calgru.esproducto)::text = 'S'::text) AND ((calgru.agrupacion)::text = 'Z'::text))) g ON ((((g.periodo)::text = (o.periodo)::text) AND (g.calculo = o.calculo) AND ((g.grupo)::text = (o.producto)::text))));


--
-- Name: relpan; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relpan (
    periodo character varying(10) NOT NULL,
    panel integer NOT NULL,
    fechasalida date,
    fechageneracionpanel timestamp without time zone,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    periodoparapanelrotativo character varying(11),
    generacionsupervisiones timestamp without time zone
);


--
-- Name: panel_promrotativo; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.panel_promrotativo AS
 SELECT pa.periodo,
    v2.producto,
    avg(v2.precionormalizado) AS promrotativo,
    stddev(v2.precionormalizado) AS desvprot
   FROM cvp.relvis vis,
    cvp.relpre v2,
    cvp.relpan pa
  WHERE ((vis.informante = v2.informante) AND ((vis.periodo)::text = (v2.periodo)::text) AND (vis.visita = v2.visita) AND (vis.formulario = v2.formulario) AND ((pa.periodoparapanelrotativo)::text = (vis.periodo)::text) AND (vis.panel = pa.panel))
  GROUP BY pa.periodo, v2.producto
  ORDER BY pa.periodo, v2.producto;


--
-- Name: parametros; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.parametros (
    unicoregistro boolean DEFAULT true NOT NULL,
    nombreaplicacion character varying(30),
    titulo character varying(100),
    archivologo character varying(200),
    tamannodesvpre double precision DEFAULT 2.5 NOT NULL,
    tamannodesvvar double precision DEFAULT 2.5 NOT NULL,
    codigo character varying(1),
    formularionumeracionglobal character varying(1),
    estructuraversioncommit numeric,
    soloingresaingresador cvp.sino_dom DEFAULT 'S'::character varying,
    pb_desde character varying(11),
    pb_hasta character varying(11),
    ph_desde character varying(11),
    sup_aleat_prob1 double precision,
    sup_aleat_prob2 double precision,
    sup_aleat_prob_per double precision,
    sup_aleat_prob_pantar double precision,
    diferencia_horaria_tolerancia_ipad interval DEFAULT '01:15:00'::interval NOT NULL,
    diferencia_horaria_advertencia_ipad interval DEFAULT '00:15:00'::interval NOT NULL,
    puedeagregarvisita cvp.sino_dom,
    CONSTRAINT parametros_unicoregistro_check CHECK (unicoregistro)
);


--
-- Name: prerep; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.prerep (
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    informante integer NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


--
-- Name: relpre_1; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.relpre_1 AS
 SELECT r.periodo,
    r.producto,
    r.observacion,
    r.informante,
    r.formulario,
    r.visita,
    r.precio,
    r.tipoprecio,
    r.cambio,
    r.comentariosrelpre,
    r.observaciones,
    r_1.precio AS precio_1,
    r_1.tipoprecio AS tipoprecio_1,
    r_1.cambio AS cambio_1,
    r_1.periodo AS periodo_1,
    r_1.visita AS visita_1,
    r.precionormalizado,
    r_1.precionormalizado AS precionormalizado_1,
    r_1.comentariosrelpre AS comentariosrelpre_1
   FROM ((cvp.relpre r
     LEFT JOIN cvp.periodos p ON (((r.periodo)::text = (p.periodo)::text)))
     LEFT JOIN cvp.relpre r_1 ON ((((r_1.periodo)::text = (
        CASE
            WHEN (r.visita > 1) THEN r.periodo
            ELSE p.periodoanterior
        END)::text) AND (((r_1.ultima_visita = true) AND (r.visita = 1)) OR ((r.visita > 1) AND (r_1.visita = (r.visita - 1)))) AND (r_1.informante = r.informante) AND ((r_1.producto)::text = (r.producto)::text) AND (r_1.observacion = r.observacion))));


--
-- Name: control_rangos; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_rangos AS
 SELECT v.periodo,
    v.producto,
    f.nombreproducto,
    v.informante,
    i.tipoinformante,
    v.observacion,
    v.visita,
    vi.panel,
    vi.tarea,
    (((vi.encuestador)::text || ':'::text) || (pe.apellido)::text) AS encuestador,
    vi.recepcionista,
    pc.apellido AS nombrerecep,
    v.formulario,
    v.precionormalizado,
    v.comentariosrelpre,
    v.observaciones,
    v.tipoprecio,
    v.cambio,
    c2.impobs,
    COALESCE(v.precionormalizado_1, co.promobs) AS precioant,
    v.tipoprecio_1 AS tipoprecioant,
    co.antiguedadsinprecio AS antiguedadsinprecioant,
    sum((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision)) AS variac,
    avgvar.promvar,
    avgvar.desvvar,
    avgprot.promrotativo,
    avgprot.desvprot,
    (((vi2.razon)::text || ':'::text) || (COALESCE(co.impobs, ' '::character varying))::text) AS razon_impobs_ant,
        CASE
            WHEN (min((pr.periodo)::text) IS NOT NULL) THEN 'R'::text
            ELSE NULL::text
        END AS repregunta
   FROM ((((((((((((cvp.relpre_1 v
     JOIN cvp.productos f ON (((v.producto)::text = (f.producto)::text)))
     JOIN cvp.relvis vi ON (((v.informante = vi.informante) AND ((v.periodo)::text = (vi.periodo)::text) AND (v.visita = vi.visita) AND (v.formulario = vi.formulario))))
     LEFT JOIN cvp.personal pe ON (((vi.encuestador)::text = (pe.persona)::text)))
     LEFT JOIN cvp.personal pc ON (((vi.recepcionista)::text = (pc.persona)::text)))
     LEFT JOIN cvp.calobs co ON ((((co.periodo)::text = (v.periodo_1)::text) AND (co.calculo = 0) AND ((co.producto)::text = (v.producto)::text) AND (co.informante = v.informante) AND (co.observacion = v.observacion))))
     LEFT JOIN cvp.calobs c2 ON ((((c2.periodo)::text = (v.periodo)::text) AND (c2.calculo = 0) AND ((c2.producto)::text = (v.producto)::text) AND (c2.informante = v.informante) AND (c2.observacion = v.observacion))))
     JOIN ( SELECT avg((((va2.precionormalizado / COALESCE(va2.precionormalizado_1, co2.promobs)) * (100)::double precision) - (100)::double precision)) AS promvar,
            stddev((((va2.precionormalizado / COALESCE(va2.precionormalizado_1, co2.promobs)) * (100)::double precision) - (100)::double precision)) AS desvvar,
            va2.periodo,
            va2.producto
           FROM (cvp.relpre_1 va2
             LEFT JOIN cvp.calobs co2 ON ((((co2.periodo)::text = (va2.periodo_1)::text) AND (co2.calculo = 0) AND ((co2.producto)::text = (va2.producto)::text) AND (co2.informante = va2.informante) AND (co2.observacion = va2.observacion))))
          GROUP BY va2.periodo, va2.producto) avgvar ON ((((v.periodo)::text = (avgvar.periodo)::text) AND ((v.producto)::text = (avgvar.producto)::text))))
     JOIN cvp.panel_promrotativo avgprot ON ((((v.periodo)::text = (avgprot.periodo)::text) AND ((v.producto)::text = (avgprot.producto)::text))))
     JOIN cvp.parametros ON ((parametros.unicoregistro = true)))
     JOIN cvp.informantes i ON ((v.informante = i.informante)))
     LEFT JOIN cvp.prerep pr ON ((((v.periodo)::text = (pr.periodo)::text) AND (v.informante = pr.informante) AND ((v.producto)::text = (pr.producto)::text))))
     LEFT JOIN cvp.relvis vi2 ON (((v.informante = vi2.informante) AND ((v.periodo_1)::text = (vi2.periodo)::text) AND (v.visita = vi2.visita) AND (v.formulario = vi2.formulario))))
  WHERE (((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision) > (avgvar.promvar + (parametros.tamannodesvvar * avgvar.desvvar))) OR (((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision) IS DISTINCT FROM (0)::double precision) AND ((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision) < (avgvar.promvar - (parametros.tamannodesvvar * avgvar.desvvar)))) OR (v.precionormalizado > (avgprot.promrotativo + (parametros.tamannodesvpre * avgprot.desvprot))) OR (v.precionormalizado < (avgprot.promrotativo - (parametros.tamannodesvpre * avgprot.desvprot))))
  GROUP BY v.periodo, v.producto, f.nombreproducto, v.informante, i.tipoinformante, v.observacion, v.visita, vi.panel, (((vi.encuestador)::text || ':'::text) || (pe.apellido)::text), vi.recepcionista, pc.apellido, vi.tarea, v.formulario, v.precionormalizado, v.comentariosrelpre, v.observaciones, v.tipoprecio, v.cambio, c2.impobs, v.precionormalizado_1, co.promobs, v.tipoprecio_1, co.antiguedadsinprecio, avgvar.promvar, avgvar.desvvar, avgprot.promrotativo, avgprot.desvprot, co.impobs, vi2.razon
  ORDER BY v.periodo, v.producto, vi.panel, vi.tarea, v.informante;


--
-- Name: panel_promrotativo_mod; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.panel_promrotativo_mod AS
 SELECT pa.periodo,
    v2.producto,
    avg(v2.precionormalizado) AS promrotativo,
    stddev(v2.precionormalizado) AS desvprot
   FROM cvp.relvis vis,
    cvp.relpre v2,
    cvp.relpan pa
  WHERE ((vis.informante = v2.informante) AND ((vis.periodo)::text = (v2.periodo)::text) AND (vis.visita = v2.visita) AND (vis.formulario = v2.formulario) AND ((pa.periodoparapanelrotativo)::text = (v2.periodo)::text) AND (vis.panel = pa.panel))
  GROUP BY pa.periodo, v2.producto
  ORDER BY pa.periodo, v2.producto;


--
-- Name: control_rangos_mod; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_rangos_mod AS
 SELECT v.periodo,
    v.producto,
    f.nombreproducto,
    v.informante,
    i.tipoinformante,
    v.observacion,
    v.visita,
    vi.panel,
    vi.tarea,
    v.precionormalizado,
    v.tipoprecio,
    v.cambio,
    c2.impobs,
    COALESCE(v.precionormalizado_1, co.promobs) AS precioant,
    sum((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision)) AS variac,
    avgvar.promvar,
    avgvar.desvvar,
    avgprot.promrotativo,
    avgprot.desvprot,
    co.impobs AS impobs_1
   FROM ((((((((cvp.relpre_1 v
     JOIN cvp.productos f ON (((v.producto)::text = (f.producto)::text)))
     JOIN cvp.relvis vi ON (((v.informante = vi.informante) AND ((v.periodo)::text = (vi.periodo)::text) AND (v.visita = vi.visita) AND (v.formulario = vi.formulario))))
     LEFT JOIN cvp.calobs co ON ((((co.periodo)::text = (v.periodo_1)::text) AND (co.calculo = 0) AND ((co.producto)::text = (v.producto)::text) AND (co.informante = v.informante) AND (co.observacion = v.observacion))))
     LEFT JOIN cvp.calobs c2 ON ((((c2.periodo)::text = (v.periodo)::text) AND (c2.calculo = 0) AND ((c2.producto)::text = (v.producto)::text) AND (c2.informante = v.informante) AND (c2.observacion = v.observacion))))
     JOIN ( SELECT avg((((va2.precionormalizado / COALESCE(va2.precionormalizado_1, co2.promobs)) * (100)::double precision) - (100)::double precision)) AS promvar,
            stddev((((va2.precionormalizado / COALESCE(va2.precionormalizado_1, co2.promobs)) * (100)::double precision) - (100)::double precision)) AS desvvar,
            va2.periodo,
            va2.producto
           FROM (cvp.relpre_1 va2
             LEFT JOIN cvp.calobs co2 ON ((((co2.periodo)::text = (va2.periodo_1)::text) AND (co2.calculo = 0) AND ((co2.producto)::text = (va2.producto)::text) AND (co2.informante = va2.informante) AND (co2.observacion = va2.observacion))))
          GROUP BY va2.periodo, va2.producto) avgvar ON ((((v.periodo)::text = (avgvar.periodo)::text) AND ((v.producto)::text = (avgvar.producto)::text))))
     JOIN cvp.panel_promrotativo_mod avgprot ON ((((v.periodo)::text = (avgprot.periodo)::text) AND ((v.producto)::text = (avgprot.producto)::text))))
     JOIN cvp.parametros ON ((parametros.unicoregistro = true)))
     JOIN cvp.informantes i ON ((v.informante = i.informante)))
  WHERE (((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision) > (avgvar.promvar + (parametros.tamannodesvvar * avgvar.desvvar))) OR (((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision) IS DISTINCT FROM (0)::double precision) AND ((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision) < (avgvar.promvar - (parametros.tamannodesvvar * avgvar.desvvar)))) OR (v.precionormalizado > (avgprot.promrotativo + (parametros.tamannodesvpre * avgprot.desvprot))) OR (v.precionormalizado < (avgprot.promrotativo - (parametros.tamannodesvpre * avgprot.desvprot))))
  GROUP BY v.periodo, v.producto, f.nombreproducto, v.informante, i.tipoinformante, v.observacion, v.visita, vi.panel, vi.tarea, v.precionormalizado, v.tipoprecio, v.cambio, c2.impobs, v.precionormalizado_1, co.promobs, avgvar.promvar, avgvar.desvvar, avgprot.promrotativo, avgprot.desvprot, co.impobs
  ORDER BY v.periodo, v.producto, vi.panel, vi.tarea, v.informante;


--
-- Name: control_relev_telef; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_relev_telef AS
 SELECT r.periodo,
    r.panel,
    r.tarea,
    r.informante,
    i.nombreinformante,
    COALESCE((((((((i.nombrecalle)::text || ' '::text) || (i.altura)::text) || ' '::text) || (i.piso)::text) || ' '::text) || (i.departamento)::text), (i.direccion)::text) AS direccion,
    r.visita,
    (((((r.encuestador)::text || ':'::text) || (p.nombre)::text) || ' '::text) || (p.apellido)::text) AS encuestador,
    i.rubro,
    u.nombrerubro,
    string_agg((((r.formulario)::text || ':'::text) || (f.nombreformulario)::text), '; '::text) AS formularios
   FROM ((((cvp.relvis r
     LEFT JOIN cvp.formularios f ON ((r.formulario = f.formulario)))
     LEFT JOIN cvp.personal p ON (((r.encuestador)::text = (p.persona)::text)))
     LEFT JOIN cvp.informantes i ON ((r.informante = i.informante)))
     LEFT JOIN cvp.rubros u ON ((i.rubro = u.rubro)))
  WHERE ((u.telefonico)::text = 'S'::text)
  GROUP BY r.periodo, r.panel, r.tarea, r.informante, i.nombreinformante, COALESCE((((((((i.nombrecalle)::text || ' '::text) || (i.altura)::text) || ' '::text) || (i.piso)::text) || ' '::text) || (i.departamento)::text), (i.direccion)::text), r.visita, (((((r.encuestador)::text || ':'::text) || (p.nombre)::text) || ' '::text) || (p.apellido)::text), i.rubro, u.nombrerubro
  ORDER BY r.periodo, r.panel, r.tarea, r.informante;


--
-- Name: control_sinprecio; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_sinprecio AS
 SELECT p.periodo,
    p.informante,
    i.nombreinformante,
    i.tipoinformante,
    p.producto,
    o.nombreproducto,
    p.visita,
    p.observacion,
    v.panel,
    v.tarea,
    v.recepcionista
   FROM ((((((cvp.relpre p
     JOIN cvp.relpre p0 ON ((((p0.periodo)::text = cvp.moverperiodos((p.periodo)::text, '-1'::integer)) AND (p.informante = p0.informante) AND (p.visita = p0.visita) AND (p.observacion = p0.observacion) AND ((p.producto)::text = (p0.producto)::text) AND (((p0.tipoprecio)::text = 'S'::text) OR (p0.tipoprecio IS NULL)))))
     JOIN cvp.relpre p1 ON ((((p1.periodo)::text = cvp.moverperiodos((p.periodo)::text, '-2'::integer)) AND (p.informante = p1.informante) AND (p.visita = p1.visita) AND (p.observacion = p1.observacion) AND ((p.producto)::text = (p1.producto)::text) AND (((p1.tipoprecio)::text = 'S'::text) OR (p1.tipoprecio IS NULL)))))
     JOIN cvp.relpre p2 ON ((((p2.periodo)::text = cvp.moverperiodos((p.periodo)::text, '-3'::integer)) AND (p.informante = p2.informante) AND (p.visita = p2.visita) AND (p.observacion = p2.observacion) AND ((p.producto)::text = (p2.producto)::text) AND (((p2.tipoprecio)::text = 'S'::text) OR (p2.tipoprecio IS NULL)))))
     LEFT JOIN cvp.relvis v ON ((((p.periodo)::text = (v.periodo)::text) AND (p.informante = v.informante) AND (p.visita = v.visita) AND (p.formulario = v.formulario))))
     LEFT JOIN cvp.informantes i ON ((p.informante = i.informante)))
     LEFT JOIN cvp.productos o ON (((p.producto)::text = (o.producto)::text)))
  WHERE ((p.tipoprecio)::text = 'S'::text);


--
-- Name: control_sinvariacion; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_sinvariacion AS
 SELECT r.periodo,
    r.informante,
    i.nombreinformante,
    i.tipoinformante,
    r.producto,
    t.nombreproducto,
    r.visita,
    r.observacion,
    v.panel,
    v.tarea,
    v.recepcionista,
    r.precionormalizado,
    pre.cantprecios
   FROM (((((((((cvp.relpre r
     JOIN ( SELECT p_1.periodo,
            p_1.ano,
            p_1.mes,
            p_1.visita,
            p_1.ingresando,
            p_1.periodoanterior,
            p_1.fechageneracionperiodo,
            p_1.comentariosper,
            p_1.fechacalculoprereplote1,
            p_1.fechacalculoprereplote2,
            p_1.fecha_cierre_ingreso,
            p_1.cerraringresocampohastapanel,
            p_1.habilitado
           FROM (cvp.periodos p_1
             LEFT JOIN cvp.periodos p_sig ON (((p_sig.periodoanterior)::text = (p_1.periodo)::text)))
          WHERE (((p_1.ingresando)::text = 'S'::text) OR ((p_sig.ingresando)::text = 'S'::text))) p ON (((r.periodo)::text = (p.periodo)::text)))
     LEFT JOIN cvp.relvis v ON ((((r.periodo)::text = (v.periodo)::text) AND (r.informante = v.informante) AND (r.formulario = v.formulario) AND (r.visita = v.visita))))
     LEFT JOIN cvp.relpre r_1 ON ((((r_1.periodo)::text = cvp.moverperiodos((r.periodo)::text, '-1'::integer)) AND (r.informante = r_1.informante) AND (r.visita = r_1.visita) AND (r.observacion = r_1.observacion) AND ((r.producto)::text = (r_1.producto)::text))))
     LEFT JOIN cvp.relpre r_2 ON ((((r_2.periodo)::text = cvp.moverperiodos((r.periodo)::text, '-2'::integer)) AND (r.informante = r_2.informante) AND (r.visita = r_2.visita) AND (r.observacion = r_2.observacion) AND ((r.producto)::text = (r_2.producto)::text))))
     LEFT JOIN cvp.relpre r_3 ON ((((r_3.periodo)::text = cvp.moverperiodos((r.periodo)::text, '-3'::integer)) AND (r.informante = r_3.informante) AND (r.visita = r_3.visita) AND (r.observacion = r_3.observacion) AND ((r.producto)::text = (r_3.producto)::text))))
     LEFT JOIN cvp.relpre r_4 ON ((((r_4.periodo)::text = cvp.moverperiodos((r.periodo)::text, '-4'::integer)) AND (r.informante = r_4.informante) AND (r.visita = r_4.visita) AND (r.observacion = r_4.observacion) AND ((r.producto)::text = (r_4.producto)::text))))
     LEFT JOIN cvp.relpre r_5 ON ((((r_5.periodo)::text = cvp.moverperiodos((r.periodo)::text, '-5'::integer)) AND (r.informante = r_5.informante) AND (r.visita = r_5.visita) AND (r.observacion = r_5.observacion) AND ((r.producto)::text = (r_5.producto)::text))))
     LEFT JOIN cvp.informantes i ON ((r.informante = i.informante)))
     LEFT JOIN cvp.productos t ON (((r.producto)::text = (t.producto)::text))),
    LATERAL ( SELECT count(*) AS cantprecios
           FROM cvp.relpre
          WHERE ((relpre.informante = r.informante) AND ((relpre.producto)::text = (r.producto)::text) AND (relpre.visita = r.visita) AND (relpre.observacion = r.observacion) AND (relpre.precionormalizado = r.precionormalizado))) pre
  WHERE ((r.precionormalizado > (0)::double precision) AND (r_1.precionormalizado > (0)::double precision) AND (r_2.precionormalizado > (0)::double precision) AND (r_3.precionormalizado > (0)::double precision) AND (r_4.precionormalizado > (0)::double precision) AND (r_5.precionormalizado > (0)::double precision) AND (r.precionormalizado = r_1.precionormalizado) AND (r_1.precionormalizado = r_2.precionormalizado) AND (r_2.precionormalizado = r_3.precionormalizado) AND (r_3.precionormalizado = r_4.precionormalizado) AND (r_4.precionormalizado = r_5.precionormalizado));


--
-- Name: perfiltro; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.perfiltro AS
 SELECT p.periodo
   FROM cvp.periodos p
  ORDER BY p.periodo DESC
 LIMIT 26;


--
-- Name: control_tipoprecio; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.control_tipoprecio AS
 SELECT p.periodo,
    p.producto,
    o.nombreproducto,
    i.tipoinformante,
    i.rubro,
    r.nombrerubro,
    p.tipoprecio,
    t.nombretipoprecio,
    (count(*))::integer AS cantidad
   FROM (((((( SELECT x.periodo,
            x.informante,
            x.formulario,
            x.panel,
            x.tarea,
            x.fechasalida,
            x.fechaingreso,
            x.ingresador,
            x.razon,
            x.fechageneracion,
            x.visita,
            x.ultimavisita,
            x.modi_usu,
            x.modi_fec,
            x.modi_ope,
            x.comentarios,
            x.encuestador,
            x.supervisor,
            x.recepcionista,
            x.informantereemplazante,
            x.ultima_visita,
            x.verificado_rec
           FROM (cvp.perfiltro p_1
             LEFT JOIN cvp.relvis x ON (((p_1.periodo)::text = (x.periodo)::text)))
          WHERE (x.razon = 1)) v
     LEFT JOIN cvp.relpre p ON ((((v.periodo)::text = (p.periodo)::text) AND (v.informante = p.informante) AND (v.formulario = p.formulario) AND (v.visita = p.visita))))
     LEFT JOIN cvp.informantes i ON ((v.informante = i.informante)))
     LEFT JOIN cvp.rubros r ON ((i.rubro = r.rubro)))
     LEFT JOIN cvp.productos o ON (((p.producto)::text = (o.producto)::text)))
     LEFT JOIN cvp.tipopre t ON (((p.tipoprecio)::text = (t.tipoprecio)::text)))
  WHERE (v.razon = 1)
  GROUP BY p.periodo, p.producto, o.nombreproducto, i.tipoinformante, i.rubro, r.nombrerubro, p.tipoprecio, t.nombretipoprecio
  ORDER BY p.periodo, p.producto, i.tipoinformante, i.rubro, p.tipoprecio;


--
-- Name: controlvigencias; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.controlvigencias AS
 SELECT f.periodo,
    f.informante,
    f.producto,
    f.nombreproducto,
    f.observacion,
    f.valor,
    f.cantdias,
    f.ultimodiadelmes,
    f.visitas,
    f.vigencias,
    f.comentarios
   FROM ( SELECT a.periodo,
            a.informante,
            a.producto,
            u.nombreproducto,
            a.observacion,
            d.valor,
            COALESCE(comun.cuantos_dias_mes((a.periodo)::text, (d.valor)::text), 0) AS cantdias,
            date_part('day'::text, (((((substr(cvp.moverperiodos((a.periodo)::text, 1), 2, 4) || '-'::text) || substr(cvp.moverperiodos((a.periodo)::text, 1), 7, 2)) || '-01'::text))::date - '1 day'::interval)) AS ultimodiadelmes,
            (count(DISTINCT a.visita))::integer AS visitas,
            (sum((a.valor)::numeric))::integer AS vigencias,
            string_agg(((COALESCE(p.comentariosrelpre, ' '::text) || ' '::text) || COALESCE(p.observaciones, ' '::text)), ' '::text) AS comentarios
           FROM (((((cvp.relvis r
             LEFT JOIN cvp.relpre p ON ((((r.periodo)::text = (p.periodo)::text) AND (r.informante = p.informante) AND (r.visita = p.visita) AND (r.formulario = p.formulario))))
             LEFT JOIN cvp.relatr a ON ((((p.periodo)::text = (a.periodo)::text) AND ((p.producto)::text = (a.producto)::text) AND (p.observacion = a.observacion) AND (p.informante = a.informante) AND (p.visita = a.visita))))
             LEFT JOIN ( SELECT relatr.periodo,
                    relatr.producto,
                    relatr.observacion,
                    relatr.informante,
                    relatr.atributo,
                    relatr.valor,
                    relatr.visita,
                    relatr.modi_usu,
                    relatr.modi_fec,
                    relatr.modi_ope,
                    relatr.validar_con_valvalatr
                   FROM cvp.relatr
                  WHERE (relatr.atributo = 196)) d ON ((((a.periodo)::text = (d.periodo)::text) AND ((a.producto)::text = (d.producto)::text) AND (a.informante = d.informante) AND (a.observacion = d.observacion) AND (a.visita = d.visita))))
             LEFT JOIN cvp.atributos t ON ((a.atributo = t.atributo)))
             LEFT JOIN cvp.productos u ON (((a.producto)::text = (u.producto)::text)))
          WHERE (t.es_vigencia AND (r.razon = 1))
          GROUP BY a.periodo, a.informante, a.producto, u.nombreproducto, a.observacion, d.valor, COALESCE(comun.cuantos_dias_mes((a.periodo)::text, (d.valor)::text), 0), (date_part('day'::text, (((((substr(cvp.moverperiodos((a.periodo)::text, 1), 2, 4) || '-'::text) || substr(cvp.moverperiodos((a.periodo)::text, 1), 7, 2)) || '-01'::text))::date - '1 day'::interval)))
          ORDER BY a.periodo, a.informante, a.producto, u.nombreproducto, a.observacion) f
  WHERE (NOT (((f.visitas = 1) AND (f.vigencias = 1)) OR (f.ultimodiadelmes = (f.vigencias)::double precision) OR (f.cantdias = f.vigencias)));


--
-- Name: cuadros; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.cuadros (
    cuadro character varying(10) NOT NULL,
    descripcion character varying(200),
    funcion character varying(30),
    parametro1 character varying(100),
    periodo character varying(20),
    nivel integer,
    grupo character varying(9),
    agrupacion character varying(9),
    encabezado character varying(500),
    pie character varying(300),
    ponercodigos boolean,
    agrupacion2 character varying(9),
    hogares integer,
    pie1 character varying(300),
    cantdecimales integer,
    desde character varying(11),
    orden character varying(11),
    encabezado2 character varying(500),
    CONSTRAINT "texto invalido en descripcion de tabla cuadros" CHECK (comun.cadena_valida((descripcion)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en parametro1 de tabla cuadros" CHECK (comun.cadena_valida((parametro1)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en pie de tabla cuadros" CHECK (comun.cadena_valida((pie)::text, 'amplio'::text))
);


--
-- Name: cuadros_funciones; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.cuadros_funciones (
    funcion character varying(30) NOT NULL,
    usa_parametro1 boolean,
    usa_periodo boolean,
    usa_nivel boolean,
    usa_grupo boolean,
    usa_agrupacion boolean,
    usa_ponercodigos boolean,
    usa_agrupacion2 boolean,
    usa_cuadro boolean,
    usa_hogares boolean,
    usa_cantdecimales boolean,
    usa_desde boolean,
    usa_orden boolean
);


--
-- Name: cuagru; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.cuagru (
    cuadro character varying(10) NOT NULL,
    agrupacion character varying(9) NOT NULL,
    grupo character varying(9) NOT NULL,
    orden integer
);


--
-- Name: desvios; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.desvios AS
 SELECT co.periodo,
    co.calculo,
    co.producto,
    prod.nombreproducto,
    sqrt(sum((expr.frec_n * ((co.promobs - expr.prom_aritmetico_pond) ^ (2)::double precision)))) AS desvio
   FROM ((cvp.calobs co
     JOIN cvp.productos prod ON (((prod.producto)::text = (co.producto)::text)))
     JOIN ( SELECT f.periodo,
            f.calculo,
            f.producto,
            f.division,
            f.frec_n,
            pp.prom_aritmetico_pond
           FROM (( SELECT c.periodo,
                    c.calculo,
                    c.producto,
                    c.division,
                    (
                        CASE
                            WHEN ((c.division)::text = '0'::text) THEN (1)::double precision
                            ELSE d.ponderadordiv
                        END / (count(*))::double precision) AS frec_n
                   FROM ((cvp.calobs c
                     JOIN ( SELECT gru_grupos.grupo
                           FROM cvp.gru_grupos
                          WHERE (((gru_grupos.agrupacion)::text = 'C'::text) AND ((gru_grupos.grupo_padre)::text = ANY (ARRAY[('C1'::character varying)::text, ('C2'::character varying)::text])) AND ((gru_grupos.esproducto)::text = 'S'::text))) gg ON (((c.producto)::text = (gg.grupo)::text)))
                     LEFT JOIN cvp.caldiv d ON ((((c.periodo)::text = (d.periodo)::text) AND (c.calculo = d.calculo) AND ((c.division)::text = (d.division)::text) AND ((c.producto)::text = (d.producto)::text))))
                  WHERE ((c.calculo = 0) AND (c.antiguedadincluido > 0) AND (c.promobs <> (0)::double precision))
                  GROUP BY c.periodo, c.calculo, c.producto, c.division,
                        CASE
                            WHEN ((c.division)::text = '0'::text) THEN (1)::double precision
                            ELSE d.ponderadordiv
                        END
                  ORDER BY c.periodo, c.calculo, c.producto, c.division,
                        CASE
                            WHEN ((c.division)::text = '0'::text) THEN (1)::double precision
                            ELSE d.ponderadordiv
                        END) f
             JOIN ( SELECT p.periodo,
                    p.calculo,
                    p.producto,
                    sum((p.prom_aritmetico_pond_div * p.ponderadordiv)) AS prom_aritmetico_pond
                   FROM ( SELECT c.periodo,
                            c.calculo,
                            c.producto,
                            c.division,
                                CASE
                                    WHEN ((c.division)::text = '0'::text) THEN (1)::double precision
                                    ELSE d.ponderadordiv
                                END AS ponderadordiv,
                            avg(c.promobs) AS prom_aritmetico_pond_div
                           FROM ((cvp.calobs c
                             JOIN ( SELECT gru_grupos.grupo
                                   FROM cvp.gru_grupos
                                  WHERE (((gru_grupos.agrupacion)::text = 'C'::text) AND ((gru_grupos.grupo_padre)::text = ANY (ARRAY[('C1'::character varying)::text, ('C2'::character varying)::text])) AND ((gru_grupos.esproducto)::text = 'S'::text))) gg ON (((c.producto)::text = (gg.grupo)::text)))
                             LEFT JOIN cvp.caldiv d ON ((((c.periodo)::text = (d.periodo)::text) AND (c.calculo = d.calculo) AND ((c.division)::text = (d.division)::text) AND ((c.producto)::text = (d.producto)::text))))
                          WHERE ((c.calculo = 0) AND (c.antiguedadincluido > 0) AND (c.promobs <> (0)::double precision))
                          GROUP BY c.periodo, c.calculo, c.producto, c.division,
                                CASE
                                    WHEN ((c.division)::text = '0'::text) THEN (1)::double precision
                                    ELSE d.ponderadordiv
                                END
                          ORDER BY c.periodo, c.calculo, c.producto, c.division,
                                CASE
                                    WHEN ((c.division)::text = '0'::text) THEN (1)::double precision
                                    ELSE d.ponderadordiv
                                END) p
                  GROUP BY p.periodo, p.calculo, p.producto
                  ORDER BY p.periodo, p.calculo, p.producto) pp ON ((((f.periodo)::text = (pp.periodo)::text) AND (f.calculo = pp.calculo) AND ((f.producto)::text = (pp.producto)::text))))) expr ON ((((co.periodo)::text = (expr.periodo)::text) AND (co.calculo = expr.calculo) AND ((co.producto)::text = (expr.producto)::text) AND ((co.division)::text = (expr.division)::text))))
  WHERE ((co.antiguedadincluido > 0) AND (co.promobs <> (0)::double precision) AND ((prod.calculo_desvios)::text = 'N'::text))
  GROUP BY co.periodo, co.calculo, co.producto, prod.nombreproducto
UNION
 SELECT ca.periodo,
    ca.calculo,
    ca.producto,
    prod.nombreproducto,
    sqrt(sum(((f2.frec_n)::double precision * ((ca.promdiv - f2.prom_aritmetico) ^ (2)::double precision)))) AS desvio
   FROM ((cvp.caldiv ca
     JOIN cvp.productos prod ON (((prod.producto)::text = (ca.producto)::text)))
     JOIN ( SELECT caldiv.periodo,
            caldiv.calculo,
            caldiv.producto,
            ((1)::numeric / (count(*))::numeric) AS frec_n,
            avg(caldiv.promdiv) AS prom_aritmetico
           FROM cvp.caldiv
          WHERE ((caldiv.calculo = 0) AND (caldiv.profundidad = 1))
          GROUP BY caldiv.periodo, caldiv.calculo, caldiv.producto) f2 ON ((((ca.periodo)::text = (f2.periodo)::text) AND (ca.calculo = f2.calculo) AND ((ca.producto)::text = (f2.producto)::text))))
  WHERE (((prod.calculo_desvios)::text = 'E'::text) AND (ca.calculo = 0) AND (ca.profundidad = 1))
  GROUP BY ca.periodo, ca.calculo, ca.producto, prod.nombreproducto
  ORDER BY 1, 2, 3, 4;


--
-- Name: dicprodatr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.dicprodatr (
    producto character varying(8) NOT NULL,
    atributo integer NOT NULL,
    origen character varying(250) NOT NULL,
    destino character varying(250),
    observaciones character varying(500),
    CONSTRAINT "texto invalido en destino de tabla dicprodatr" CHECK (comun.cadena_valida((destino)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en observaciones de tabla dicprodatr" CHECK (comun.cadena_valida((observaciones)::text, 'amplio'::text))
);


--
-- Name: divisiones; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.divisiones (
    division character varying(1) NOT NULL,
    nombre_division character varying(60),
    incluye_supermercados boolean NOT NULL,
    incluye_tradicionales boolean NOT NULL,
    tipoinformante character varying(1),
    sindividir boolean,
    otradivision character varying(1),
    CONSTRAINT "La division sera igual a tipo de informante o sera sin dividir" CHECK (((NOT ((tipoinformante)::text IS DISTINCT FROM (division)::text)) OR ((tipoinformante IS NULL) AND (sindividir IS TRUE)))),
    CONSTRAINT divisiones_sindividir_check CHECK (sindividir),
    CONSTRAINT "la otra division es para los divididos y es otra" CHECK ((((otradivision)::text IS DISTINCT FROM (division)::text) OR sindividir)),
    CONSTRAINT "texto invalido en nombre_division de tabla divisiones" CHECK (comun.cadena_valida((nombre_division)::text, 'castellano'::text))
);


--
-- Name: especificaciones; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.especificaciones (
    producto character varying(8) NOT NULL,
    especificacion integer NOT NULL,
    nombreespecificacion character varying(4000),
    tamannonormal double precision,
    ponderadoresp double precision DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    envase character varying(80),
    excluir character varying(250),
    cantidad numeric,
    unidaddemedida character varying(20),
    pesovolumenporunidad double precision,
    destacada boolean DEFAULT false,
    mostrar_cant_um cvp.sino_dom DEFAULT 'S'::character varying,
    observaciones text,
    CONSTRAINT "texto invalido en envase de tabla especificaciones" CHECK (comun.cadena_valida((envase)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en excluir de tabla especificaciones" CHECK (comun.cadena_valida((excluir)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en nombreespecificacion de tabla especificacione" CHECK (comun.cadena_valida((nombreespecificacion)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en unidaddemedida de tabla especificaciones" CHECK (comun.cadena_valida((unidaddemedida)::text, 'extendido'::text))
);


--
-- Name: estadoinformantes; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.estadoinformantes AS
 SELECT periodos.periodo,
    informantes.informante,
    informantes.conjuntomuestral,
    cvp.estadoinformante((periodos.periodo)::text, informantes.informante) AS estadoinformante
   FROM cvp.periodos,
    cvp.informantes;


--
-- Name: forobs; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.forobs AS
 SELECT fp.formulario,
    fp.producto,
    generate_series.generate_series AS observacion,
    1 AS especificacion,
    fp.orden,
    fp.ordenimpresion,
        CASE
            WHEN (p.cantobs IS NULL) THEN 'S'::text
            ELSE 'N'::text
        END AS dependedeldespacho
   FROM cvp.forprod fp,
    cvp.productos p,
    generate_series(1, 100) generate_series(generate_series)
  WHERE (((fp.producto)::text = (p.producto)::text) AND (generate_series.generate_series <= COALESCE(p.cantobs, 2)));


--
-- Name: foresp; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.foresp AS
 SELECT forobs.formulario,
    forobs.producto,
    forobs.observacion AS especificacion,
    forobs.orden
   FROM cvp.forobs;


--
-- Name: forinf; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.forinf (
    formulario integer NOT NULL,
    informante integer NOT NULL,
    cantobs integer,
    generar boolean DEFAULT true,
    altamanualperiodo text
);


--
-- Name: formulariosimportados; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.formulariosimportados (
    ano integer NOT NULL,
    mes integer NOT NULL,
    razon integer NOT NULL,
    informante integer NOT NULL,
    producto character varying(8) NOT NULL,
    nombre character varying(250),
    observacion integer NOT NULL,
    atributo character varying(250) NOT NULL,
    valor character varying(250),
    CONSTRAINT "texto invalido en atributo de tabla formulariosimportados" CHECK (comun.cadena_valida((atributo)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en nombre de tabla formulariosimportados" CHECK (comun.cadena_valida((nombre)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en valor de tabla formulariosimportados" CHECK (comun.cadena_valida((valor)::text, 'amplio'::text))
);


--
-- Name: forobsinf; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.forobsinf AS
 SELECT fi.informante,
    fp.formulario,
    fp.producto,
    generate_series.generate_series AS observacion,
    1 AS especificacion,
    fp.orden,
    fp.ordenimpresion,
        CASE
            WHEN (p.cantobs IS NULL) THEN 'S'::text
            ELSE 'N'::text
        END AS dependedeldespacho
   FROM cvp.forinf fi,
    cvp.forprod fp,
    cvp.productos p,
    generate_series(1, 100) generate_series(generate_series)
  WHERE ((fi.formulario = fp.formulario) AND ((fp.producto)::text = (p.producto)::text) AND (generate_series.generate_series <= COALESCE(fi.cantobs, COALESCE(p.cantobs, 2))));


--
-- Name: freccambio_nivel0; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.freccambio_nivel0 AS
 SELECT DISTINCT cvp.devolver_mes_anio((x.periodo)::text) AS periodonombre,
    x.periodo,
    substr((x.grupo)::text, 1, 2) AS grupo,
    u.nombregrupo,
    x.estado,
    exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 2)), u.nombregrupo, x.estado)) AS promgeoobs,
    exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 2)), u.nombregrupo, x.estado)) AS promgeoobsant,
    round(((((exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 2)), u.nombregrupo, x.estado)) / exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 2)), u.nombregrupo, x.estado))) * (100)::double precision) - (100)::double precision))::numeric, 1) AS variacion,
    count(x.producto) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 2)), x.estado) AS cantobsporestado,
    count(substr((x.grupo)::text, 1, 2)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 2))) AS cantobsporgrupo,
    round((((count(x.producto) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 2)), x.estado))::numeric / (count(substr((x.grupo)::text, 1, 2)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 2))))::numeric) * (100)::numeric), 2) AS porcobs
   FROM (( SELECT o.periodo,
            g.grupo,
                CASE
                    WHEN (o.promobs < o1.promobs) THEN 'Bajó'::text
                    WHEN (o.promobs > o1.promobs) THEN 'Subió'::text
                    ELSE 'Igual'::text
                END AS estado,
            o.producto,
            p.nombreproducto,
            o.informante,
            o.observacion,
            o.division,
            o.promobs,
            o.impobs,
            o1.promobs AS promobsant,
            o1.impobs AS impobsant,
            count(o.producto) OVER (PARTITION BY o.periodo, o.producto) AS cantobs
           FROM (((((cvp.calobs o
             LEFT JOIN cvp.calculos c ON ((((o.periodo)::text = (c.periodo)::text) AND (o.calculo = c.calculo))))
             LEFT JOIN cvp.calobs o1 ON ((((o1.periodo)::text = (c.periodoanterior)::text) AND (o1.calculo = c.calculoanterior) AND ((o.producto)::text = (o1.producto)::text) AND (o.informante = o1.informante) AND (o.observacion = o1.observacion))))
             LEFT JOIN cvp.gru_grupos gg ON (((o.producto)::text = (gg.grupo)::text)))
             LEFT JOIN cvp.grupos g ON ((((gg.grupo_padre)::text = (g.grupo)::text) AND ((gg.agrupacion)::text = (g.agrupacion)::text))))
             LEFT JOIN cvp.productos p ON (((o.producto)::text = (p.producto)::text)))
          WHERE ((o.calculo = 0) AND ((g.agrupacion)::text = 'Z'::text) AND (g.nivel = 0) AND ((o.impobs)::text = 'R'::text) AND ((o1.impobs)::text = 'R'::text) AND ((g.grupo)::text <> ALL (ARRAY[('Z0411'::character varying)::text, ('Z0431'::character varying)::text, ('Z0432'::character varying)::text, ('Z0441'::character varying)::text, ('Z0442'::character varying)::text, ('Z0533'::character varying)::text, ('Z0551'::character varying)::text, ('Z0552'::character varying)::text, ('Z0562'::character varying)::text, ('Z0611'::character varying)::text, ('Z0621'::character varying)::text, ('Z0622'::character varying)::text, ('Z0623'::character varying)::text, ('Z0711'::character varying)::text, ('Z0721'::character varying)::text, ('Z0722'::character varying)::text, ('Z0723'::character varying)::text, ('Z0811'::character varying)::text, ('Z0821'::character varying)::text, ('Z0822'::character varying)::text, ('Z0831'::character varying)::text, ('Z0832'::character varying)::text, ('Z0833'::character varying)::text, ('Z0912'::character varying)::text, ('Z0914'::character varying)::text, ('Z0915'::character varying)::text, ('Z0923'::character varying)::text, ('Z0942'::character varying)::text, ('Z0951'::character varying)::text, ('Z1012'::character varying)::text, ('Z1121'::character varying)::text, ('Z1212'::character varying)::text, ('Z1261'::character varying)::text])))) x
     LEFT JOIN cvp.grupos u ON ((substr((x.grupo)::text, 1, 2) = (u.grupo)::text)))
  WHERE ((x.cantobs > 6) AND ((x.periodo)::text >= 'a2017m01'::text))
  ORDER BY x.periodo, (substr((x.grupo)::text, 1, 2)), u.nombregrupo, x.estado;


--
-- Name: freccambio_nivel1; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.freccambio_nivel1 AS
 SELECT DISTINCT cvp.devolver_mes_anio((x.periodo)::text) AS periodonombre,
    x.periodo,
    substr((x.grupo)::text, 1, 3) AS grupo,
    u.nombregrupo,
    x.estado,
    exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 3)), u.nombregrupo, x.estado)) AS promgeoobs,
    exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 3)), u.nombregrupo, x.estado)) AS promgeoobsant,
    round(((((exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 3)), u.nombregrupo, x.estado)) / exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 3)), u.nombregrupo, x.estado))) * (100)::double precision) - (100)::double precision))::numeric, 1) AS variacion,
    count(x.producto) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 3)), x.estado) AS cantobsporestado,
    count(substr((x.grupo)::text, 1, 3)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 3))) AS cantobsporgrupo,
    round((((count(x.producto) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 3)), x.estado))::numeric / (count(substr((x.grupo)::text, 1, 3)) OVER (PARTITION BY x.periodo, (substr((x.grupo)::text, 1, 3))))::numeric) * (100)::numeric), 2) AS porcobs
   FROM (( SELECT o.periodo,
            g.grupo,
                CASE
                    WHEN (o.promobs < o1.promobs) THEN 'Bajó'::text
                    WHEN (o.promobs > o1.promobs) THEN 'Subió'::text
                    ELSE 'Igual'::text
                END AS estado,
            o.producto,
            p.nombreproducto,
            o.informante,
            o.observacion,
            o.division,
            o.promobs,
            o.impobs,
            o1.promobs AS promobsant,
            o1.impobs AS impobsant,
            count(o.producto) OVER (PARTITION BY o.periodo, o.producto) AS cantobs
           FROM (((((cvp.calobs o
             LEFT JOIN cvp.calculos c ON ((((o.periodo)::text = (c.periodo)::text) AND (o.calculo = c.calculo))))
             LEFT JOIN cvp.calobs o1 ON ((((o1.periodo)::text = (c.periodoanterior)::text) AND (o1.calculo = c.calculoanterior) AND ((o.producto)::text = (o1.producto)::text) AND (o.informante = o1.informante) AND (o.observacion = o1.observacion))))
             LEFT JOIN cvp.gru_grupos gg ON (((o.producto)::text = (gg.grupo)::text)))
             LEFT JOIN cvp.grupos g ON ((((gg.grupo_padre)::text = (g.grupo)::text) AND ((gg.agrupacion)::text = (g.agrupacion)::text))))
             LEFT JOIN cvp.productos p ON (((o.producto)::text = (p.producto)::text)))
          WHERE ((o.calculo = 0) AND ((g.agrupacion)::text = 'Z'::text) AND (g.nivel = 3) AND ((o.impobs)::text = 'R'::text) AND ((o1.impobs)::text = 'R'::text) AND ((g.grupo)::text <> ALL (ARRAY[('Z0411'::character varying)::text, ('Z0431'::character varying)::text, ('Z0432'::character varying)::text, ('Z0441'::character varying)::text, ('Z0442'::character varying)::text, ('Z0533'::character varying)::text, ('Z0551'::character varying)::text, ('Z0552'::character varying)::text, ('Z0562'::character varying)::text, ('Z0611'::character varying)::text, ('Z0621'::character varying)::text, ('Z0622'::character varying)::text, ('Z0623'::character varying)::text, ('Z0711'::character varying)::text, ('Z0721'::character varying)::text, ('Z0722'::character varying)::text, ('Z0723'::character varying)::text, ('Z0811'::character varying)::text, ('Z0821'::character varying)::text, ('Z0822'::character varying)::text, ('Z0831'::character varying)::text, ('Z0832'::character varying)::text, ('Z0833'::character varying)::text, ('Z0912'::character varying)::text, ('Z0914'::character varying)::text, ('Z0915'::character varying)::text, ('Z0923'::character varying)::text, ('Z0942'::character varying)::text, ('Z0951'::character varying)::text, ('Z1012'::character varying)::text, ('Z1121'::character varying)::text, ('Z1212'::character varying)::text, ('Z1261'::character varying)::text])))) x
     LEFT JOIN cvp.grupos u ON ((substr((x.grupo)::text, 1, 3) = (u.grupo)::text)))
  WHERE ((x.cantobs > 6) AND ((x.periodo)::text >= 'a2017m01'::text))
  ORDER BY x.periodo, (substr((x.grupo)::text, 1, 3)), u.nombregrupo, x.estado;


--
-- Name: freccambio_nivel3; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.freccambio_nivel3 AS
 SELECT DISTINCT cvp.devolver_mes_anio((x.periodo)::text) AS periodonombre,
    x.periodo,
    x.grupo,
    x.nombregrupo,
    x.estado,
    exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) AS promgeoobs,
    exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) AS promgeoobsant,
    round(((((exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) / exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado))) * (100)::double precision) - (100)::double precision))::numeric, 1) AS variacion,
    count(x.producto) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado) AS cantobsporestado,
    count(x.grupo) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo) AS cantobsporgrupo,
    round((((count(x.producto) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado))::numeric / (count(x.grupo) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo))::numeric) * (100)::numeric), 2) AS porcobs
   FROM ( SELECT o.periodo,
            g.grupo,
            g.nombregrupo,
                CASE
                    WHEN (o.promobs < o1.promobs) THEN 'Bajó'::text
                    WHEN (o.promobs > o1.promobs) THEN 'Subió'::text
                    ELSE 'Igual'::text
                END AS estado,
            o.producto,
            p.nombreproducto,
            o.informante,
            o.observacion,
            o.division,
            o.promobs,
            o.impobs,
            o1.promobs AS promobsant,
            o1.impobs AS impobsant,
            count(o.producto) OVER (PARTITION BY o.periodo, o.producto) AS cantobs
           FROM (((((cvp.calobs o
             LEFT JOIN cvp.calculos c ON ((((o.periodo)::text = (c.periodo)::text) AND (o.calculo = c.calculo))))
             LEFT JOIN cvp.calobs o1 ON ((((o1.periodo)::text = (c.periodoanterior)::text) AND (o1.calculo = c.calculoanterior) AND ((o.producto)::text = (o1.producto)::text) AND (o.informante = o1.informante) AND (o.observacion = o1.observacion))))
             LEFT JOIN cvp.gru_grupos gg ON (((o.producto)::text = (gg.grupo)::text)))
             LEFT JOIN cvp.grupos g ON ((((gg.grupo_padre)::text = (g.grupo)::text) AND ((gg.agrupacion)::text = (g.agrupacion)::text))))
             LEFT JOIN cvp.productos p ON (((o.producto)::text = (p.producto)::text)))
          WHERE ((o.calculo = 0) AND ((g.agrupacion)::text = 'Z'::text) AND (g.nivel = 3) AND ((o.impobs)::text = 'R'::text) AND ((o1.impobs)::text = 'R'::text) AND ((g.grupo)::text <> ALL (ARRAY[('Z0411'::character varying)::text, ('Z0431'::character varying)::text, ('Z0432'::character varying)::text, ('Z0441'::character varying)::text, ('Z0442'::character varying)::text, ('Z0533'::character varying)::text, ('Z0551'::character varying)::text, ('Z0552'::character varying)::text, ('Z0562'::character varying)::text, ('Z0611'::character varying)::text, ('Z0621'::character varying)::text, ('Z0622'::character varying)::text, ('Z0623'::character varying)::text, ('Z0711'::character varying)::text, ('Z0721'::character varying)::text, ('Z0722'::character varying)::text, ('Z0723'::character varying)::text, ('Z0811'::character varying)::text, ('Z0821'::character varying)::text, ('Z0822'::character varying)::text, ('Z0831'::character varying)::text, ('Z0832'::character varying)::text, ('Z0833'::character varying)::text, ('Z0912'::character varying)::text, ('Z0914'::character varying)::text, ('Z0915'::character varying)::text, ('Z0923'::character varying)::text, ('Z0942'::character varying)::text, ('Z0951'::character varying)::text, ('Z1012'::character varying)::text, ('Z1121'::character varying)::text, ('Z1212'::character varying)::text, ('Z1261'::character varying)::text])))) x
  WHERE ((x.cantobs > 6) AND ((x.periodo)::text >= 'a2017m01'::text))
  ORDER BY x.periodo, x.grupo, x.nombregrupo, x.estado;


--
-- Name: freccambio_resto; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.freccambio_resto AS
 SELECT DISTINCT cvp.devolver_mes_anio((x.periodo)::text) AS periodonombre,
    x.periodo,
    x.grupo,
    x.nombregrupo,
    x.estado,
    exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) AS promgeoobs,
    exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) AS promgeoobsant,
    round(((((exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) / exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado))) * (100)::double precision) - (100)::double precision))::numeric, 1) AS variacion,
    count(x.producto) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado) AS cantobsporestado,
    count(x.grupo) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo) AS cantobsporgrupo,
    round((((count(x.producto) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado))::numeric / (count(x.grupo) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo))::numeric) * (100)::numeric), 2) AS porcobs
   FROM ( SELECT o.periodo,
            g.grupo,
            g.nombregrupo,
                CASE
                    WHEN (o.promobs < o1.promobs) THEN 'Bajó'::text
                    WHEN (o.promobs > o1.promobs) THEN 'Subió'::text
                    ELSE 'Igual'::text
                END AS estado,
            o.producto,
            p.nombreproducto,
            o.informante,
            o.observacion,
            o.division,
            o.promobs,
            o.impobs,
            o1.promobs AS promobsant,
            o1.impobs AS impobsant,
            count(o.producto) OVER (PARTITION BY o.periodo, o.producto) AS cantobs,
            gg.grupo_padre
           FROM ((((((cvp.calobs o
             LEFT JOIN cvp.calculos c ON ((((o.periodo)::text = (c.periodo)::text) AND (o.calculo = c.calculo))))
             LEFT JOIN cvp.calobs o1 ON ((((o1.periodo)::text = (c.periodoanterior)::text) AND (o1.calculo = c.calculoanterior) AND ((o.producto)::text = (o1.producto)::text) AND (o.informante = o1.informante) AND (o.observacion = o1.observacion))))
             LEFT JOIN cvp.productos p ON (((o.producto)::text = (p.producto)::text)))
             LEFT JOIN cvp.gru_grupos gu ON ((((gu.agrupacion)::text = 'R'::text) AND ((gu.esproducto)::text = 'S'::text) AND ((gu.grupo)::text = (o.producto)::text) AND (length((gu.grupo_padre)::text) = 2))))
             LEFT JOIN cvp.grupos g ON ((((gu.grupo_padre)::text = (g.grupo)::text) AND ((gu.agrupacion)::text = (g.agrupacion)::text))))
             LEFT JOIN cvp.gru_grupos gg ON ((((gg.agrupacion)::text = 'Z'::text) AND ((gg.esproducto)::text = 'S'::text) AND ((gg.grupo)::text = (o.producto)::text) AND (length((gg.grupo_padre)::text) = 5))))
          WHERE ((o.calculo = 0) AND ((g.grupo)::text = 'R3'::text) AND ((o.impobs)::text = 'R'::text) AND ((o1.impobs)::text = 'R'::text) AND ((gg.grupo_padre)::text <> ALL (ARRAY[('Z0411'::character varying)::text, ('Z0431'::character varying)::text, ('Z0432'::character varying)::text, ('Z0441'::character varying)::text, ('Z0442'::character varying)::text, ('Z0533'::character varying)::text, ('Z0551'::character varying)::text, ('Z0552'::character varying)::text, ('Z0562'::character varying)::text, ('Z0611'::character varying)::text, ('Z0621'::character varying)::text, ('Z0622'::character varying)::text, ('Z0623'::character varying)::text, ('Z0711'::character varying)::text, ('Z0721'::character varying)::text, ('Z0722'::character varying)::text, ('Z0723'::character varying)::text, ('Z0811'::character varying)::text, ('Z0821'::character varying)::text, ('Z0822'::character varying)::text, ('Z0831'::character varying)::text, ('Z0832'::character varying)::text, ('Z0833'::character varying)::text, ('Z0912'::character varying)::text, ('Z0914'::character varying)::text, ('Z0915'::character varying)::text, ('Z0923'::character varying)::text, ('Z0942'::character varying)::text, ('Z0951'::character varying)::text, ('Z1012'::character varying)::text, ('Z1121'::character varying)::text, ('Z1212'::character varying)::text, ('Z1261'::character varying)::text])))) x
  WHERE ((x.cantobs > 6) AND ((x.periodo)::text >= 'a2017m01'::text))
  ORDER BY x.periodo, x.grupo, x.nombregrupo, x.estado;


--
-- Name: freccambio_restorest; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.freccambio_restorest AS
 SELECT DISTINCT cvp.devolver_mes_anio((x.periodo)::text) AS periodonombre,
    x.periodo,
    x.grupo,
    x.nombregrupo,
    x.estado,
    exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) AS promgeoobs,
    exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) AS promgeoobsant,
    round(((((exp(avg(ln(x.promobs)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado)) / exp(avg(ln(x.promobsant)) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado))) * (100)::double precision) - (100)::double precision))::numeric, 1) AS variacion,
    count(x.producto) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado) AS cantobsporestado,
    count(x.grupo) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo) AS cantobsporgrupo,
    round((((count(x.producto) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo, x.estado))::numeric / (count(x.grupo) OVER (PARTITION BY x.periodo, x.grupo, x.nombregrupo))::numeric) * (100)::numeric), 2) AS porcobs
   FROM ( SELECT o.periodo,
            g.grupo,
            g.nombregrupo,
                CASE
                    WHEN (o.promobs < o1.promobs) THEN 'Bajó'::text
                    WHEN (o.promobs > o1.promobs) THEN 'Subió'::text
                    ELSE 'Igual'::text
                END AS estado,
            o.producto,
            p.nombreproducto,
            o.informante,
            o.observacion,
            o.division,
            o.promobs,
            o.impobs,
            o1.promobs AS promobsant,
            o1.impobs AS impobsant,
            count(o.producto) OVER (PARTITION BY o.periodo, o.producto) AS cantobs,
            gg.grupo_padre
           FROM ((((((cvp.calobs o
             LEFT JOIN cvp.calculos c ON ((((o.periodo)::text = (c.periodo)::text) AND (o.calculo = c.calculo))))
             LEFT JOIN cvp.calobs o1 ON ((((o1.periodo)::text = (c.periodoanterior)::text) AND (o1.calculo = c.calculoanterior) AND ((o.producto)::text = (o1.producto)::text) AND (o.informante = o1.informante) AND (o.observacion = o1.observacion))))
             LEFT JOIN cvp.productos p ON (((o.producto)::text = (p.producto)::text)))
             LEFT JOIN cvp.gru_grupos gu ON ((((gu.agrupacion)::text = 'R'::text) AND ((gu.esproducto)::text = 'S'::text) AND ((gu.grupo)::text = (o.producto)::text) AND (length((gu.grupo_padre)::text) = 2))))
             LEFT JOIN cvp.grupos g ON ((((gu.grupo_padre)::text = (g.grupo)::text) AND ((gu.agrupacion)::text = (g.agrupacion)::text))))
             LEFT JOIN cvp.gru_grupos gg ON ((((gg.agrupacion)::text = 'Z'::text) AND ((gg.esproducto)::text = 'S'::text) AND ((gg.grupo)::text = (o.producto)::text) AND (length((gg.grupo_padre)::text) = 5))))
          WHERE ((o.calculo = 0) AND ((g.grupo)::text = 'R3'::text) AND ((o.impobs)::text = 'R'::text) AND ((o1.impobs)::text = 'R'::text) AND ((gg.grupo_padre)::text <> ALL (ARRAY[('Z0411'::character varying)::text, ('Z0431'::character varying)::text, ('Z0432'::character varying)::text, ('Z0441'::character varying)::text, ('Z0442'::character varying)::text, ('Z0533'::character varying)::text, ('Z0551'::character varying)::text, ('Z0552'::character varying)::text, ('Z0562'::character varying)::text, ('Z0611'::character varying)::text, ('Z0621'::character varying)::text, ('Z0622'::character varying)::text, ('Z0623'::character varying)::text, ('Z0711'::character varying)::text, ('Z0721'::character varying)::text, ('Z0722'::character varying)::text, ('Z0723'::character varying)::text, ('Z0811'::character varying)::text, ('Z0821'::character varying)::text, ('Z0822'::character varying)::text, ('Z0831'::character varying)::text, ('Z0832'::character varying)::text, ('Z0833'::character varying)::text, ('Z0912'::character varying)::text, ('Z0914'::character varying)::text, ('Z0915'::character varying)::text, ('Z0923'::character varying)::text, ('Z0942'::character varying)::text, ('Z0951'::character varying)::text, ('Z1012'::character varying)::text, ('Z1121'::character varying)::text, ('Z1212'::character varying)::text, ('Z1261'::character varying)::text, ('Z0631'::character varying)::text, ('Z1011'::character varying)::text])))) x
  WHERE ((x.cantobs > 6) AND ((x.periodo)::text >= 'a2017m01'::text))
  ORDER BY x.periodo, x.grupo, x.nombregrupo, x.estado;


--
-- Name: hdrexportar; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.hdrexportar AS
 SELECT c.periodo,
    c.panel,
    c.tarea,
    c.fechasalida,
    c.informante,
    i.tipoinformante AS ti,
    c.encuestador,
    c.nombreencuestador,
    c.recepcionista,
    c.nombrerecepcionista,
    c.ingresador,
    c.nombreingresador,
    c.supervisor,
    c.nombresupervisor,
        CASE
            WHEN (min(c.razon) <> max(c.razon)) THEN ((min(c.razon) || '~'::text) || max(c.razon))
            ELSE COALESCE((min(c.razon) || ''::text), NULL::text)
        END AS razon,
    c.visita,
    c.nombreinformante,
    c.direccion,
    string_agg((((c.formulario)::text || ':'::text) || (c.nombreformulario)::text), '|'::text) AS formularios,
    (((COALESCE(i.contacto, ''::character varying))::text || ' '::text) || (COALESCE(i.telcontacto, ''::character varying))::text) AS contacto,
    c.conjuntomuestral,
    c.ordenhdr,
    i.distrito,
    i.fraccion,
    i.rubro,
    r.nombrerubro,
    a.maxperiodoinformado,
    a.minperiodoinformado
   FROM (((cvp.control_hojas_ruta c
     LEFT JOIN cvp.informantes i ON ((c.informante = i.informante)))
     LEFT JOIN cvp.rubros r ON ((i.rubro = r.rubro)))
     LEFT JOIN ( SELECT control_hojas_ruta.informante,
            control_hojas_ruta.visita,
            max((control_hojas_ruta.periodo)::text) AS maxperiodoinformado,
            min((control_hojas_ruta.periodo)::text) AS minperiodoinformado
           FROM cvp.control_hojas_ruta
          WHERE (control_hojas_ruta.razon = 1)
          GROUP BY control_hojas_ruta.informante, control_hojas_ruta.visita) a ON (((c.informante = a.informante) AND (c.visita = a.visita))))
  GROUP BY c.periodo, c.panel, c.tarea, c.fechasalida, c.informante, i.tipoinformante, c.encuestador, c.nombreencuestador, c.recepcionista, c.nombrerecepcionista, c.ingresador, c.nombreingresador, c.supervisor, c.nombresupervisor, c.visita, c.nombreinformante, c.direccion, (((COALESCE(i.contacto, ''::character varying))::text || ' '::text) || (COALESCE(i.telcontacto, ''::character varying))::text), c.conjuntomuestral, c.ordenhdr, i.distrito, i.fraccion, i.rubro, r.nombrerubro, a.maxperiodoinformado, a.minperiodoinformado;


--
-- Name: hdrexportarcierretemporal; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.hdrexportarcierretemporal AS
 SELECT c.periodo,
    c.panel,
    c.tarea,
    c.fechasalida,
    c.informante,
    c.encuestador,
    c.nombreencuestador,
    c.recepcionista,
    c.nombrerecepcionista,
        CASE
            WHEN (min(c.razon) <> max(c.razon)) THEN ((min(c.razon) || '~'::text) || max(c.razon))
            ELSE COALESCE((min(c.razon) || ''::text), ''::text)
        END AS razon,
    c.visita,
    c.nombreinformante,
    c.direccion,
    string_agg((((c.formulario)::text || ':'::text) || (c.nombreformulario)::text), '|'::text) AS formularios,
    (((COALESCE(i.contacto, ''::character varying))::text || ' '::text) || (COALESCE(i.telcontacto, ''::character varying))::text) AS contacto,
    c.conjuntomuestral,
    c.ordenhdr,
    i.distrito,
    i.fraccion,
    i.rubro,
    r.nombrerubro,
    a.maxperiodoinformado
   FROM (((cvp.control_hojas_ruta c
     LEFT JOIN cvp.informantes i ON ((c.informante = i.informante)))
     LEFT JOIN cvp.rubros r ON ((i.rubro = r.rubro)))
     LEFT JOIN ( SELECT control_hojas_ruta.informante,
            control_hojas_ruta.visita,
            max((control_hojas_ruta.periodo)::text) AS maxperiodoinformado
           FROM cvp.control_hojas_ruta
          WHERE (control_hojas_ruta.razon = 1)
          GROUP BY control_hojas_ruta.informante, control_hojas_ruta.visita) a ON (((c.informante = a.informante) AND (c.visita = a.visita))))
  WHERE (c.razon = ANY (ARRAY[5, 6, 12]))
  GROUP BY c.periodo, c.panel, c.tarea, c.fechasalida, c.informante, c.encuestador, c.nombreencuestador, c.recepcionista, c.nombrerecepcionista, c.visita, c.nombreinformante, c.direccion, (((COALESCE(i.contacto, ''::character varying))::text || ' '::text) || (COALESCE(i.telcontacto, ''::character varying))::text), c.conjuntomuestral, c.ordenhdr, i.distrito, i.fraccion, i.rubro, r.nombrerubro, a.maxperiodoinformado;


--
-- Name: hdrexportarefectivossinprecio; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.hdrexportarefectivossinprecio AS
 SELECT c.periodo,
    c.panel,
    c.tarea,
    c.fechasalida,
    c.informante,
    c.encuestador,
    c.nombreencuestador,
    c.recepcionista,
    c.nombrerecepcionista,
    c.razon,
    c.visita,
    c.nombreinformante,
    c.direccion,
    c.formulario,
    c.nombreformulario,
    (((COALESCE(i.contacto, ''::character varying))::text || ' '::text) || (COALESCE(i.telcontacto, ''::character varying))::text) AS contacto,
    c.conjuntomuestral,
    c.ordenhdr,
    i.distrito,
    i.fraccion,
    i.rubro,
    r.nombrerubro,
    a.maxperiodoinformado,
    p.tipoprecios
   FROM ((((( SELECT control_hojas_ruta.periodo,
            control_hojas_ruta.panel,
            control_hojas_ruta.tarea,
            control_hojas_ruta.fechasalida,
            control_hojas_ruta.informante,
            control_hojas_ruta.encuestador,
            control_hojas_ruta.nombreencuestador,
            control_hojas_ruta.recepcionista,
            control_hojas_ruta.nombrerecepcionista,
            control_hojas_ruta.ingresador,
            control_hojas_ruta.nombreingresador,
            control_hojas_ruta.supervisor,
            control_hojas_ruta.nombresupervisor,
            control_hojas_ruta.formulario,
            control_hojas_ruta.nombreformulario,
            control_hojas_ruta.operativo,
            control_hojas_ruta.razon,
            control_hojas_ruta.razonanterior,
            control_hojas_ruta.visita,
            control_hojas_ruta.nombreinformante,
            control_hojas_ruta.direccion,
            control_hojas_ruta.conjuntomuestral,
            control_hojas_ruta.ordenhdr
           FROM cvp.control_hojas_ruta
          WHERE (control_hojas_ruta.razon = 1)) c
     JOIN ( SELECT relpre.periodo,
            relpre.informante,
            relpre.visita,
            relpre.formulario,
                CASE
                    WHEN ((min(relpre.precio) IS NULL) AND (max(relpre.precio) IS NULL)) THEN 'NO HAY PRECIO'::text
                    ELSE 'HAY PRECIO'::text
                END AS infoprecios,
            string_agg(DISTINCT (COALESCE(relpre.tipoprecio, 'Sin Valor'::character varying))::text, ';'::text) AS tipoprecios
           FROM cvp.relpre
          GROUP BY relpre.periodo, relpre.informante, relpre.visita, relpre.formulario) p ON ((((c.periodo)::text = (p.periodo)::text) AND (c.informante = p.informante) AND (c.visita = p.visita) AND (c.formulario = p.formulario))))
     LEFT JOIN cvp.informantes i ON ((c.informante = i.informante)))
     LEFT JOIN cvp.rubros r ON ((i.rubro = r.rubro)))
     LEFT JOIN ( SELECT control_hojas_ruta.informante,
            control_hojas_ruta.visita,
            max((control_hojas_ruta.periodo)::text) AS maxperiodoinformado
           FROM cvp.control_hojas_ruta
          WHERE (control_hojas_ruta.razon = 1)
          GROUP BY control_hojas_ruta.informante, control_hojas_ruta.visita) a ON (((c.informante = a.informante) AND (c.visita = a.visita))))
  WHERE (p.infoprecios = 'NO HAY PRECIO'::text);


--
-- Name: tareas; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.tareas (
    tarea integer NOT NULL,
    encuestador character varying(10),
    activa cvp.sino_dom DEFAULT 'S'::character varying,
    periodobaja character varying(11),
    operativo character varying(1),
    recepcionista character varying(10)
);


--
-- Name: hdrexportarteorica; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.hdrexportarteorica AS
 SELECT c.periodo,
    c.panel,
    c.tarea,
    c.informante,
    i.tipoinformante AS ti,
    (((((t.encuestador)::text || ':'::text) || (p.nombre)::text) || ' '::text) || (p.apellido)::text) AS encuestador,
    COALESCE(string_agg(DISTINCT (((c.encuestador)::text || ':'::text) || c.nombreencuestador), '|'::text), NULL::text) AS encuestadores,
    COALESCE(string_agg(DISTINCT (((c.recepcionista)::text || ':'::text) || c.nombrerecepcionista), '|'::text), NULL::text) AS recepcionistas,
    COALESCE(string_agg(DISTINCT (((c.ingresador)::text || ':'::text) || c.nombreingresador), '|'::text), NULL::text) AS ingresadores,
    COALESCE(string_agg(DISTINCT (((c.supervisor)::text || ':'::text) || c.nombresupervisor), '|'::text), NULL::text) AS supervisores,
        CASE
            WHEN (min(c.razon) <> max(c.razon)) THEN ((min(c.razon) || '~'::text) || max(c.razon))
            ELSE COALESCE((min(c.razon) || ''::text), NULL::text)
        END AS razon,
    string_agg((((c.formulario)::text || ' '::text) || (c.nombreformulario)::text), chr(10) ORDER BY c.formulario) AS formularioshdr,
    lpad(' '::text, (count(*))::integer, chr(10)) AS espacio,
    c.visita,
    c.nombreinformante,
    c.direccion,
    string_agg((((c.formulario)::text || ':'::text) || (c.nombreformulario)::text), '|'::text) AS formularios,
    (((COALESCE(i.contacto, ''::character varying))::text || ' '::text) || (COALESCE(i.telcontacto, ''::character varying))::text) AS contacto,
    c.conjuntomuestral,
    c.ordenhdr,
    i.distrito,
    i.fraccion,
    i.rubro,
    r.nombrerubro,
    a.maxperiodoinformado,
    a.minperiodoinformado,
    c.fechasalida
   FROM (((((cvp.control_hojas_ruta c
     LEFT JOIN cvp.tareas t ON ((c.tarea = t.tarea)))
     LEFT JOIN cvp.personal p ON (((p.persona)::text = (t.encuestador)::text)))
     LEFT JOIN cvp.informantes i ON ((c.informante = i.informante)))
     LEFT JOIN cvp.rubros r ON ((i.rubro = r.rubro)))
     LEFT JOIN ( SELECT control_hojas_ruta.informante,
            control_hojas_ruta.visita,
            max((control_hojas_ruta.periodo)::text) AS maxperiodoinformado,
            min((control_hojas_ruta.periodo)::text) AS minperiodoinformado
           FROM cvp.control_hojas_ruta
          WHERE (control_hojas_ruta.razon = 1)
          GROUP BY control_hojas_ruta.informante, control_hojas_ruta.visita) a ON (((c.informante = a.informante) AND (c.visita = a.visita))))
  GROUP BY c.periodo, c.panel, c.tarea, c.informante, i.tipoinformante, (((((t.encuestador)::text || ':'::text) || (p.nombre)::text) || ' '::text) || (p.apellido)::text), c.visita, c.nombreinformante, c.direccion, (((COALESCE(i.contacto, ''::character varying))::text || ' '::text) || (COALESCE(i.telcontacto, ''::character varying))::text), c.conjuntomuestral, c.ordenhdr, i.distrito, i.fraccion, i.rubro, r.nombrerubro, a.maxperiodoinformado, a.minperiodoinformado, c.fechasalida;


--
-- Name: hogares; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.hogares (
    hogar character varying(9) NOT NULL,
    nombrehogar character varying(300) NOT NULL,
    CONSTRAINT "texto invalido en hogar de tabla hogares" CHECK (comun.cadena_valida((hogar)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en nombrehogar de tabla hogares" CHECK (comun.cadena_valida((nombrehogar)::text, 'amplio'::text))
);


--
-- Name: hojaderuta; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.hojaderuta AS
 SELECT v.periodo,
    v.panel,
    v.tarea,
    v.fechasalida,
    v.informante,
    i.tipoinformante,
    v.encuestador,
    (COALESCE(((p.nombre)::text || ' '::text), ''::text) || (COALESCE(p.apellido, ''::character varying))::text) AS nombreencuestador,
    (
        CASE
            WHEN (min(v.razon) <> max(v.razon)) THEN ((min(v.razon) || '~'::text) || max(v.razon))
            ELSE COALESCE((min(v.razon) || ''::text), ''::text)
        END || lpad(' '::text, (count(*))::integer, chr(10))) AS razon,
    v.visita,
    i.nombreinformante,
    i.direccion,
    cvp.formularioshdr((v.periodo)::text, v.informante, v.visita, v.fechasalida, (v.encuestador)::text) AS formularios,
    lpad(' '::text, (count(*))::integer, chr(10)) AS espacio,
    (((COALESCE(i.contacto, ''::character varying))::text || chr(10)) || (COALESCE(i.telcontacto, ''::character varying))::text) AS contacto,
    i.conjuntomuestral,
    i.ordenhdr,
    a.maxperiodoinformado,
    a.minperiodoinformado
   FROM (((cvp.relvis v
     JOIN cvp.informantes i ON ((v.informante = i.informante)))
     LEFT JOIN cvp.personal p ON (((v.encuestador)::text = (p.persona)::text)))
     LEFT JOIN ( SELECT control_hojas_ruta.informante,
            control_hojas_ruta.visita,
            max((control_hojas_ruta.periodo)::text) AS maxperiodoinformado,
            min((control_hojas_ruta.periodo)::text) AS minperiodoinformado
           FROM cvp.control_hojas_ruta
          WHERE (control_hojas_ruta.razon = 1)
          GROUP BY control_hojas_ruta.informante, control_hojas_ruta.visita) a ON (((v.informante = a.informante) AND (v.visita = a.visita))))
  GROUP BY v.periodo, v.panel, v.tarea, v.fechasalida, v.informante, i.tipoinformante, v.encuestador, v.visita, (COALESCE(((p.nombre)::text || ' '::text), ''::text) || (COALESCE(p.apellido, ''::character varying))::text), (((COALESCE(i.contacto, ''::character varying))::text || chr(10)) || (COALESCE(i.telcontacto, ''::character varying))::text), i.nombreinformante, i.direccion, i.conjuntomuestral, i.ordenhdr, a.maxperiodoinformado, a.minperiodoinformado;


--
-- Name: reltar; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.reltar (
    periodo character varying(11) NOT NULL,
    panel integer NOT NULL,
    tarea integer NOT NULL,
    supervisor character varying(10),
    encuestador character varying(10),
    realizada cvp.sino_dom,
    resultado text,
    observaciones text,
    puntos integer,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    cargado timestamp without time zone,
    descargado timestamp without time zone,
    vencimiento_sincronizacion timestamp without time zone,
    id_instalacion integer,
    CONSTRAINT "texto invalido en observaciones de tabla reltar" CHECK (comun.cadena_valida(observaciones, 'castellano'::text)),
    CONSTRAINT "texto invalido en resultado de tabla reltar" CHECK (comun.cadena_valida(resultado, 'castellano'::text))
);


--
-- Name: hojaderutasupervisor; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.hojaderutasupervisor AS
 SELECT p.persona AS supervisor,
    (((p.nombre)::text || ' '::text) || (p.apellido)::text) AS nombresupervisor,
    h.periodo,
    h.panel,
    h.tarea,
    h.fechasalida,
    h.informante,
    h.tipoinformante,
    h.encuestador,
    h.nombreencuestador,
    h.razon,
    h.visita,
    h.nombreinformante,
    h.direccion,
    h.formularios,
    h.espacio,
    h.contacto,
    h.conjuntomuestral,
    h.ordenhdr,
    h.maxperiodoinformado,
    h.minperiodoinformado
   FROM cvp.reltar r,
    cvp.hojaderuta h,
    cvp.personal p
  WHERE (((r.periodo)::text = (h.periodo)::text) AND (r.panel = h.panel) AND (r.tarea = h.tarea) AND ((r.encuestador)::text = (h.encuestador)::text) AND (r.supervisor IS NOT NULL) AND ((r.supervisor)::text = (p.persona)::text));


--
-- Name: infoextprod; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.infoextprod (
    producto character varying(8) NOT NULL,
    ponderacion double precision,
    sigueexterno cvp.sino_dom,
    cantporunidcons double precision
);


--
-- Name: infoextvalor; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.infoextvalor (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    promedioext double precision,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    CONSTRAINT "PromedioExt en InfoExt >0" CHECK ((promedioext > (0)::double precision))
);


--
-- Name: informantesaltasbajas; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.informantesaltasbajas AS
 SELECT x.periodoanterior,
    x.informante,
    x.visita,
    x.rubro,
    x.nombrerubro,
    x.formulario,
    x.nombreformulario,
    x.panelanterior,
    x.tareaanterior,
    x.razonanterior,
    x.nombrerazonanterior,
    x.periodo,
    x.panel,
    x.tarea,
    x.razon,
    x.nombrerazon,
    x.tipo,
    x.distrito,
    x.fraccion,
    ca.cantformactivos
   FROM (( SELECT r_1.periodo AS periodoanterior,
            r_1.informante AS informanteanterior,
            i.rubro,
            ru.nombrerubro,
            r_1.formulario AS formularioanterior,
            f.nombreformulario,
            r_1.visita AS visitaanterior,
            r_1.panel AS panelanterior,
            r_1.tarea AS tareaanterior,
            r_1.razon AS razonanterior,
            zr_1.nombrerazon AS nombrerazonanterior,
            r.periodo,
            r.informante,
            r.formulario,
            r.visita,
            r.panel,
            r.tarea,
            r.razon,
            zr.nombrerazon,
                CASE
                    WHEN ((r_1.periodo IS NULL) AND (r.periodo IS NOT NULL) AND (((zr.escierredefinitivoinf)::text = 'S'::text) OR ((zr.escierredefinitivofor)::text = 'S'::text))) THEN ('Alta-Baja en '::text || (r.periodo)::text)
                    WHEN (((zr.escierredefinitivoinf)::text = 'S'::text) OR ((zr.escierredefinitivofor)::text = 'S'::text)) THEN ('Baja en '::text || (r.periodo)::text)
                    WHEN ((r_1.periodo IS NULL) AND (r.periodo IS NOT NULL)) THEN 'Alta'::text
                    WHEN (((zr_1.escierredefinitivoinf)::text = 'S'::text) OR ((zr_1.escierredefinitivofor)::text = 'S'::text)) THEN ('Baja en '::text || (r_1.periodo)::text)
                    WHEN (r_1.razon IS NULL) THEN ('No ingresado '::text || (r_1.periodo)::text)
                    WHEN (r.razon IS NULL) THEN ('No ingresado '::text || (r.periodo)::text)
                    ELSE 'Continuo'::text
                END AS tipo,
            i.distrito,
            i.fraccion
           FROM (((((((cvp.relvis r
             LEFT JOIN cvp.periodos p ON (((p.periodo)::text = (r.periodo)::text)))
             LEFT JOIN cvp.relvis r_1 ON ((((r_1.periodo)::text = (p.periodoanterior)::text) AND (r.informante = r_1.informante) AND (r.formulario = r_1.formulario) AND (r.visita = r_1.visita))))
             LEFT JOIN cvp.razones zr ON ((r.razon = zr.razon)))
             LEFT JOIN cvp.razones zr_1 ON ((r_1.razon = zr_1.razon)))
             LEFT JOIN cvp.informantes i ON ((r.informante = i.informante)))
             LEFT JOIN cvp.rubros ru ON ((i.rubro = ru.rubro)))
             LEFT JOIN cvp.formularios f ON ((r_1.formulario = f.formulario)))
        UNION
         SELECT r_1.periodo AS periodoanterior,
            r_1.informante AS informanteanterior,
            i.rubro,
            ru.nombrerubro,
            r_1.formulario AS formularioanterior,
            f.nombreformulario,
            r_1.visita AS visitaanterior,
            r_1.panel AS panelanterior,
            r_1.tarea AS tareaanterior,
            r_1.razon AS razonanterior,
            zr_1.nombrerazon AS nombrerazonanterior,
            r.periodo,
            r.informante,
            r.formulario,
            r.visita,
            r.panel,
            r.tarea,
            r.razon,
            zr.nombrerazon,
                CASE
                    WHEN (((zr.escierredefinitivoinf)::text = 'S'::text) OR ((zr.escierredefinitivofor)::text = 'S'::text)) THEN ('Baja en '::text || (r.periodo)::text)
                    WHEN ((r_1.periodo IS NULL) AND (r.periodo IS NOT NULL)) THEN 'Alta'::text
                    WHEN (((zr_1.escierredefinitivoinf)::text = 'S'::text) OR ((zr_1.escierredefinitivofor)::text = 'S'::text)) THEN ('Baja en '::text || (r_1.periodo)::text)
                    WHEN (r_1.razon IS NULL) THEN ('No ingresado '::text || (r_1.periodo)::text)
                    WHEN (r.razon IS NULL) THEN ('No ingresado '::text || (r.periodo)::text)
                    ELSE 'Continuo'::text
                END AS tipo,
            i.distrito,
            i.fraccion
           FROM (((((((cvp.relvis r_1
             LEFT JOIN cvp.periodos p ON (((p.periodoanterior)::text = (r_1.periodo)::text)))
             LEFT JOIN cvp.relvis r ON ((((r.periodo)::text = (p.periodo)::text) AND (r.informante = r_1.informante) AND (r.formulario = r_1.formulario) AND (r.visita = r_1.visita))))
             LEFT JOIN cvp.razones zr ON ((r.razon = zr.razon)))
             LEFT JOIN cvp.razones zr_1 ON ((r_1.razon = zr_1.razon)))
             LEFT JOIN cvp.informantes i ON ((r.informante = i.informante)))
             LEFT JOIN cvp.rubros ru ON ((i.rubro = ru.rubro)))
             LEFT JOIN cvp.formularios f ON ((r_1.formulario = f.formulario)))) x
     LEFT JOIN ( SELECT v.periodo,
            v.informante,
            v.visita,
            (count(*))::integer AS cantformactivos
           FROM (cvp.relvis v
             LEFT JOIN cvp.razones s ON ((v.razon = s.razon)))
          WHERE (NOT (((s.escierredefinitivoinf)::text = 'S'::text) OR ((s.escierredefinitivofor)::text = 'S'::text)))
          GROUP BY v.periodo, v.informante, v.visita) ca ON ((((x.periodo)::text = (ca.periodo)::text) AND (x.informante = ca.informante) AND (x.visita = ca.visita))))
  WHERE ((x.tipo <> 'Continuo'::text) AND (x.tipo <> ('No ingresado '::text || (x.periodo)::text)))
  ORDER BY x.periodoanterior, x.informanteanterior, x.visitaanterior, x.formularioanterior;


--
-- Name: informantesformulario; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.informantesformulario AS
 SELECT g.periodo,
    g.formulario,
    g.nombreformulario,
    (sum(
        CASE
            WHEN (g.activos ~~ '%S%'::text) THEN 1
            ELSE 0
        END))::integer AS cantactivos,
    (sum(
        CASE
            WHEN (g.altas ~~ '%S%'::text) THEN 1
            ELSE 0
        END))::integer AS cantaltas,
    (sum(
        CASE
            WHEN (g.bajas ~~ '%S%'::text) THEN 1
            ELSE 0
        END))::integer AS cantbajas
   FROM ( SELECT x.periodo,
            x.informante,
            x.formulario,
            x.nombreformulario,
            string_agg(DISTINCT x.activos, ','::text) AS activos,
            string_agg(DISTINCT x.altas, ','::text) AS altas,
            string_agg(DISTINCT x.bajas, ','::text) AS bajas
           FROM ( SELECT r.periodo,
                    r.informante,
                    r.visita,
                    r.formulario,
                    f.nombreformulario,
                    r.razon,
                    r_1.periodo AS periodoant,
                        CASE
                            WHEN (((COALESCE((z.escierredefinitivoinf)::character varying, 'N'::character varying))::text = 'N'::text) AND ((COALESCE((z.escierredefinitivofor)::character varying, 'N'::character varying))::text = 'N'::text)) THEN 'S'::text
                            ELSE 'N'::text
                        END AS activos,
                        CASE
                            WHEN ((r_1.periodo IS NULL) AND (r.periodo IS NOT NULL)) THEN 'S'::text
                            ELSE 'N'::text
                        END AS altas,
                        CASE
                            WHEN (((COALESCE((z.escierredefinitivoinf)::character varying, 'N'::character varying))::text = 'S'::text) OR ((COALESCE((z.escierredefinitivofor)::character varying, 'N'::character varying))::text = 'S'::text)) THEN 'S'::text
                            ELSE 'N'::text
                        END AS bajas
                   FROM (((((cvp.relvis r
                     LEFT JOIN cvp.informantes i ON ((r.informante = i.informante)))
                     LEFT JOIN cvp.periodos p ON (((r.periodo)::text = (p.periodo)::text)))
                     LEFT JOIN cvp.relvis r_1 ON ((((p.periodoanterior)::text = (r_1.periodo)::text) AND (r.formulario = r_1.formulario) AND (r.visita = r_1.visita) AND (r.informante = r_1.informante))))
                     LEFT JOIN cvp.formularios f ON ((r.formulario = f.formulario)))
                     LEFT JOIN cvp.razones z ON ((r.razon = z.razon)))
                  WHERE (r.visita = 1)) x
          GROUP BY x.periodo, x.informante, x.formulario, x.nombreformulario
          ORDER BY x.periodo, x.informante, x.formulario, x.nombreformulario) g
  GROUP BY g.periodo, g.formulario, g.nombreformulario
  ORDER BY g.periodo, g.formulario, g.nombreformulario;


--
-- Name: informantesrazon; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.informantesrazon AS
 SELECT r.periodo,
    NULLIF(btrim(replace(r.razon, chr(10), ''::text)), ''::text) AS razon,
    (((z.nombrerazon)::text || COALESCE(('~'::text || (x.nombrerazon)::text), ''::text)))::character varying(250) AS nombrerazon,
    (sum(((length(r.formularios) - length(replace(r.formularios, chr(10), ''::text))) + 1)))::integer AS cantformularios,
    (count(DISTINCT r.informante))::integer AS cantinformantes
   FROM ((cvp.hojaderuta r
     LEFT JOIN cvp.razones z ON ((
        CASE
            WHEN (strpos(r.razon, '~'::text) > 0) THEN btrim(substr(replace(r.razon, chr(10), ''::text), 1, (strpos(replace(r.razon, chr(10), ''::text), '~'::text) - 1)))
            ELSE btrim(replace(r.razon, chr(10), ''::text))
        END = (z.razon)::text)))
     LEFT JOIN cvp.razones x ON ((
        CASE
            WHEN (strpos(r.razon, '~'::text) > 0) THEN btrim(substr(replace(r.razon, chr(10), ''::text), (strpos(replace(r.razon, chr(10), ''::text), '~'::text) + 1)))
            ELSE ''::text
        END = (x.razon)::text)))
  WHERE (r.visita = 1)
  GROUP BY r.periodo, NULLIF(btrim(replace(r.razon, chr(10), ''::text)), ''::text), ((((z.nombrerazon)::text || COALESCE(('~'::text || (x.nombrerazon)::text), ''::text)))::character varying(250))
  ORDER BY r.periodo, NULLIF(btrim(replace(r.razon, chr(10), ''::text)), ''::text), ((((z.nombrerazon)::text || COALESCE(('~'::text || (x.nombrerazon)::text), ''::text)))::character varying(250));


--
-- Name: informantesrubro; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.informantesrubro AS
 SELECT g.periodo,
    g.rubro,
    g.nombrerubro,
    (sum(
        CASE
            WHEN (g.activos ~~ '%S%'::text) THEN 1
            ELSE 0
        END))::integer AS cantactivos,
    (sum(
        CASE
            WHEN ((g.altas ~~ '%S%'::text) AND (g.altas !~~ '%N%'::text)) THEN 1
            ELSE 0
        END))::integer AS cantaltas,
    (sum(
        CASE
            WHEN ((g.bajas ~~ '%S%'::text) AND (g.bajas !~~ '%N%'::text)) THEN 1
            ELSE 0
        END))::integer AS cantbajas
   FROM ( SELECT x.periodo,
            x.informante,
            x.rubro,
            x.nombrerubro,
            string_agg(DISTINCT x.activos, ','::text) AS activos,
            string_agg(DISTINCT x.altas, ','::text) AS altas,
            string_agg(DISTINCT x.bajas, ','::text) AS bajas
           FROM ( SELECT r.periodo,
                    r.informante,
                    r.visita,
                    r.formulario,
                    i.rubro,
                    u.nombrerubro,
                    r.razon,
                    r_1.periodo AS periodoant,
                        CASE
                            WHEN (((COALESCE((z.escierredefinitivoinf)::character varying, 'N'::character varying))::text = 'N'::text) AND ((COALESCE((z.escierredefinitivofor)::character varying, 'N'::character varying))::text = 'N'::text)) THEN 'S'::text
                            ELSE 'N'::text
                        END AS activos,
                        CASE
                            WHEN ((r_1.periodo IS NULL) AND (r.periodo IS NOT NULL)) THEN 'S'::text
                            ELSE 'N'::text
                        END AS altas,
                        CASE
                            WHEN (((COALESCE((z.escierredefinitivoinf)::character varying, 'N'::character varying))::text = 'S'::text) OR ((COALESCE((z.escierredefinitivofor)::character varying, 'N'::character varying))::text = 'S'::text)) THEN 'S'::text
                            ELSE 'N'::text
                        END AS bajas
                   FROM (((((cvp.relvis r
                     LEFT JOIN cvp.periodos p ON (((r.periodo)::text = (p.periodo)::text)))
                     LEFT JOIN cvp.relvis r_1 ON ((((p.periodoanterior)::text = (r_1.periodo)::text) AND (r.formulario = r_1.formulario) AND (r.visita = r_1.visita) AND (r.informante = r_1.informante))))
                     LEFT JOIN cvp.informantes i ON ((r.informante = i.informante)))
                     LEFT JOIN cvp.rubros u ON ((i.rubro = u.rubro)))
                     LEFT JOIN cvp.razones z ON ((r.razon = z.razon)))
                  WHERE (r.visita = 1)) x
          GROUP BY x.periodo, x.informante, x.rubro, x.nombrerubro
          ORDER BY x.periodo, x.informante, x.rubro, x.nombrerubro) g
  GROUP BY g.periodo, g.rubro, g.nombrerubro
  ORDER BY g.periodo, g.rubro, g.nombrerubro;


--
-- Name: secuencia_informantes_reemplazantes; Type: SEQUENCE; Schema: cvp; Owner: -
--

CREATE SEQUENCE cvp.secuencia_informantes_reemplazantes
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: infreemp; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.infreemp (
    informante integer NOT NULL,
    direccionalternativa text,
    nombreinformantealternativo text,
    comentarioana text,
    comentariorecep text,
    reemplazo integer,
    alta_fec timestamp without time zone DEFAULT now(),
    id_informante_reemplazante integer DEFAULT nextval('cvp.secuencia_informantes_reemplazantes'::regclass) NOT NULL,
    CONSTRAINT "texto invalido en direccion alternativa de tabla infreemp" CHECK (comun.cadena_valida(direccionalternativa, 'amplio'::text))
);


--
-- Name: secuencia_instalaciones; Type: SEQUENCE; Schema: cvp; Owner: -
--

CREATE SEQUENCE cvp.secuencia_instalaciones
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: instalaciones; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.instalaciones (
    token_instalacion text NOT NULL,
    fecha_hora timestamp without time zone NOT NULL,
    encuestador text NOT NULL,
    ipad text NOT NULL,
    version_sistema text NOT NULL,
    token_original text NOT NULL,
    id_instalacion integer DEFAULT nextval('cvp.secuencia_instalaciones'::regclass) NOT NULL,
    CONSTRAINT "encuestador<>''" CHECK ((encuestador <> ''::text)),
    CONSTRAINT "ipad<>''" CHECK ((ipad <> ''::text)),
    CONSTRAINT "token_instalacion<>''" CHECK ((token_instalacion <> ''::text)),
    CONSTRAINT "token_original<>''" CHECK ((token_original <> ''::text)),
    CONSTRAINT "version_sistema<>''" CHECK ((version_sistema <> ''::text))
);


--
-- Name: locks; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.locks (
    table_name text NOT NULL,
    record_pk jsonb NOT NULL,
    token text NOT NULL,
    lock_datetime timestamp without time zone NOT NULL,
    unlock_datetime timestamp without time zone,
    CONSTRAINT "table_name<>''" CHECK ((table_name <> ''::text)),
    CONSTRAINT "token<>''" CHECK ((token <> ''::text))
);


--
-- Name: magnitudes; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.magnitudes (
    magnitud character varying(12) NOT NULL,
    nombremagnitud character varying(40),
    unidadprincipalsingular character varying(40),
    unidadprincipalplural character varying(40),
    CONSTRAINT "texto invalido en magnitud de tabla magnitudes" CHECK (comun.cadena_valida((magnitud)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en nombremagnitud de tabla magnitudes" CHECK (comun.cadena_valida((nombremagnitud)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en unidadprincipalplural de tabla magnitudes" CHECK (comun.cadena_valida((unidadprincipalplural)::text, 'extendido'::text)),
    CONSTRAINT "texto invalido en unidadprincipalsingular de tabla magnitudes" CHECK (comun.cadena_valida((unidadprincipalsingular)::text, 'extendido'::text))
);


--
-- Name: matrizresultados; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.matrizresultados AS
 SELECT x.producto,
    x.tipoinformante,
    x.informante,
    x.observacion,
    round((col1.promobs)::numeric, 2) AS promobs_1,
    round((p1.precio)::numeric, 2) AS precioobservado_1,
    col1.impobs AS impobs_1,
    col1.antiguedadexcluido AS antiguedadexcluido_1,
    col1.antiguedadsinprecio AS antiguedadsinprecio_1,
    col1.antiguedadconprecio AS antiguedadconprecio_1,
    (round(((((col1.promobs / col0.promobs) * (100)::double precision) - (100)::double precision))::numeric, 1))::numeric(8,1) AS variacion_1,
    p1.tipoprecio AS tipoprecio_1,
    v1.razon AS razon_1,
    round((col2.promobs)::numeric, 2) AS promobs_2,
    round((p2.precio)::numeric, 2) AS precioobservado_2,
    col2.impobs AS impobs_2,
    col2.antiguedadexcluido AS antiguedadexcluido_2,
    col2.antiguedadsinprecio AS antiguedadsinprecio_2,
    col2.antiguedadconprecio AS antiguedadconprecio_2,
    (round(((((col2.promobs / col1.promobs) * (100)::double precision) - (100)::double precision))::numeric, 1))::numeric(8,1) AS variacion_2,
    p2.tipoprecio AS tipoprecio_2,
    v2.razon AS razon_2,
    round((col3.promobs)::numeric, 2) AS promobs_3,
    round((p3.precio)::numeric, 2) AS precioobservado_3,
    col3.impobs AS impobs_3,
    col3.antiguedadexcluido AS antiguedadexcluido_3,
    col3.antiguedadsinprecio AS antiguedadsinprecio_3,
    col3.antiguedadconprecio AS antiguedadconprecio_3,
    (round(((((col3.promobs / col2.promobs) * (100)::double precision) - (100)::double precision))::numeric, 1))::numeric(8,1) AS variacion_3,
    p3.tipoprecio AS tipoprecio_3,
    v3.razon AS razon_3,
    round((col4.promobs)::numeric, 2) AS promobs_4,
    round((p4.precio)::numeric, 2) AS precioobservado_4,
    col4.impobs AS impobs_4,
    col4.antiguedadexcluido AS antiguedadexcluido_4,
    col4.antiguedadsinprecio AS antiguedadsinprecio_4,
    col4.antiguedadconprecio AS antiguedadconprecio_4,
    (round(((((col4.promobs / col3.promobs) * (100)::double precision) - (100)::double precision))::numeric, 1))::numeric(8,1) AS variacion_4,
    p4.tipoprecio AS tipoprecio_4,
    v4.razon AS razon_4,
    round((col5.promobs)::numeric, 2) AS promobs_5,
    round((p5.precio)::numeric, 2) AS precioobservado_5,
    col5.impobs AS impobs_5,
    col5.antiguedadexcluido AS antiguedadexcluido_5,
    col5.antiguedadsinprecio AS antiguedadsinprecio_5,
    col5.antiguedadconprecio AS antiguedadconprecio_5,
    (round(((((col5.promobs / col4.promobs) * (100)::double precision) - (100)::double precision))::numeric, 1))::numeric(8,1) AS variacion_5,
    p5.tipoprecio AS tipoprecio_5,
    v5.razon AS razon_5,
    round((col6.promobs)::numeric, 2) AS promobs_6,
    round((p6.precio)::numeric, 2) AS precioobservado_6,
    col6.impobs AS impobs_6,
    col6.antiguedadexcluido AS antiguedadexcluido_6,
    col6.antiguedadsinprecio AS antiguedadsinprecio_6,
    col6.antiguedadconprecio AS antiguedadconprecio_6,
    (round(((((col6.promobs / col5.promobs) * (100)::double precision) - (100)::double precision))::numeric, 1))::numeric(8,1) AS variacion_6,
    p6.tipoprecio AS tipoprecio_6,
    v6.razon AS razon_6,
    cvp.matrizresultados_atributos_fun((p.periodo1)::text, x.informante, (x.producto)::text, x.observacion, 1) AS atributo_1,
    cvp.matrizresultados_atributos_fun((p.periodo2)::text, x.informante, (x.producto)::text, x.observacion, 1) AS atributo_2,
    cvp.matrizresultados_atributos_fun((p.periodo3)::text, x.informante, (x.producto)::text, x.observacion, 1) AS atributo_3,
    cvp.matrizresultados_atributos_fun((p.periodo4)::text, x.informante, (x.producto)::text, x.observacion, 1) AS atributo_4,
    cvp.matrizresultados_atributos_fun((p.periodo5)::text, x.informante, (x.producto)::text, x.observacion, 1) AS atributo_5,
    cvp.matrizresultados_atributos_fun((p.periodo6)::text, x.informante, (x.producto)::text, x.observacion, 1) AS atributo_6,
    p.periodo6
   FROM (((((((((((((((((((((cvp.matrizperiodos6 p
     JOIN ( SELECT r.producto,
            i.tipoinformante,
            r.informante,
            r.observacion,
            a.periodo6
           FROM cvp.calobs r,
            cvp.matrizperiodos6 a,
            cvp.informantes i
          WHERE (((a.periodo1 IS NULL) OR ((r.periodo)::text >= (a.periodo1)::text)) AND ((r.periodo)::text <= (a.periodo6)::text) AND (r.informante = i.informante))
          GROUP BY r.producto, i.tipoinformante, r.informante, r.observacion, a.periodo6) x ON (((x.periodo6)::text = (p.periodo6)::text)))
     LEFT JOIN cvp.calobs col1 ON (((col1.informante = x.informante) AND (col1.observacion = x.observacion) AND ((col1.producto)::text = (x.producto)::text) AND ((col1.periodo)::text = (p.periodo1)::text) AND (col1.calculo = 0))))
     LEFT JOIN cvp.calobs col2 ON (((col2.informante = x.informante) AND (col2.observacion = x.observacion) AND ((col2.producto)::text = (x.producto)::text) AND ((col2.periodo)::text = (p.periodo2)::text) AND (col2.calculo = 0))))
     LEFT JOIN cvp.calobs col3 ON (((col3.informante = x.informante) AND (col3.observacion = x.observacion) AND ((col3.producto)::text = (x.producto)::text) AND ((col3.periodo)::text = (p.periodo3)::text) AND (col3.calculo = 0))))
     LEFT JOIN cvp.calobs col4 ON (((col4.informante = x.informante) AND (col4.observacion = x.observacion) AND ((col4.producto)::text = (x.producto)::text) AND ((col4.periodo)::text = (p.periodo4)::text) AND (col4.calculo = 0))))
     LEFT JOIN cvp.calobs col5 ON (((col5.informante = x.informante) AND (col5.observacion = x.observacion) AND ((col5.producto)::text = (x.producto)::text) AND ((col5.periodo)::text = (p.periodo5)::text) AND (col5.calculo = 0))))
     LEFT JOIN cvp.calobs col6 ON (((col6.informante = x.informante) AND (col6.observacion = x.observacion) AND ((col6.producto)::text = (x.producto)::text) AND ((col6.periodo)::text = (p.periodo6)::text) AND (col6.calculo = 0))))
     LEFT JOIN cvp.relpre p1 ON (((p1.informante = x.informante) AND (p1.observacion = x.observacion) AND ((p1.producto)::text = (x.producto)::text) AND (p1.visita = 1) AND ((p1.periodo)::text = (p.periodo1)::text))))
     LEFT JOIN cvp.relpre p2 ON (((p2.informante = x.informante) AND (p2.observacion = x.observacion) AND ((p2.producto)::text = (x.producto)::text) AND (p2.visita = 1) AND ((p2.periodo)::text = (p.periodo2)::text))))
     LEFT JOIN cvp.relpre p3 ON (((p3.informante = x.informante) AND (p3.observacion = x.observacion) AND ((p3.producto)::text = (x.producto)::text) AND (p3.visita = 1) AND ((p3.periodo)::text = (p.periodo3)::text))))
     LEFT JOIN cvp.relpre p4 ON (((p4.informante = x.informante) AND (p4.observacion = x.observacion) AND ((p4.producto)::text = (x.producto)::text) AND (p4.visita = 1) AND ((p4.periodo)::text = (p.periodo4)::text))))
     LEFT JOIN cvp.relpre p5 ON (((p5.informante = x.informante) AND (p5.observacion = x.observacion) AND ((p5.producto)::text = (x.producto)::text) AND (p5.visita = 1) AND ((p5.periodo)::text = (p.periodo5)::text))))
     LEFT JOIN cvp.relpre p6 ON (((p6.informante = x.informante) AND (p6.observacion = x.observacion) AND ((p6.producto)::text = (x.producto)::text) AND (p6.visita = 1) AND ((p6.periodo)::text = (p.periodo6)::text))))
     LEFT JOIN cvp.relvis v1 ON (((v1.informante = x.informante) AND (v1.formulario = p1.formulario) AND (v1.visita = 1) AND ((v1.periodo)::text = (p.periodo1)::text))))
     LEFT JOIN cvp.relvis v2 ON (((v2.informante = x.informante) AND (v2.formulario = p2.formulario) AND (v2.visita = 1) AND ((v2.periodo)::text = (p.periodo2)::text))))
     LEFT JOIN cvp.relvis v3 ON (((v3.informante = x.informante) AND (v3.formulario = p3.formulario) AND (v3.visita = 1) AND ((v3.periodo)::text = (p.periodo3)::text))))
     LEFT JOIN cvp.relvis v4 ON (((v4.informante = x.informante) AND (v4.formulario = p4.formulario) AND (v4.visita = 1) AND ((v4.periodo)::text = (p.periodo4)::text))))
     LEFT JOIN cvp.relvis v5 ON (((v5.informante = x.informante) AND (v5.formulario = p5.formulario) AND (v5.visita = 1) AND ((v5.periodo)::text = (p.periodo5)::text))))
     LEFT JOIN cvp.relvis v6 ON (((v6.informante = x.informante) AND (v6.formulario = p6.formulario) AND (v6.visita = 1) AND ((v6.periodo)::text = (p.periodo6)::text))))
     LEFT JOIN cvp.periodos p0 ON ((((p0.periodo)::text = (p.periodo1)::text) AND ((p0.periodoanterior)::text <> (p.periodo1)::text))))
     LEFT JOIN cvp.calobs col0 ON (((col0.informante = x.informante) AND (col0.observacion = x.observacion) AND ((col0.producto)::text = (x.producto)::text) AND ((col0.periodo)::text = (p0.periodoanterior)::text) AND (col0.calculo = 0))));


--
-- Name: matrizresultadossinvariacion; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.matrizresultadossinvariacion AS
 SELECT m.periodo6 AS periodo,
    m.producto,
    m.tipoinformante,
    m.informante,
    m.observacion,
    m.promobs_1,
    m.precioobservado_1,
    m.impobs_1,
    m.antiguedadexcluido_1,
    m.antiguedadsinprecio_1,
    m.antiguedadconprecio_1,
    m.variacion_1,
    m.tipoprecio_1,
    m.razon_1,
    m.promobs_2,
    m.precioobservado_2,
    m.impobs_2,
    m.antiguedadexcluido_2,
    m.antiguedadsinprecio_2,
    m.antiguedadconprecio_2,
    m.variacion_2,
    m.tipoprecio_2,
    m.razon_2,
    m.promobs_3,
    m.precioobservado_3,
    m.impobs_3,
    m.antiguedadexcluido_3,
    m.antiguedadsinprecio_3,
    m.antiguedadconprecio_3,
    m.variacion_3,
    m.tipoprecio_3,
    m.razon_3,
    m.promobs_4,
    m.precioobservado_4,
    m.impobs_4,
    m.antiguedadexcluido_4,
    m.antiguedadsinprecio_4,
    m.antiguedadconprecio_4,
    m.variacion_4,
    m.tipoprecio_4,
    m.razon_4,
    m.promobs_5,
    m.precioobservado_5,
    m.impobs_5,
    m.antiguedadexcluido_5,
    m.antiguedadsinprecio_5,
    m.antiguedadconprecio_5,
    m.variacion_5,
    m.tipoprecio_5,
    m.razon_5,
    m.promobs_6,
    m.precioobservado_6,
    m.impobs_6,
    m.antiguedadexcluido_6,
    m.antiguedadsinprecio_6,
    m.antiguedadconprecio_6,
    m.variacion_6,
    m.tipoprecio_6,
    m.razon_6,
    m.atributo_1,
    m.atributo_2,
    m.atributo_3,
    m.atributo_4,
    m.atributo_5,
    m.atributo_6
   FROM cvp.matrizresultados m
  WHERE ((m.variacion_1 = (0)::numeric) AND (m.variacion_2 = (0)::numeric) AND (m.variacion_3 = (0)::numeric) AND (m.variacion_4 = (0)::numeric) AND (m.variacion_5 = (0)::numeric) AND (m.variacion_6 = (0)::numeric));


--
-- Name: modulos; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.modulos (
    formulario character varying(100) NOT NULL,
    nombre character varying(100) NOT NULL,
    zona character varying(100) NOT NULL,
    tipo smallint,
    CONSTRAINT "texto invalido en formulario de tabla modulos" CHECK (comun.cadena_valida((formulario)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en nombre de tabla modulos" CHECK (comun.cadena_valida((nombre)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en zona de tabla modulos" CHECK (comun.cadena_valida((zona)::text, 'castellano'::text))
);


--
-- Name: modulosusuarios; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.modulosusuarios (
    formulario character varying(100) NOT NULL,
    nombre character varying(100) NOT NULL,
    username character varying(100) NOT NULL,
    zona character varying(100) NOT NULL
);


--
-- Name: monedas; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.monedas (
    moneda character varying(10) NOT NULL,
    nombre_moneda character varying(100),
    es_nacional boolean,
    CONSTRAINT "El valor del campo es_nacional debe ser siempre TRUE" CHECK (es_nacional),
    CONSTRAINT "texto invalido en moneda de tabla monedas" CHECK (comun.cadena_valida((moneda)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en nombre_moneda de tabla monedas" CHECK (comun.cadena_valida((nombre_moneda)::text, 'castellano'::text))
);


--
-- Name: muestras; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.muestras (
    muestra integer NOT NULL,
    descripcion text,
    alta_inmediata_hasta_periodo character varying(11),
    CONSTRAINT "texto invalido en descripcion de tabla muestras" CHECK (comun.cadena_valida(descripcion, 'castellano'::text))
);


--
-- Name: novdelobs; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.novdelobs (
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    visita integer DEFAULT 1 NOT NULL,
    confirma boolean DEFAULT false NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentarios character varying(200),
    usuario character varying(30)
);


--
-- Name: novdelvis; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.novdelvis (
    periodo character varying(11) NOT NULL,
    informante integer NOT NULL,
    visita integer DEFAULT 1 NOT NULL,
    formulario integer NOT NULL,
    confirma boolean DEFAULT false NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentarios character varying(200),
    usuario character varying(30)
);


--
-- Name: novespinf; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.novespinf (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    especificacion integer NOT NULL,
    informante integer NOT NULL,
    estado character varying(18),
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    CONSTRAINT estado_valido CHECK (((estado)::text = ANY (ARRAY[('Alta'::character varying)::text, ('Baja'::character varying)::text, ('Reemplazo'::character varying)::text])))
);


--
-- Name: novext; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.novext (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    promedioext double precision,
    relativoimputacionext double precision,
    indiceext double precision,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


--
-- Name: novobs; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.novobs (
    periodo character varying(11) NOT NULL,
    calculo integer DEFAULT 0 NOT NULL,
    producto character varying(8) NOT NULL,
    informante integer NOT NULL,
    observacion integer NOT NULL,
    estado character varying(18),
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    usuario character varying(30),
    revisar_recep boolean DEFAULT false,
    comentarios text,
    comentarios_recep text,
    CONSTRAINT novobs_estado_check CHECK (((estado)::text = ANY (ARRAY[('Alta'::character varying)::text, ('Baja'::character varying)::text, ('Reemplazo'::character varying)::text])))
);


--
-- Name: novobs_base; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.novobs_base (
    producto character varying(8) NOT NULL,
    informante integer NOT NULL,
    observacion integer NOT NULL,
    hasta_periodo character varying(11) NOT NULL
);


--
-- Name: novpre; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.novpre (
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    visita integer NOT NULL,
    confirma boolean DEFAULT false NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentarios character varying(200),
    usuario character varying(30),
    revisar_recep boolean DEFAULT false,
    comentarios_recep text
);


--
-- Name: novprod; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.novprod (
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    promedioext double precision NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    variacion double precision DEFAULT 0,
    CONSTRAINT "El promedioext debe ser >0" CHECK ((promedioext > (0)::double precision))
);


--
-- Name: numeros; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.numeros (
    numero integer NOT NULL,
    CONSTRAINT numeros_numero_check CHECK ((numero > 0))
);


--
-- Name: pantar; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.pantar (
    panel integer NOT NULL,
    tarea integer NOT NULL,
    grupozonal character varying(1),
    panel2009 integer,
    tamannosupervision integer
);


--
-- Name: parahojasderuta; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.parahojasderuta AS
 SELECT v.periodo,
    v.panel,
    v.tarea,
    v.informante,
    v.formulario,
    f.nombreformulario,
    v.fechasalida,
    v.razon,
    v.fechageneracion,
    v.visita,
    v.ultimavisita,
    NULLIF(v.razon, 1) AS razonimpresa,
    n.nombreinformante,
    n.tipoinformante,
    n.direccion
   FROM ((cvp.relvis v
     JOIN cvp.formularios f ON ((v.formulario = f.formulario)))
     JOIN cvp.informantes n ON ((v.informante = n.informante)))
  ORDER BY v.periodo, v.panel, v.tarea, v.informante, v.formulario;


--
-- Name: paraimpresionformulariosatributos; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.paraimpresionformulariosatributos AS
 SELECT v.periodo,
    v.panel,
    v.tarea,
    v.informante,
    v.formulario,
    f.nombreformulario,
    v.fechasalida,
    v.razon,
    v.fechageneracion,
    v.visita,
    v.ultimavisita,
    fo.producto,
    COALESCE(d.nombreparaformulario, d.nombreproducto) AS nombreproducto,
    fo.observacion,
    p.precio,
    p.tipoprecio,
    t.atributo,
    a.nombreatributo,
    ra.valor,
    t.orden
   FROM (((((((((((cvp.relvis v
     JOIN cvp.periodos per ON (((per.periodo)::text = (v.periodo)::text)))
     JOIN cvp.formularios f ON ((v.formulario = f.formulario)))
     JOIN cvp.informantes i ON ((v.informante = i.informante)))
     JOIN cvp.rubros rub ON ((rub.rubro = i.rubro)))
     JOIN cvp.forobsinf fo ON (((fo.formulario = v.formulario) AND (i.informante = fo.informante))))
     JOIN cvp.productos d ON (((fo.producto)::text = (d.producto)::text)))
     JOIN cvp.especificaciones e ON ((((fo.producto)::text = (e.producto)::text) AND (fo.especificacion = e.especificacion))))
     LEFT JOIN cvp.relpre p ON (((1 = p.visita) AND ((per.periodoanterior)::text = (p.periodo)::text) AND (v.informante = p.informante) AND ((fo.producto)::text = (p.producto)::text) AND (fo.observacion = p.observacion))))
     LEFT JOIN cvp.prodatr t ON (((fo.producto)::text = (t.producto)::text)))
     LEFT JOIN cvp.atributos a ON ((a.atributo = t.atributo)))
     LEFT JOIN cvp.relatr ra ON ((((p.periodo)::text = (ra.periodo)::text) AND ((p.producto)::text = (ra.producto)::text) AND (p.observacion = ra.observacion) AND (p.informante = ra.informante) AND (p.visita = ra.visita) AND (t.atributo = ra.atributo))))
  WHERE ((fo.dependedeldespacho = 'N'::text) OR ((rub.despacho)::text = 'A'::text) OR (fo.observacion = 1))
  ORDER BY v.periodo, v.panel, v.tarea, v.informante, v.formulario, fo.producto, fo.observacion, t.orden;


--
-- Name: paraimpresionformulariosenblanco; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.paraimpresionformulariosenblanco AS
 SELECT f.formulario,
    fo.producto,
    fo.ordenimpresion AS orden,
    fo.observacion,
    f.nombreformulario,
    e.tamannonormal,
    COALESCE(p.nombreparaformulario, p.nombreproducto) AS nombreproducto,
    (substr((fo.producto)::text, 2))::character varying(8) AS codigo_producto,
    p.cantobs,
    f.soloparatipo,
    f.despacho,
    (((COALESCE((btrim((e.nombreespecificacion)::text) || '. '::text), ''::text) || COALESCE((NULLIF(btrim((COALESCE((btrim((e.envase)::text) || ' '::text), ''::text) ||
        CASE
            WHEN ((e.mostrar_cant_um)::text = 'N'::text) THEN ''::text
            ELSE (COALESCE(((e.cantidad)::text || ' '::text), ''::text) || (COALESCE(e.unidaddemedida, ''::character varying))::text)
        END)), ''::text) || '. '::text), ''::text)) || string_agg(
        CASE
            WHEN (((a.tipodato)::text = 'N'::text) AND ((a.visible)::text = 'S'::text) AND (t.rangodesde IS NOT NULL) AND (t.rangohasta IS NOT NULL)) THEN ((((((((
            CASE
                WHEN ((t.visiblenombreatributo)::text = 'S'::text) THEN ((a.nombreatributo)::text || ' '::text)
                ELSE ''::text
            END || 'de '::text) || t.rangodesde) || ' a '::text) || t.rangohasta) || ' '::text) || (COALESCE(a.unidaddemedida, a.nombreatributo, ''::character varying))::text) ||
            CASE
                WHEN (((t.alterable)::text = 'S'::text) AND ((t.normalizable)::text = 'S'::text) AND (NOT ((t.rangodesde <= t.valornormal) AND (t.valornormal <= t.rangohasta)))) THEN (((' ó '::text || t.valornormal) || ' '::text) || (a.unidaddemedida)::text)
                ELSE ''::text
            END) || '. '::text)
            ELSE ''::text
        END, ''::text ORDER BY t.orden)) || COALESCE((('Excluir '::text || btrim((e.excluir)::text)) || '. '::text), ''::text)) AS especificacioncompleta,
    fo.dependedeldespacho,
    e.destacada
   FROM ((((((cvp.formularios f
     JOIN cvp.forobs fo ON ((f.formulario = fo.formulario)))
     JOIN cvp.forprod fp ON (((fo.formulario = fp.formulario) AND ((fo.producto)::text = (fp.producto)::text))))
     JOIN cvp.especificaciones e ON ((((fo.producto)::text = (e.producto)::text) AND (fo.especificacion = e.especificacion))))
     JOIN cvp.productos p ON (((e.producto)::text = (p.producto)::text)))
     LEFT JOIN cvp.prodatr t ON (((fo.producto)::text = (t.producto)::text)))
     LEFT JOIN cvp.atributos a ON ((a.atributo = t.atributo)))
  GROUP BY f.formulario, fo.producto, fo.ordenimpresion, fo.observacion, f.nombreformulario, e.nombreespecificacion, e.tamannonormal, COALESCE(p.nombreparaformulario, p.nombreproducto), p.cantobs, f.soloparatipo, f.despacho, e.envase, e.cantidad, e.unidaddemedida, e.excluir, fo.dependedeldespacho, e.destacada, e.mostrar_cant_um
  ORDER BY f.formulario, fo.ordenimpresion, fo.observacion;


--
-- Name: paraimpresionformulariosprecios; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.paraimpresionformulariosprecios AS
 SELECT v.periodo,
    v.panel,
    v.tarea,
    i.direccion,
    i.ordenhdr,
    v.informante,
    v.formulario,
    f.nombreformulario,
    v.fechasalida,
    v.razon,
    v.fechageneracion,
    v.visita,
    v.ultimavisita,
    fo.producto,
    fo.ordenimpresion AS orden,
    COALESCE(d.nombreparaformulario, d.nombreproducto) AS nombreproducto,
    fo.observacion,
    p.precio,
    p.tipoprecio,
    e.nombreespecificacion,
    substr((fo.producto)::text, 2) AS codigo_producto,
    i.tipoinformante,
    NULLIF(v.razon, 1) AS razonimpresa,
    f.orden AS ordenformulario,
    (((COALESCE((btrim((e.nombreespecificacion)::text) || '. '::text), ''::text) || COALESCE((NULLIF(btrim((COALESCE((btrim((e.envase)::text) || ' '::text), ''::text) ||
        CASE
            WHEN ((e.mostrar_cant_um)::text = 'N'::text) THEN ''::text
            ELSE (COALESCE(((e.cantidad)::text || ' '::text), ''::text) || (COALESCE(e.unidaddemedida, ''::character varying))::text)
        END)), ''::text) || '. '::text), ''::text)) || string_agg(
        CASE
            WHEN (((a.tipodato)::text = 'N'::text) AND ((a.visible)::text = 'S'::text) AND (t.rangodesde IS NOT NULL) AND (t.rangohasta IS NOT NULL)) THEN (((((((((
            CASE
                WHEN ((t.visiblenombreatributo)::text = 'S'::text) THEN ((a.nombreatributo)::text || ' '::text)
                ELSE ''::text
            END || 'de '::text) || t.rangodesde) || ' a '::text) || t.rangohasta) || ' '::text) || (COALESCE(a.unidaddemedida, a.nombreatributo, ''::character varying))::text) ||
            CASE
                WHEN (((t.alterable)::text = 'S'::text) AND ((t.normalizable)::text = 'S'::text) AND (NOT ((t.rangodesde <= t.valornormal) AND (t.valornormal <= t.rangohasta)))) THEN (((' ó '::text || t.valornormal) || ' '::text) || (a.unidaddemedida)::text)
                ELSE ''::text
            END) ||
            CASE
                WHEN (t.otraunidaddemedida IS NOT NULL) THEN (('/'::text || (t.otraunidaddemedida)::text) || '.'::text)
                ELSE ''::text
            END) || ' '::text)
            ELSE ''::text
        END, ''::text ORDER BY t.orden)) || COALESCE((('Excluir '::text || btrim((e.excluir)::text)) || '. '::text), ''::text)) AS especificacioncompleta,
        CASE
            WHEN (prp.periodo IS NOT NULL) THEN 'R'::text
            ELSE NULL::text
        END AS indicacionrepreguntap,
        CASE
            WHEN (prpmas1.periodo IS NOT NULL) THEN 'R'::text
            ELSE NULL::text
        END AS indicacionrepreguntapmas1,
        CASE
            WHEN (prpmas2.periodo IS NOT NULL) THEN 'R'::text
            ELSE NULL::text
        END AS indicacionrepreguntapmas2,
        CASE
            WHEN (prpmas3.periodo IS NOT NULL) THEN 'R'::text
            ELSE NULL::text
        END AS indicacionrepreguntapmas3,
    e.destacada,
    rub.rubro
   FROM ((((((((((((((cvp.relvis v
     JOIN cvp.periodos per ON (((per.periodo)::text = (v.periodo)::text)))
     JOIN cvp.formularios f ON ((v.formulario = f.formulario)))
     JOIN cvp.informantes i ON ((v.informante = i.informante)))
     JOIN cvp.rubros rub ON ((rub.rubro = i.rubro)))
     JOIN cvp.forobsinf fo ON (((fo.formulario = v.formulario) AND (fo.informante = i.informante))))
     JOIN cvp.productos d ON (((fo.producto)::text = (d.producto)::text)))
     JOIN cvp.especificaciones e ON ((((fo.producto)::text = (e.producto)::text) AND (fo.especificacion = e.especificacion))))
     LEFT JOIN cvp.relpre p ON (((1 = p.visita) AND ((per.periodoanterior)::text = (p.periodo)::text) AND (v.informante = p.informante) AND ((fo.producto)::text = (p.producto)::text) AND (fo.observacion = p.observacion))))
     LEFT JOIN cvp.prodatr t ON (((fo.producto)::text = (t.producto)::text)))
     LEFT JOIN cvp.atributos a ON ((a.atributo = t.atributo)))
     LEFT JOIN cvp.prerep prp ON ((((per.periodo)::text = (prp.periodo)::text) AND ((d.producto)::text = (prp.producto)::text) AND (i.informante = prp.informante))))
     LEFT JOIN cvp.prerep prpmas1 ON (((cvp.moverperiodos((per.periodo)::text, 1) = (prpmas1.periodo)::text) AND ((d.producto)::text = (prpmas1.producto)::text) AND (i.informante = prpmas1.informante))))
     LEFT JOIN cvp.prerep prpmas2 ON (((cvp.moverperiodos((per.periodo)::text, 2) = (prpmas2.periodo)::text) AND ((d.producto)::text = (prpmas2.producto)::text) AND (i.informante = prpmas2.informante))))
     LEFT JOIN cvp.prerep prpmas3 ON (((cvp.moverperiodos((per.periodo)::text, 3) = (prpmas3.periodo)::text) AND ((d.producto)::text = (prpmas3.producto)::text) AND (i.informante = prpmas3.informante))))
  WHERE ((fo.dependedeldespacho = 'N'::text) OR ((rub.despacho)::text = 'A'::text) OR (fo.observacion = 1))
  GROUP BY v.periodo, v.panel, v.tarea, i.direccion, i.ordenhdr, v.informante, v.formulario, f.nombreformulario, v.fechasalida, v.razon, v.fechageneracion, v.visita, v.ultimavisita, fo.producto, fo.ordenimpresion, COALESCE(d.nombreparaformulario, d.nombreproducto), fo.observacion, p.precio, p.tipoprecio, e.nombreespecificacion, i.tipoinformante, e.envase, e.excluir, e.cantidad, e.unidaddemedida, prp.periodo, prpmas1.periodo, prpmas2.periodo, prpmas3.periodo, f.orden, e.destacada, rub.rubro, e.mostrar_cant_um
  ORDER BY v.periodo, v.panel, v.tarea, i.ordenhdr, i.direccion, v.informante, f.orden, fo.ordenimpresion, fo.observacion;


--
-- Name: paralistadodecontroldecm; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.paralistadodecontroldecm AS
 SELECT ccm.periodo,
    ccm.conjuntomuestral,
    ccm.tiposinformante,
    ccm.rubros,
    ccm.cantactivos,
    ccm.cantreemplazos,
        CASE
            WHEN (ccm.tiposinformante > 1) THEN 'CM con distintos tipos de informante'::text
            ELSE NULL::text
        END AS leyenda1,
        CASE
            WHEN (ccm.rubros > 1) THEN 'CM con distintos rubros'::text
            ELSE NULL::text
        END AS leyenda2,
        CASE
            WHEN (ccm.cantactivos > 1) THEN 'CM con más de un informante activo'::text
            WHEN (ccm.cantactivos = 0) THEN 'CM sin informante activo'::text
            ELSE NULL::text
        END AS leyenda3,
        CASE
            WHEN (ccm.cantreemplazos = 0) THEN 'CM sin informantes para reemplazos'::text
            ELSE NULL::text
        END AS leyenda4
   FROM ( SELECT pc.periodo,
            pc.conjuntomuestral,
            t.tiposinformante,
            r.rubros,
            COALESCE(ac.cantidadactivos, (0)::bigint) AS cantactivos,
            COALESCE(re.cantidadreemplazos, (0)::bigint) AS cantreemplazos
           FROM ((((( SELECT periodos.periodo,
                    conjuntomuestral.conjuntomuestral
                   FROM cvp.periodos,
                    cvp.conjuntomuestral) pc
             LEFT JOIN ( SELECT informantes.conjuntomuestral,
                    count(DISTINCT informantes.tipoinformante) AS tiposinformante
                   FROM cvp.informantes
                  GROUP BY informantes.conjuntomuestral) t ON ((pc.conjuntomuestral = t.conjuntomuestral)))
             LEFT JOIN ( SELECT informantes.conjuntomuestral,
                    count(DISTINCT informantes.rubro) AS rubros
                   FROM cvp.informantes
                  GROUP BY informantes.conjuntomuestral) r ON ((pc.conjuntomuestral = r.conjuntomuestral)))
             LEFT JOIN ( SELECT a.periodo,
                    a.conjuntomuestral,
                    a.cantidad AS cantidadactivos
                   FROM ( SELECT e.periodo,
                            e.conjuntomuestral,
                            e.estado,
                            count(*) AS cantidad
                           FROM ( SELECT p.periodo,
                                    i.conjuntomuestral,
                                    i.informante,
                                    cvp.estadoinformante((p.periodo)::text, i.informante) AS estado
                                   FROM cvp.periodos p,
                                    cvp.informantes i) e
                          GROUP BY e.periodo, e.conjuntomuestral, e.estado) a
                  WHERE (a.estado = 'Activo'::text)) ac ON (((pc.conjuntomuestral = ac.conjuntomuestral) AND ((pc.periodo)::text = (ac.periodo)::text))))
             LEFT JOIN ( SELECT a.periodo,
                    a.conjuntomuestral,
                    a.cantidad AS cantidadreemplazos
                   FROM ( SELECT e.periodo,
                            e.conjuntomuestral,
                            e.estado,
                            count(*) AS cantidad
                           FROM ( SELECT p.periodo,
                                    i.conjuntomuestral,
                                    i.informante,
                                    cvp.estadoinformante((p.periodo)::text, i.informante) AS estado
                                   FROM cvp.periodos p,
                                    cvp.informantes i) e
                          GROUP BY e.periodo, e.conjuntomuestral, e.estado) a
                  WHERE (a.estado = 'Inactivo'::text)) re ON (((pc.conjuntomuestral = re.conjuntomuestral) AND ((pc.periodo)::text = (re.periodo)::text))))) ccm;


--
-- Name: paralistadodecontroldeinformantes; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.paralistadodecontroldeinformantes AS
 SELECT DISTINCT r.periodo,
    r.informante,
    r.panel,
    r.tarea,
    r.visita,
    r.formulario,
    r.razon,
    COALESCE((z.escierredefinitivofor)::character varying, 'N'::character varying) AS escierredefinitivofor,
    COALESCE((z.espositivoformulario)::character varying, 'N'::character varying) AS espositivofor,
    r.periodo_1,
    r.visita_1,
    r_1.razon AS razon_1,
    COALESCE((z_1.escierredefinitivofor)::character varying, 'N'::character varying) AS escierredefinitivofor_1,
    COALESCE((z_1.espositivoformulario)::character varying, 'N'::character varying) AS espositivofor_1,
    c.cantidadregistros,
    c.cantidadprecios,
    COALESCE(j.atributosnoingresados, (0)::bigint) AS atributosnoing,
        CASE
            WHEN (r.razon IS NULL) THEN 'Falta ingresar'::text
            ELSE
            CASE
                WHEN (i.razonesnocoherentes = 'S'::text) THEN 'Razones incoherentes entre formularios'::text
                ELSE
                CASE
                    WHEN (((COALESCE((z_1.escierredefinitivofor)::character varying, 'N'::character varying))::text = 'S'::text) AND ((COALESCE((z.escierredefinitivofor)::character varying, 'N'::character varying))::text = 'N'::text)) THEN 'Razón incoherente respecto a la razón de la visita anterior'::text
                    WHEN (c.cantidadregistros = 0) THEN 'Falta generar renglones de precios'::text
                    WHEN (((COALESCE((z.espositivoformulario)::character varying, 'N'::character varying))::text = 'N'::text) AND (c.cantidadprecios > 0)) THEN 'Respuesta negativa con algún precio ingresado'::text
                    WHEN (((COALESCE((z.espositivoformulario)::character varying, 'N'::character varying))::text = 'S'::text) AND (c.cantidadprecios < c.cantidadregistros)) THEN 'Falta ingresar renglones de precios'::text
                    WHEN (COALESCE(j.atributosnoingresados, (0)::bigint) > 0) THEN 'Falta ingresar renglones de atributos'::text
                    ELSE NULL::text
                END
            END
        END AS leyenda
   FROM ((((((( SELECT rv.periodo,
            rv.informante,
            rv.visita,
            rv.formulario,
            rv.razon,
            rv.panel,
            rv.tarea,
            rp_1.producto,
            rp_1.observacion,
            rp_1.periodo_1,
            rp_1.visita_1
           FROM (cvp.relvis rv
             LEFT JOIN cvp.relpre_1 rp_1 ON ((((rv.periodo)::text = (rp_1.periodo)::text) AND (rv.informante = rp_1.informante) AND (rv.visita = rp_1.visita) AND (rv.formulario = rp_1.formulario))))) r
     LEFT JOIN ( SELECT r_2.periodo,
            r_2.informante,
            r_2.visita,
            'S'::text AS razonesnocoherentes
           FROM (cvp.relvis r_2
             LEFT JOIN cvp.razones z_2 ON ((r_2.razon = z_2.razon)))
          GROUP BY r_2.periodo, r_2.informante, r_2.visita
         HAVING (min((COALESCE((z_2.escierredefinitivoinf)::character varying, 'N'::character varying))::text) <> max((COALESCE((z_2.escierredefinitivoinf)::character varying, 'N'::character varying))::text))) i ON ((((r.periodo)::text = (i.periodo)::text) AND (r.informante = i.informante) AND (r.visita = i.visita))))
     LEFT JOIN cvp.relvis r_1 ON ((((r.periodo_1)::text = (r_1.periodo)::text) AND (r.visita_1 = r_1.visita) AND (r.formulario = r_1.formulario) AND (r.informante = r_1.informante))))
     LEFT JOIN cvp.razones z ON ((r.razon = z.razon)))
     LEFT JOIN cvp.razones z_1 ON ((r_1.razon = z_1.razon)))
     LEFT JOIN ( SELECT v.periodo,
            v.informante,
            v.visita,
            v.formulario,
            COALESCE(a.cantidadregistros, (0)::bigint) AS cantidadregistros,
            COALESCE(b.cantidadprecios, (0)::bigint) AS cantidadprecios
           FROM ((( SELECT relvis.periodo,
                    relvis.informante,
                    relvis.visita,
                    relvis.formulario
                   FROM cvp.relvis) v
             LEFT JOIN ( SELECT relpre.periodo,
                    relpre.informante,
                    relpre.visita,
                    relpre.formulario,
                    count(*) AS cantidadregistros
                   FROM cvp.relpre
                  GROUP BY relpre.periodo, relpre.informante, relpre.visita, relpre.formulario) a ON ((((v.periodo)::text = (a.periodo)::text) AND (v.informante = a.informante) AND (v.visita = a.visita) AND (v.formulario = a.formulario))))
             LEFT JOIN ( SELECT r_2.periodo,
                    r_2.informante,
                    r_2.visita,
                    r_2.formulario,
                    count(*) AS cantidadprecios
                   FROM (cvp.relpre r_2
                     JOIN cvp.tipopre t ON ((((r_2.tipoprecio)::text = (t.tipoprecio)::text) AND ((((t.espositivo)::text = 'S'::text) AND (r_2.precio IS NOT NULL)) OR (((t.espositivo)::text = 'N'::text) AND (r_2.precio IS NULL))))))
                  GROUP BY r_2.periodo, r_2.informante, r_2.visita, r_2.formulario) b ON ((((v.periodo)::text = (b.periodo)::text) AND (v.informante = b.informante) AND (v.visita = b.visita) AND (v.formulario = b.formulario))))) c ON ((((r.periodo)::text = (c.periodo)::text) AND (r.informante = c.informante) AND (r.visita = c.visita) AND (r.formulario = c.formulario))))
     LEFT JOIN ( SELECT p.periodo,
            p.informante,
            p.visita,
            p.formulario,
            count(*) AS atributosnoingresados
           FROM (((cvp.relpre p
             JOIN cvp.relatr a ON ((((a.periodo)::text = (p.periodo)::text) AND ((a.producto)::text = (p.producto)::text) AND (a.observacion = p.observacion) AND (a.informante = p.informante) AND (a.visita = p.visita))))
             JOIN cvp.tipopre t ON (((p.tipoprecio)::text = (t.tipoprecio)::text)))
             JOIN cvp.prodatr pa ON (((pa.atributo = a.atributo) AND ((pa.producto)::text = (a.producto)::text))))
          WHERE (((t.espositivo)::text = 'S'::text) AND (a.valor IS NULL) AND ((pa.normalizable)::text = 'S'::text))
          GROUP BY p.periodo, p.informante, p.visita, p.formulario) j ON ((((r.periodo)::text = (j.periodo)::text) AND (r.informante = j.informante) AND (r.visita = j.visita) AND (r.formulario = j.formulario))));


--
-- Name: pasoatraves; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.pasoatraves (
    unicoregistro boolean DEFAULT true NOT NULL,
    tipo character varying(30),
    valor character varying(100),
    CONSTRAINT pasoatraves_unicoregistro_check CHECK (unicoregistro)
);


--
-- Name: pb_calculos_reglas; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.pb_calculos_reglas (
    calculo integer NOT NULL,
    tipo_regla character varying(50) NOT NULL,
    num_regla integer NOT NULL,
    desde character varying(11),
    hasta character varying(11),
    valor character varying(50),
    CONSTRAINT "texto invalido en tipo_regla de tabla pb_calculos_reglas" CHECK (comun.cadena_valida((tipo_regla)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en valor de tabla pb_calculos_reglas" CHECK (comun.cadena_valida((valor)::text, 'amplio'::text))
);


--
-- Name: pb_externos; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.pb_externos (
    producto character varying(8) NOT NULL,
    periodo character varying(11) NOT NULL,
    indice double precision
);

--
-- Name: precios_maximos_vw; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.precios_maximos_vw AS
 SELECT a.periodo,
    a.producto,
    a.nombreproducto,
        CASE
            WHEN (split_part(m.precios, '|'::text, 1) <> ''::text) THEN split_part(m.precios, '|'::text, 1)
            ELSE NULL::text
        END AS precio1,
        CASE
            WHEN (split_part(m.precios, '|'::text, 2) <> ''::text) THEN split_part(m.precios, '|'::text, 2)
            ELSE NULL::text
        END AS precio2,
        CASE
            WHEN (split_part(m.precios, '|'::text, 3) <> ''::text) THEN split_part(m.precios, '|'::text, 3)
            ELSE NULL::text
        END AS precio3,
        CASE
            WHEN (split_part(m.precios, '|'::text, 4) <> ''::text) THEN split_part(m.precios, '|'::text, 4)
            ELSE NULL::text
        END AS precio4,
        CASE
            WHEN (split_part(m.precios, '|'::text, 5) <> ''::text) THEN split_part(m.precios, '|'::text, 5)
            ELSE NULL::text
        END AS precio5,
        CASE
            WHEN (split_part(m.precios, '|'::text, 6) <> ''::text) THEN split_part(m.precios, '|'::text, 6)
            ELSE NULL::text
        END AS precio6,
        CASE
            WHEN (split_part(m.precios, '|'::text, 7) <> ''::text) THEN split_part(m.precios, '|'::text, 7)
            ELSE NULL::text
        END AS precio7,
        CASE
            WHEN (split_part(m.precios, '|'::text, 8) <> ''::text) THEN split_part(m.precios, '|'::text, 8)
            ELSE NULL::text
        END AS precio8,
        CASE
            WHEN (split_part(m.precios, '|'::text, 9) <> ''::text) THEN split_part(m.precios, '|'::text, 9)
            ELSE NULL::text
        END AS precio9,
        CASE
            WHEN (split_part(m.precios, '|'::text, 10) <> ''::text) THEN split_part(m.precios, '|'::text, 10)
            ELSE NULL::text
        END AS precio10,
    split_part(m.informantes, ';'::text, 1) AS informantes1,
    split_part(m.informantes, ';'::text, 2) AS informantes2,
    split_part(m.informantes, ';'::text, 3) AS informantes3,
    split_part(m.informantes, ';'::text, 4) AS informantes4,
    split_part(m.informantes, ';'::text, 5) AS informantes5,
    split_part(m.informantes, ';'::text, 6) AS informantes6,
    split_part(m.informantes, ';'::text, 7) AS informantes7,
    split_part(m.informantes, ';'::text, 8) AS informantes8,
    split_part(m.informantes, ';'::text, 9) AS informantes9,
    split_part(m.informantes, ';'::text, 10) AS informantes10
   FROM (( SELECT pe.periodo,
            pr.producto,
            pr.nombreproducto
           FROM (( SELECT periodos.periodo
                   FROM cvp.periodos
                  ORDER BY periodos.periodo DESC
                 LIMIT 12) pe
             JOIN ( SELECT productos.producto,
                    productos.nombreproducto
                   FROM cvp.productos
                  WHERE ((productos.nombreproducto)::text !~~ '%orrar%'::text)) pr ON (true))) a
     LEFT JOIN cvp.periodo_maximos_precios(10) m(periodo, producto, nombreproducto, precios, informantes) ON ((((a.periodo)::text = (m.periodo)::text) AND ((a.producto)::text = (m.producto)::text) AND ((a.nombreproducto)::text = (m.nombreproducto)::text))))
  ORDER BY a.periodo, a.producto, a.nombreproducto;


--
-- Name: precios_minimos_vw; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.precios_minimos_vw AS
 SELECT a.periodo,
    a.producto,
    a.nombreproducto,
        CASE
            WHEN (split_part(m.precios, '|'::text, 1) <> ''::text) THEN split_part(m.precios, '|'::text, 1)
            ELSE NULL::text
        END AS precio1,
        CASE
            WHEN (split_part(m.precios, '|'::text, 2) <> ''::text) THEN split_part(m.precios, '|'::text, 2)
            ELSE NULL::text
        END AS precio2,
        CASE
            WHEN (split_part(m.precios, '|'::text, 3) <> ''::text) THEN split_part(m.precios, '|'::text, 3)
            ELSE NULL::text
        END AS precio3,
        CASE
            WHEN (split_part(m.precios, '|'::text, 4) <> ''::text) THEN split_part(m.precios, '|'::text, 4)
            ELSE NULL::text
        END AS precio4,
        CASE
            WHEN (split_part(m.precios, '|'::text, 5) <> ''::text) THEN split_part(m.precios, '|'::text, 5)
            ELSE NULL::text
        END AS precio5,
        CASE
            WHEN (split_part(m.precios, '|'::text, 6) <> ''::text) THEN split_part(m.precios, '|'::text, 6)
            ELSE NULL::text
        END AS precio6,
        CASE
            WHEN (split_part(m.precios, '|'::text, 7) <> ''::text) THEN split_part(m.precios, '|'::text, 7)
            ELSE NULL::text
        END AS precio7,
        CASE
            WHEN (split_part(m.precios, '|'::text, 8) <> ''::text) THEN split_part(m.precios, '|'::text, 8)
            ELSE NULL::text
        END AS precio8,
        CASE
            WHEN (split_part(m.precios, '|'::text, 9) <> ''::text) THEN split_part(m.precios, '|'::text, 9)
            ELSE NULL::text
        END AS precio9,
        CASE
            WHEN (split_part(m.precios, '|'::text, 10) <> ''::text) THEN split_part(m.precios, '|'::text, 10)
            ELSE NULL::text
        END AS precio10,
    split_part(m.informantes, ';'::text, 1) AS informantes1,
    split_part(m.informantes, ';'::text, 2) AS informantes2,
    split_part(m.informantes, ';'::text, 3) AS informantes3,
    split_part(m.informantes, ';'::text, 4) AS informantes4,
    split_part(m.informantes, ';'::text, 5) AS informantes5,
    split_part(m.informantes, ';'::text, 6) AS informantes6,
    split_part(m.informantes, ';'::text, 7) AS informantes7,
    split_part(m.informantes, ';'::text, 8) AS informantes8,
    split_part(m.informantes, ';'::text, 9) AS informantes9,
    split_part(m.informantes, ';'::text, 10) AS informantes10
   FROM (( SELECT pe.periodo,
            pr.producto,
            pr.nombreproducto
           FROM (( SELECT periodos.periodo
                   FROM cvp.periodos
                  ORDER BY periodos.periodo DESC
                 LIMIT 12) pe
             JOIN ( SELECT productos.producto,
                    productos.nombreproducto
                   FROM cvp.productos
                  WHERE ((productos.nombreproducto)::text !~~ '%orrar%'::text)) pr ON (true))) a
     LEFT JOIN cvp.periodo_minimos_precios(10) m(periodo, producto, nombreproducto, precios, informantes) ON ((((a.periodo)::text = (m.periodo)::text) AND ((a.producto)::text = (m.producto)::text) AND ((a.nombreproducto)::text = (m.nombreproducto)::text))))
  ORDER BY a.periodo, a.producto, a.nombreproducto;


--
-- Name: precios_porcentaje_positivos_y_anulados; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.precios_porcentaje_positivos_y_anulados AS
 SELECT v.periodo,
    v.informante,
    v.panel,
    v.tarea,
    ta.operativo,
    ((v.formulario || ':'::text) || (f.nombreformulario)::text) AS formulario,
    count(*) AS preciospotenciales,
    sum(
        CASE
            WHEN ((t.espositivo)::text = 'S'::text) THEN 1
            ELSE 0
        END) AS positivos,
    sum(
        CASE
            WHEN (((t.espositivo)::text = 'N'::text) AND ((t.visibleparaencuestador)::text = 'N'::text)) THEN 1
            ELSE 0
        END) AS anulados,
    (((((sum(
        CASE
            WHEN ((t.espositivo)::text = 'S'::text) THEN 1
            ELSE 0
        END) + sum(
        CASE
            WHEN (((t.espositivo)::text = 'N'::text) AND ((t.visibleparaencuestador)::text = 'N'::text)) THEN 1
            ELSE 0
        END)) * 100) / count(*)))::text || '%'::text) AS porcentaje,
    sum(a.atributospotenciales) AS atributospotenciales,
    sum(a.atributospositivos) AS atributospositivos,
        CASE
            WHEN (sum(a.atributospotenciales) > (0)::numeric) THEN ((round(((sum(a.atributospositivos) / sum(a.atributospotenciales)) * (100)::numeric)))::text || '%'::text)
            ELSE '0%'::text
        END AS porcatributos
   FROM ((((cvp.relvis v
     JOIN cvp.relpre r ON ((((v.periodo)::text = (r.periodo)::text) AND (v.informante = r.informante) AND (v.formulario = r.formulario) AND (v.visita = r.visita))))
     LEFT JOIN cvp.tareas ta ON ((v.tarea = ta.tarea)))
     LEFT JOIN cvp.formularios f ON ((v.formulario = f.formulario)))
     LEFT JOIN cvp.tipopre t ON (((r.tipoprecio)::text = (t.tipoprecio)::text))),
    LATERAL ( SELECT pro.producto,
            count(DISTINCT pa.atributo) AS atributospotenciales,
                CASE
                    WHEN ((t.espositivo)::text = 'S'::text) THEN count(DISTINCT pa.atributo)
                    ELSE (0)::bigint
                END AS atributospositivos
           FROM (cvp.productos pro
             LEFT JOIN cvp.prodatr pa ON (((pro.producto)::text = (pa.producto)::text)))
          WHERE ((r.producto)::text = (pro.producto)::text)
          GROUP BY pro.producto) a
  GROUP BY v.periodo, v.informante, v.panel, v.tarea, ta.operativo, ((v.formulario || ':'::text) || (f.nombreformulario)::text)
  ORDER BY v.periodo, v.informante, v.panel, v.tarea, ta.operativo, ((v.formulario || ':'::text) || (f.nombreformulario)::text);


--
-- Name: preciosmedios_albs; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.preciosmedios_albs AS
 SELECT x.gruponivel1,
    x.nombregruponivel1,
    x.grupopadre,
    x.nombregrupopadre,
    x.producto,
    x.nombreproducto,
    x.unidadmedidaabreviada,
    round((c1.promdiv)::numeric, 2) AS promprod1,
    round((c2.promdiv)::numeric, 2) AS promprod2,
    round((c3.promdiv)::numeric, 2) AS promprod3,
    round((c4.promdiv)::numeric, 2) AS promprod4,
    round((c5.promdiv)::numeric, 2) AS promprod5,
    round((c6.promdiv)::numeric, 2) AS promprod6,
    c1.periodo AS periodo1,
    c2.periodo AS periodo2,
    c3.periodo AS periodo3,
    c4.periodo AS periodo4,
    c5.periodo AS periodo5,
    c6.periodo AS periodo6,
    x.agrupacion
   FROM (((((((((cvp.matrizperiodos6 p
     JOIN ( SELECT c.producto,
            p_1.nombreproducto,
            p_1.unidadmedidaabreviada,
            g.agrupacion,
            c.calculo,
            a.periodo6,
            g.nivel,
            g.grupopadre,
            g2.nombregrupo AS nombregrupopadre,
            g2.grupopadre AS gruponivel1,
            g3.nombregrupo AS nombregruponivel1
           FROM (((((cvp.caldiv c
             JOIN cvp.grupos g ON (((c.calculo = 0) AND ((g.grupo)::text = (c.producto)::text) AND ((g.esproducto)::text = 'S'::text))))
             JOIN cvp.productos p_1 ON ((((g.grupo)::text = (p_1.producto)::text) AND ((g.esproducto)::text = 'S'::text))))
             JOIN cvp.matrizperiodos6 a ON ((((a.periodo1 IS NULL) OR ((c.periodo)::text >= (a.periodo1)::text)) AND ((c.periodo)::text <= (a.periodo6)::text))))
             LEFT JOIN cvp.grupos g2 ON ((((g.grupopadre)::text = (g2.grupo)::text) AND ((g2.agrupacion)::text = (g.agrupacion)::text))))
             LEFT JOIN cvp.grupos g3 ON ((((g2.grupopadre)::text = (g3.grupo)::text) AND ((g3.agrupacion)::text = (g2.agrupacion)::text))))
          WHERE ((c.calculo = 0) AND ((g.esproducto)::text = 'S'::text) AND ((g.agrupacion)::text = 'C'::text) AND ((c.division)::text = '0'::text))
          GROUP BY c.producto, p_1.nombreproducto, p_1.unidadmedidaabreviada, g.agrupacion, c.calculo, a.periodo6, g.nivel, g.grupopadre, g2.nombregrupo, g2.grupopadre, g3.nombregrupo) x ON (((x.periodo6)::text = (p.periodo6)::text)))
     LEFT JOIN cvp.caldiv c1 ON ((((x.producto)::text = (c1.producto)::text) AND ((c1.periodo)::text = (p.periodo1)::text) AND (c1.calculo = x.calculo) AND ((c1.division)::text = '0'::text))))
     LEFT JOIN cvp.caldiv c2 ON ((((x.producto)::text = (c2.producto)::text) AND ((c2.periodo)::text = (p.periodo2)::text) AND (c2.calculo = x.calculo) AND ((c2.division)::text = '0'::text))))
     LEFT JOIN cvp.caldiv c3 ON ((((x.producto)::text = (c3.producto)::text) AND ((c3.periodo)::text = (p.periodo3)::text) AND (c3.calculo = x.calculo) AND ((c3.division)::text = '0'::text))))
     LEFT JOIN cvp.caldiv c4 ON ((((x.producto)::text = (c4.producto)::text) AND ((c4.periodo)::text = (p.periodo4)::text) AND (c4.calculo = x.calculo) AND ((c4.division)::text = '0'::text))))
     LEFT JOIN cvp.caldiv c5 ON ((((x.producto)::text = (c5.producto)::text) AND ((c5.periodo)::text = (p.periodo5)::text) AND (c5.calculo = x.calculo) AND ((c5.division)::text = '0'::text))))
     LEFT JOIN cvp.caldiv c6 ON ((((x.producto)::text = (c6.producto)::text) AND ((c6.periodo)::text = (p.periodo6)::text) AND (c6.calculo = x.calculo) AND ((c6.division)::text = '0'::text))))
     LEFT JOIN cvp.periodos p0 ON ((((p0.periodo)::text = (p.periodo1)::text) AND ((p0.periodoanterior)::text <> (p.periodo1)::text))))
     LEFT JOIN cvp.caldiv cl0 ON ((((x.producto)::text = (cl0.producto)::text) AND ((cl0.periodo)::text = (p0.periodoanterior)::text) AND (cl0.calculo = x.calculo) AND ((cl0.division)::text = '0'::text))))
  ORDER BY x.agrupacion, c6.periodo, x.gruponivel1, x.grupopadre, x.producto;


--
-- Name: preciosmedios_albs_var; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.preciosmedios_albs_var AS
 SELECT g2.grupopadre AS gruponivel1,
    g3.nombregrupo AS nombregruponivel1,
    g.grupopadre,
    g2.nombregrupo AS nombregrupopadre,
    c.producto,
    COALESCE((p.nombreparapublicar)::character varying(250), p.nombreproducto) AS nombreproducto,
    p.unidadmedidaabreviada,
    round((c0.promdiv)::numeric, 2) AS promprodant,
    round((c.promdiv)::numeric, 2) AS promprod,
        CASE
            WHEN (c0.promdiv = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.promdiv / c0.promdiv) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacion,
        CASE
            WHEN (ca.promdiv = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.promdiv / ca.promdiv) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variaciondiciembre,
        CASE
            WHEN (cm.promdiv = (0)::double precision) THEN NULL::numeric
            ELSE round(((((c.promdiv / cm.promdiv) * (100)::double precision) - (100)::double precision))::numeric, 1)
        END AS variacionmesanioanterior,
    g.agrupacion,
    c.calculo,
    c.periodo,
    c0.calculo AS calculoant,
    c0.periodo AS periodoant,
    ca.periodo AS periododiciembre,
    cm.periodo AS periodoaniooanterior
   FROM ((((((((cvp.caldiv c
     JOIN cvp.grupos g ON (((c.calculo = 0) AND ((g.grupo)::text = (c.producto)::text) AND ((g.esproducto)::text = 'S'::text))))
     JOIN cvp.productos p ON ((((g.grupo)::text = (p.producto)::text) AND ((g.esproducto)::text = 'S'::text))))
     JOIN cvp.calculos pa ON ((((c.periodo)::text = (pa.periodo)::text) AND ('A'::text = (pa.agrupacionprincipal)::text) AND (0 = pa.calculo))))
     JOIN cvp.caldiv c0 ON ((((c.producto)::text = (c0.producto)::text) AND (c0.calculo = pa.calculoanterior) AND ((c0.periodo)::text = (pa.periodoanterior)::text) AND ((c0.division)::text = '0'::text))))
     LEFT JOIN cvp.caldiv ca ON ((((c.producto)::text = (ca.producto)::text) AND (c.calculo = ca.calculo) AND ((ca.periodo)::text = (('a'::text || ((substr((c.periodo)::text, 2, 4))::integer - 1)) || 'm12'::text)) AND ((ca.division)::text = '0'::text))))
     LEFT JOIN cvp.caldiv cm ON ((((c.producto)::text = (cm.producto)::text) AND (c.calculo = cm.calculo) AND ((cm.periodo)::text = ((('a'::text || ((substr((c.periodo)::text, 2, 4))::integer - 1)) || 'm'::text) || substr((c.periodo)::text, 7, 2))) AND ((cm.division)::text = '0'::text))))
     LEFT JOIN cvp.grupos g2 ON ((((g.grupopadre)::text = (g2.grupo)::text) AND ((g2.agrupacion)::text = (g.agrupacion)::text))))
     LEFT JOIN cvp.grupos g3 ON ((((g2.grupopadre)::text = (g3.grupo)::text) AND ((g3.agrupacion)::text = (g2.agrupacion)::text))))
  WHERE ((c.calculo = 0) AND (((g.esproducto)::text = 'S'::text) AND ((g.agrupacion)::text = 'C'::text)) AND ((c.division)::text = '0'::text))
  ORDER BY g.agrupacion, c.periodo, g2.grupopadre, g.grupopadre, c.producto;


--
-- Name: prod_for_rub; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.prod_for_rub AS
 SELECT x.producto,
    x.nombreproducto,
    split_part(x.formularios, '|'::text, 1) AS formulario1,
        CASE
            WHEN (split_part(x.formularios, '|'::text, 2) = ''::text) THEN NULL::text
            ELSE split_part(x.formularios, '|'::text, 2)
        END AS formulario2,
        CASE
            WHEN (split_part(x.formularios, '|'::text, 3) = ''::text) THEN NULL::text
            ELSE split_part(x.formularios, '|'::text, 3)
        END AS formulario3,
    split_part(x.rubros, '|'::text, 1) AS rubro1,
        CASE
            WHEN (split_part(x.rubros, '|'::text, 2) = ''::text) THEN NULL::text
            ELSE split_part(x.rubros, '|'::text, 2)
        END AS rubro2,
        CASE
            WHEN (split_part(x.rubros, '|'::text, 3) = ''::text) THEN NULL::text
            ELSE split_part(x.rubros, '|'::text, 3)
        END AS rubro3,
    x.formula,
    x.estacional,
    x.imputacon,
    x.cantperaltaauto,
    x.cantperbajaauto,
    x.cantporunidcons,
    x.unidadmedidaporunidcons,
    x.esexternohabitual,
    x.tipocalculo,
    x.cantobs,
    x.unidadmedidaabreviada,
    x.codigo_ccba,
    x.porc_adv_inf,
    x.porc_adv_sup
   FROM ( SELECT s.producto,
            s.nombreproducto,
            string_agg(((s.formulario || ':'::text) || (s.nombreformulario)::text), '|'::text) AS formularios,
            string_agg(s.rubros, '|'::text) AS rubros,
            s.formula,
            s.estacional,
            s.imputacon,
            s.cantperaltaauto,
            s.cantperbajaauto,
            s.cantporunidcons,
            s.unidadmedidaporunidcons,
            s.esexternohabitual,
            s.tipocalculo,
            s.cantobs,
            s.unidadmedidaabreviada,
            s.codigo_ccba,
            s.porc_adv_inf,
            s.porc_adv_sup
           FROM ( SELECT d.producto,
                    d.nombreproducto,
                    d.formulario,
                    d.nombreformulario,
                    string_agg(((d.rubro || ':'::text) || (d.nombrerubro)::text), '; '::text) AS rubros,
                    d.formula,
                    d.estacional,
                    d.imputacon,
                    d.cantperaltaauto,
                    d.cantperbajaauto,
                    d.cantporunidcons,
                    d.unidadmedidaporunidcons,
                    d.esexternohabitual,
                    d.tipocalculo,
                    d.cantobs,
                    d.unidadmedidaabreviada,
                    d.codigo_ccba,
                    d.porc_adv_inf,
                    d.porc_adv_sup
                   FROM ( SELECT p.producto,
                            p.nombreproducto,
                            fp.formulario,
                            f.nombreformulario,
                            rf.rubro,
                            r.nombrerubro,
                            p.formula,
                            p.estacional,
                            p.imputacon,
                            p.cantperaltaauto,
                            p.cantperbajaauto,
                            pa.cantporunidcons,
                            p.unidadmedidaporunidcons,
                            p.esexternohabitual,
                            p.tipocalculo,
                            p.cantobs,
                            p.unidadmedidaabreviada,
                            p.codigo_ccba,
                            p.porc_adv_inf,
                            p.porc_adv_sup
                           FROM (((((cvp.productos p
                             LEFT JOIN cvp.prodagr pa ON ((((p.producto)::text = (pa.producto)::text) AND ((pa.agrupacion)::text = 'A'::text))))
                             LEFT JOIN cvp.forprod fp ON (((p.producto)::text = (fp.producto)::text)))
                             LEFT JOIN ( SELECT DISTINCT r_1.formulario,
                                    i.rubro
                                   FROM ((cvp.relvis r_1
                                     JOIN cvp.informantes i ON ((r_1.informante = i.informante)))
                                     JOIN ( SELECT max((periodos.periodo)::text) AS per
   FROM cvp.periodos
  WHERE ((periodos.ingresando)::text = 'N'::text)) p_1 ON (((r_1.periodo)::text = p_1.per)))) rf ON ((fp.formulario = rf.formulario)))
                             LEFT JOIN cvp.formularios f ON ((fp.formulario = f.formulario)))
                             LEFT JOIN cvp.rubros r ON ((rf.rubro = r.rubro)))
                          WHERE ((f.activo)::text = 'S'::text)
                          ORDER BY p.producto, fp.formulario, rf.rubro) d
                  GROUP BY d.producto, d.nombreproducto, d.formulario, d.nombreformulario, d.formula, d.estacional, d.imputacon, d.cantperaltaauto, d.cantperbajaauto, d.cantporunidcons, d.unidadmedidaporunidcons, d.esexternohabitual, d.tipocalculo, d.cantobs, d.unidadmedidaabreviada, d.codigo_ccba, d.porc_adv_inf, d.porc_adv_sup
                  ORDER BY d.producto) s
          GROUP BY s.producto, s.nombreproducto, s.formula, s.estacional, s.imputacon, s.cantperaltaauto, s.cantperbajaauto, s.cantporunidcons, s.unidadmedidaporunidcons, s.esexternohabitual, s.tipocalculo, s.cantobs, s.unidadmedidaabreviada, s.codigo_ccba, s.porc_adv_inf, s.porc_adv_sup
          ORDER BY s.producto) x;


--
-- Name: prodatrval; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.prodatrval (
    producto text NOT NULL,
    atributo integer NOT NULL,
    valor text NOT NULL,
    orden integer
);


--
-- Name: prodcantporunidcons; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.prodcantporunidcons (
    producto character varying(8),
    cantporunidcons double precision
);


--
-- Name: proddivestimac; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.proddivestimac (
    producto character varying(8) NOT NULL,
    division character varying(250) NOT NULL,
    estimacion integer NOT NULL,
    umbralpriimp integer,
    umbraldescarte integer,
    umbralbajaauto integer,
    CONSTRAINT "El umbral de primera imputación debe ser mayor a cero" CHECK ((umbralpriimp > 0)),
    CONSTRAINT "La estimación debe ser mayor a cero" CHECK ((estimacion > 0)),
    CONSTRAINT "texto invalido en division de tabla proddivestimac" CHECK (comun.cadena_valida((division)::text, 'amplio'::text))
);


--
-- Name: promedios_maximos_minimos; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.promedios_maximos_minimos AS
 SELECT v.periodo,
    v.producto,
    f.nombreproducto,
    n.tipoinformante,
    r.despacho,
    v.observacion,
    round((exp(avg(ln(v.precionormalizado))))::numeric, 2) AS avgp,
    round((min(v.precionormalizado))::numeric, 2) AS minp,
    round((max(v.precionormalizado))::numeric, 2) AS maxp,
    round((((exp(avg(ln((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs))))) * (100)::double precision) - (100)::double precision))::numeric, 1) AS avgv,
    round((min((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision)))::numeric, 1) AS minv,
    round((max((((v.precionormalizado / COALESCE(v.precionormalizado_1, co.promobs)) * (100)::double precision) - (100)::double precision)))::numeric, 1) AS maxv,
    sum(
        CASE
            WHEN ((ta.espositivo)::text = 'S'::text) THEN 1
            ELSE 0
        END) AS cantreales,
    sum(
        CASE
            WHEN ((ta.espositivo)::text = 'N'::text) THEN 1
            ELSE 0
        END) AS cantnegativos,
    sum(
        CASE
            WHEN ((COALESCE(v.cambio, '0'::character varying))::text = 'C'::text) THEN 1
            ELSE 0
        END) AS cantcambios,
    count(*) AS cantcasos,
    sum(
        CASE
            WHEN ((( SELECT ta.espositivo
               FROM cvp.relvis vi
              WHERE (((ta.tipoprecio)::text = (COALESCE(v.tipoprecio, '0'::character varying))::text) AND (vi.informantereemplazante IS NOT NULL) AND (v.informante = vi.informantereemplazante) AND ((v.periodo)::text = (vi.periodo)::text) AND (v.visita = vi.visita))))::text = 'S'::text) THEN 1
            ELSE 0
        END) AS cantreemplazos,
    sum(
        CASE
            WHEN (v.tipoprecio IS NULL) THEN 1
            ELSE 0
        END) AS cantnulos
   FROM (((((cvp.relpre_1 v
     JOIN cvp.productos f ON (((v.producto)::text = (f.producto)::text)))
     JOIN cvp.informantes n ON ((v.informante = n.informante)))
     JOIN cvp.rubros r ON ((n.rubro = r.rubro)))
     LEFT JOIN cvp.tipopre ta ON (((ta.tipoprecio)::text = (COALESCE(v.tipoprecio, '0'::character varying))::text)))
     LEFT JOIN cvp.calobs co ON ((((v.periodo_1)::text = (co.periodo)::text) AND (co.calculo = 0) AND (v.informante = co.informante) AND ((v.producto)::text = (co.producto)::text) AND (v.observacion = co.observacion))))
  GROUP BY v.periodo, v.producto, f.nombreproducto, n.tipoinformante, r.despacho, v.observacion
  ORDER BY v.periodo, v.producto, n.tipoinformante, r.despacho, v.observacion;


--
-- Name: reemplazosexportar; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.reemplazosexportar AS
 SELECT v.periodo,
    v.panel,
    v.tarea,
    v.fechasalida,
    ii.conjuntomuestral,
    v.encuestador,
    (COALESCE(((p.nombre)::text || ' '::text), ''::text) || (COALESCE(p.apellido, ''::character varying))::text) AS nombreencuestador,
    v.visita,
    regexp_replace(cvp.formularioshdr((v.periodo)::text, v.informante, v.visita, v.fechasalida, (v.encuestador)::text), chr(10), ' | '::text, 'g'::text) AS formularios,
        CASE
            WHEN (ii.informante = v.informante) THEN 'Titular'::text
            ELSE 'Reemplazo'::text
        END AS tipoinformante,
    ii.informante,
    ii.nombreinformante,
    ii.direccion,
    ii.ordenhdr,
    ii.distrito,
    ii.fraccion,
    ii.rubro,
    r.nombrerubro
   FROM ((((((cvp.relvis v
     JOIN ( SELECT periodos.periodo
           FROM cvp.periodos
          WHERE ((periodos.ingresando)::text = 'N'::text)
          ORDER BY periodos.periodo DESC
         LIMIT 1) e ON (((v.periodo)::text = (e.periodo)::text)))
     JOIN cvp.informantes i ON ((v.informante = i.informante)))
     JOIN cvp.informantes ii ON ((ii.conjuntomuestral = i.conjuntomuestral)))
     JOIN cvp.personal p ON (((v.encuestador)::text = (p.persona)::text)))
     JOIN cvp.rubros r ON ((ii.rubro = r.rubro)))
     LEFT JOIN ( SELECT DISTINCT hojaderuta.informante,
            hojaderuta.conjuntomuestral,
            1 AS estaenhojaderuta
           FROM cvp.hojaderuta) h ON (((ii.conjuntomuestral = h.conjuntomuestral) AND (ii.informante = h.informante))))
  WHERE ((
        CASE
            WHEN (ii.informante = v.informante) THEN 'Titular'::text
            ELSE 'Reemplazo'::text
        END = 'Titular'::text) OR (h.estaenhojaderuta IS NULL))
  GROUP BY v.periodo, v.panel, v.tarea, v.fechasalida, ii.conjuntomuestral, v.encuestador, (COALESCE(((p.nombre)::text || ' '::text), ''::text) || (COALESCE(p.apellido, ''::character varying))::text), v.visita,
        CASE
            WHEN (ii.informante = v.informante) THEN 'Titular'::text
            ELSE 'Reemplazo'::text
        END, v.informante, ii.informante, ii.nombreinformante, ii.direccion, ii.ordenhdr, ii.distrito, ii.fraccion, ii.rubro, r.nombrerubro
  ORDER BY v.panel, v.tarea, ii.conjuntomuestral,
        CASE
            WHEN (ii.informante = v.informante) THEN 'Titular'::text
            ELSE 'Reemplazo'::text
        END DESC, ii.informante;


--
-- Name: relatr_1; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.relatr_1 AS
 SELECT r.periodo,
    r.visita,
    r.producto,
    r.observacion,
    r.informante,
    r.atributo,
    r.valor,
    r_1.periodo AS periodo_1,
    r_1.visita AS visita_1,
    r_1.valor AS valor_1
   FROM ((cvp.relatr r
     LEFT JOIN cvp.relpre p_1 ON ((((p_1.periodo)::text =
        CASE
            WHEN (r.visita > 1) THEN (r.periodo)::text
            ELSE ( SELECT max((relpre.periodo)::text) AS max
               FROM cvp.relpre
              WHERE (((relpre.periodo)::text < (r.periodo)::text) AND ((relpre.producto)::text = (r.producto)::text) AND (relpre.observacion = r.observacion) AND (relpre.informante = r.informante)))
        END) AND (((p_1.ultima_visita = true) AND (r.visita = 1)) OR ((r.visita > 1) AND (p_1.visita = (r.visita - 1)))) AND (p_1.informante = r.informante) AND ((p_1.producto)::text = (r.producto)::text) AND (p_1.observacion = r.observacion))))
     LEFT JOIN cvp.relatr r_1 ON ((((r_1.periodo)::text = (p_1.periodo)::text) AND (r_1.visita = p_1.visita) AND (r_1.informante = r.informante) AND ((r_1.producto)::text = (r.producto)::text) AND (r_1.observacion = r.observacion) AND (r_1.atributo = r.atributo))));


--
-- Name: relenc; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relenc (
    periodo character varying(10) NOT NULL,
    panel integer NOT NULL,
    tarea integer NOT NULL,
    encuestador character varying(10) NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


--
-- Name: relinf; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relinf (
    periodo character varying(11) NOT NULL,
    informante integer NOT NULL,
    visita integer NOT NULL,
    observaciones text,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    panel integer NOT NULL,
    tarea integer NOT NULL
);


--
-- Name: relmon; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relmon (
    periodo character varying(11) NOT NULL,
    moneda character varying(10) NOT NULL,
    valor_pesos double precision,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    CONSTRAINT "texto invalido en moneda de tabla relmon" CHECK (comun.cadena_valida((moneda)::text, 'amplio'::text))
);


--
-- Name: relpresemaforo; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relpresemaforo (
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    visita integer DEFAULT 1 NOT NULL
);


--
-- Name: relsup; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.relsup (
    periodo character varying(10) NOT NULL,
    panel integer NOT NULL,
    supervisor character varying(10) NOT NULL,
    disponible cvp.sino_dom,
    motivonodisponible character varying(200),
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    CONSTRAINT "texto invalido en motivonodisponible de tabla relsup" CHECK (comun.cadena_valida((motivonodisponible)::text, 'castellano'::text))
);


--
-- Name: revisor_parametros; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.revisor_parametros AS
 SELECT 'V190813'::text AS versionexigida,
    'V130417'::text AS versionbase;


--
-- Name: revisor; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.revisor AS
 SELECT x.producto,
    x.division,
    x.informante,
    x.observacion,
    x.periodo1_pr,
    x.periodo1_tipo,
    x.periodo1_enc,
    x.periodo1_var,
    x.periodo2_pr,
    x.periodo2_tipo,
    x.periodo2_enc,
    x.periodo2_var,
    x.periodo3_pr,
    x.periodo3_tipo,
    x.periodo3_enc,
    x.periodo3_var,
    x.periodo4_pr,
    x.periodo4_tipo,
    x.periodo4_enc,
    x.periodo4_var,
    x.periodo5_pr,
    x.periodo5_tipo,
    x.periodo5_enc,
    x.periodo5_var,
    x.periodo6_pr,
    x.periodo6_tipo,
    x.periodo6_enc
   FROM ( SELECT c.producto,
            c.division,
            c.informante,
            c.observacion,
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 1) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN (max(
                    CASE
                        WHEN ((pe.nroperiodo = 1) AND (substr((o.estado)::text, 1, 1) = 'B'::text)) THEN ((o.estado)::text || 'Manual '::text)
                        ELSE ''::text
                    END) || replace((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 1) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END))::text, '.'::text, '.'::text))
                    ELSE ((max(
                    CASE
                        WHEN ((pe.nroperiodo = 1) AND (c.antiguedadexcluido > 0)) THEN 'X '::text
                        ELSE ''::text
                    END) || max(
                    CASE
                        WHEN (pe.nroperiodo = 1) THEN (substr((o.estado)::text, 1, 1) || ' '::text)
                        ELSE ''::text
                    END)) || string_agg(
                    CASE
                        WHEN ((pe.nroperiodo = 1) AND (c.antiguedadexcluido > 0)) THEN replace(substr(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), 1, (strpos(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), '.'::text) + 6)), '.'::text, '.'::text)
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita))
                END AS periodo1_pr,
            (max(
                CASE
                    WHEN (pe.nroperiodo = 1) THEN
                    CASE
                        WHEN (c.antiguedadincluido > 0) THEN ((COALESCE(c.impobs, ''::character varying))::text || ':'::text)
                        ELSE 'X:'::text
                    END
                    ELSE NULL::text
                END) || COALESCE(string_agg((
                CASE
                    WHEN (pe.nroperiodo = 1) THEN ((((COALESCE(r.tipoprecio, ''::character varying))::text || COALESCE((','::text || (r.cambio)::text), ''::text)) ||
                    CASE
                        WHEN ((r.tipoprecio)::text = 'M'::text) THEN ((COALESCE((' '::text || comun.a_texto(bp.precio)), ''::text) || COALESCE((' '::text || (bp.tipoprecio)::text), ''::text)) || COALESCE((' '::text || ba.valores), ''::text))
                        ELSE ''::text
                    END) ||
                    CASE
                        WHEN (pat.valorprincipal IS NOT NULL) THEN (' '::text || pat.valorprincipal)
                        ELSE ''::text
                    END)
                    ELSE NULL::text
                END ||
                CASE
                    WHEN (o.estado IS NOT NULL) THEN ((' '::text || (o.estado)::text) || 'Manual '::text)
                    ELSE ''::text
                END), ';'::text ORDER BY r.visita), ''::text)) AS periodo1_tipo,
            ((COALESCE(string_agg(
                CASE
                    WHEN (pe.nroperiodo = 1) THEN r.comentariosrelpre
                    ELSE NULL::text
                END, ';'::text ORDER BY r.visita), ''::text) ||
                CASE
                    WHEN (COALESCE(string_agg(
                    CASE
                        WHEN (pe.nroperiodo = 1) THEN r.comentariosrelpre
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita), ''::text) <> ''::text) THEN '/'::text
                    ELSE ''::text
                END) || min(
                CASE
                    WHEN (pe.nroperiodo = 1) THEN (((v.encuestador)::text || ':'::text) || (per.apellido)::text)
                    ELSE NULL::text
                END)) AS periodo1_enc,
            replace((
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 1) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN round(((((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 2) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) / avg(
                    CASE
                        WHEN ((pe.nroperiodo = 1) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END)) * (100)::double precision) - (100)::double precision))::numeric, 1)
                    ELSE NULL::numeric
                END)::text, '.'::text, '.'::text) AS periodo1_var,
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 2) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN (max(
                    CASE
                        WHEN ((pe.nroperiodo = 2) AND (substr((o.estado)::text, 1, 1) = 'B'::text)) THEN ((o.estado)::text || 'Manual '::text)
                        ELSE ''::text
                    END) || replace((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 2) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END))::text, '.'::text, '.'::text))
                    ELSE ((max(
                    CASE
                        WHEN ((pe.nroperiodo = 2) AND (c.antiguedadexcluido > 0)) THEN 'X '::text
                        ELSE ''::text
                    END) || max(
                    CASE
                        WHEN (pe.nroperiodo = 2) THEN (substr((o.estado)::text, 1, 1) || ' '::text)
                        ELSE ''::text
                    END)) || string_agg(
                    CASE
                        WHEN ((pe.nroperiodo = 2) AND (c.antiguedadexcluido > 0)) THEN replace(substr(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), 1, (strpos(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), '.'::text) + 6)), '.'::text, '.'::text)
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita))
                END AS periodo2_pr,
            (max(
                CASE
                    WHEN (pe.nroperiodo = 2) THEN
                    CASE
                        WHEN (c.antiguedadincluido > 0) THEN ((COALESCE(c.impobs, ''::character varying))::text || ':'::text)
                        ELSE 'X:'::text
                    END
                    ELSE NULL::text
                END) || COALESCE(string_agg((
                CASE
                    WHEN (pe.nroperiodo = 2) THEN ((((COALESCE(r.tipoprecio, ''::character varying))::text || COALESCE((','::text || (r.cambio)::text), ''::text)) ||
                    CASE
                        WHEN ((r.tipoprecio)::text = 'M'::text) THEN ((COALESCE((' '::text || comun.a_texto(bp.precio)), ''::text) || COALESCE((' '::text || (bp.tipoprecio)::text), ''::text)) || COALESCE((' '::text || ba.valores), ''::text))
                        ELSE ''::text
                    END) ||
                    CASE
                        WHEN (pat.valorprincipal IS NOT NULL) THEN (' '::text || pat.valorprincipal)
                        ELSE ''::text
                    END)
                    ELSE NULL::text
                END ||
                CASE
                    WHEN (o.estado IS NOT NULL) THEN ((' '::text || (o.estado)::text) || 'Manual '::text)
                    ELSE ''::text
                END), ';'::text ORDER BY r.visita), ''::text)) AS periodo2_tipo,
            ((COALESCE(string_agg(
                CASE
                    WHEN (pe.nroperiodo = 2) THEN r.comentariosrelpre
                    ELSE NULL::text
                END, ';'::text ORDER BY r.visita), ''::text) ||
                CASE
                    WHEN (COALESCE(string_agg(
                    CASE
                        WHEN (pe.nroperiodo = 2) THEN r.comentariosrelpre
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita), ''::text) <> ''::text) THEN '/'::text
                    ELSE ''::text
                END) || min(
                CASE
                    WHEN (pe.nroperiodo = 2) THEN (((v.encuestador)::text || ':'::text) || (per.apellido)::text)
                    ELSE NULL::text
                END)) AS periodo2_enc,
            replace((
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 2) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN round(((((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 3) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) / avg(
                    CASE
                        WHEN ((pe.nroperiodo = 2) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END)) * (100)::double precision) - (100)::double precision))::numeric, 1)
                    ELSE NULL::numeric
                END)::text, '.'::text, '.'::text) AS periodo2_var,
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 3) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN (max(
                    CASE
                        WHEN ((pe.nroperiodo = 3) AND (substr((o.estado)::text, 1, 1) = 'B'::text)) THEN ((o.estado)::text || 'Manual '::text)
                        ELSE ''::text
                    END) || replace((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 3) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END))::text, '.'::text, '.'::text))
                    ELSE ((max(
                    CASE
                        WHEN ((pe.nroperiodo = 3) AND (c.antiguedadexcluido > 0)) THEN 'X '::text
                        ELSE ''::text
                    END) || max(
                    CASE
                        WHEN (pe.nroperiodo = 3) THEN (substr((o.estado)::text, 1, 1) || ' '::text)
                        ELSE ''::text
                    END)) || string_agg(
                    CASE
                        WHEN ((pe.nroperiodo = 3) AND (c.antiguedadexcluido > 0)) THEN replace(substr(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), 1, (strpos(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), '.'::text) + 6)), '.'::text, '.'::text)
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita))
                END AS periodo3_pr,
            (max(
                CASE
                    WHEN (pe.nroperiodo = 3) THEN
                    CASE
                        WHEN (c.antiguedadincluido > 0) THEN ((COALESCE(c.impobs, ''::character varying))::text || ':'::text)
                        ELSE 'X:'::text
                    END
                    ELSE NULL::text
                END) || COALESCE(string_agg((
                CASE
                    WHEN (pe.nroperiodo = 3) THEN ((((COALESCE(r.tipoprecio, ''::character varying))::text || COALESCE((','::text || (r.cambio)::text), ''::text)) ||
                    CASE
                        WHEN ((r.tipoprecio)::text = 'M'::text) THEN ((COALESCE((' '::text || comun.a_texto(bp.precio)), ''::text) || COALESCE((' '::text || (bp.tipoprecio)::text), ''::text)) || COALESCE((' '::text || ba.valores), ''::text))
                        ELSE ''::text
                    END) ||
                    CASE
                        WHEN (pat.valorprincipal IS NOT NULL) THEN (' '::text || pat.valorprincipal)
                        ELSE ''::text
                    END)
                    ELSE NULL::text
                END ||
                CASE
                    WHEN (o.estado IS NOT NULL) THEN ((' '::text || (o.estado)::text) || 'Manual '::text)
                    ELSE ''::text
                END), ';'::text ORDER BY r.visita), ''::text)) AS periodo3_tipo,
            ((COALESCE(string_agg(
                CASE
                    WHEN (pe.nroperiodo = 3) THEN r.comentariosrelpre
                    ELSE NULL::text
                END, ';'::text ORDER BY r.visita), ''::text) ||
                CASE
                    WHEN (COALESCE(string_agg(
                    CASE
                        WHEN (pe.nroperiodo = 3) THEN r.comentariosrelpre
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita), ''::text) <> ''::text) THEN '/'::text
                    ELSE ''::text
                END) || min(
                CASE
                    WHEN (pe.nroperiodo = 3) THEN (((v.encuestador)::text || ':'::text) || (per.apellido)::text)
                    ELSE NULL::text
                END)) AS periodo3_enc,
            replace((
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 3) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN round(((((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 4) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) / avg(
                    CASE
                        WHEN ((pe.nroperiodo = 3) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END)) * (100)::double precision) - (100)::double precision))::numeric, 1)
                    ELSE NULL::numeric
                END)::text, '.'::text, '.'::text) AS periodo3_var,
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 4) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN (max(
                    CASE
                        WHEN ((pe.nroperiodo = 4) AND (substr((o.estado)::text, 1, 1) = 'B'::text)) THEN ((o.estado)::text || 'Manual '::text)
                        ELSE ''::text
                    END) || replace((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 4) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END))::text, '.'::text, '.'::text))
                    ELSE ((max(
                    CASE
                        WHEN ((pe.nroperiodo = 4) AND (c.antiguedadexcluido > 0)) THEN 'X '::text
                        ELSE ''::text
                    END) || max(
                    CASE
                        WHEN (pe.nroperiodo = 4) THEN (substr((o.estado)::text, 1, 1) || ' '::text)
                        ELSE ''::text
                    END)) || string_agg(
                    CASE
                        WHEN ((pe.nroperiodo = 4) AND (c.antiguedadexcluido > 0)) THEN replace(substr(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), 1, (strpos(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), '.'::text) + 6)), '.'::text, '.'::text)
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita))
                END AS periodo4_pr,
            (max(
                CASE
                    WHEN (pe.nroperiodo = 4) THEN
                    CASE
                        WHEN (c.antiguedadincluido > 0) THEN ((COALESCE(c.impobs, ''::character varying))::text || ':'::text)
                        ELSE 'X:'::text
                    END
                    ELSE NULL::text
                END) || COALESCE(string_agg((
                CASE
                    WHEN (pe.nroperiodo = 4) THEN ((((COALESCE(r.tipoprecio, ''::character varying))::text || COALESCE((','::text || (r.cambio)::text), ''::text)) ||
                    CASE
                        WHEN ((r.tipoprecio)::text = 'M'::text) THEN ((COALESCE((' '::text || comun.a_texto(bp.precio)), ''::text) || COALESCE((' '::text || (bp.tipoprecio)::text), ''::text)) || COALESCE((' '::text || ba.valores), ''::text))
                        ELSE ''::text
                    END) ||
                    CASE
                        WHEN (pat.valorprincipal IS NOT NULL) THEN (' '::text || pat.valorprincipal)
                        ELSE ''::text
                    END)
                    ELSE NULL::text
                END ||
                CASE
                    WHEN (o.estado IS NOT NULL) THEN ((' '::text || (o.estado)::text) || 'Manual '::text)
                    ELSE ''::text
                END), ';'::text ORDER BY r.visita), ''::text)) AS periodo4_tipo,
            ((COALESCE(string_agg(
                CASE
                    WHEN (pe.nroperiodo = 4) THEN r.comentariosrelpre
                    ELSE NULL::text
                END, ';'::text ORDER BY r.visita), ''::text) ||
                CASE
                    WHEN (COALESCE(string_agg(
                    CASE
                        WHEN (pe.nroperiodo = 4) THEN r.comentariosrelpre
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita), ''::text) <> ''::text) THEN '/'::text
                    ELSE ''::text
                END) || min(
                CASE
                    WHEN (pe.nroperiodo = 4) THEN (((v.encuestador)::text || ':'::text) || (per.apellido)::text)
                    ELSE NULL::text
                END)) AS periodo4_enc,
            replace((
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 4) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN round(((((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 5) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) / avg(
                    CASE
                        WHEN ((pe.nroperiodo = 4) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END)) * (100)::double precision) - (100)::double precision))::numeric, 1)
                    ELSE NULL::numeric
                END)::text, '.'::text, '.'::text) AS periodo4_var,
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 5) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN (max(
                    CASE
                        WHEN ((pe.nroperiodo = 5) AND (substr((o.estado)::text, 1, 1) = 'B'::text)) THEN ((o.estado)::text || 'Manual '::text)
                        ELSE ''::text
                    END) || replace((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 5) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END))::text, '.'::text, '.'::text))
                    ELSE ((max(
                    CASE
                        WHEN ((pe.nroperiodo = 5) AND (c.antiguedadexcluido > 0)) THEN 'X '::text
                        ELSE ''::text
                    END) || max(
                    CASE
                        WHEN (pe.nroperiodo = 5) THEN (substr((o.estado)::text, 1, 1) || ' '::text)
                        ELSE ''::text
                    END)) || string_agg(
                    CASE
                        WHEN ((pe.nroperiodo = 5) AND (c.antiguedadexcluido > 0)) THEN replace(substr(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), 1, (strpos(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), '.'::text) + 6)), '.'::text, '.'::text)
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita))
                END AS periodo5_pr,
            (max(
                CASE
                    WHEN (pe.nroperiodo = 5) THEN
                    CASE
                        WHEN (c.antiguedadincluido > 0) THEN ((COALESCE(c.impobs, ''::character varying))::text || ':'::text)
                        ELSE 'X:'::text
                    END
                    ELSE NULL::text
                END) || COALESCE(string_agg((
                CASE
                    WHEN (pe.nroperiodo = 5) THEN ((((COALESCE(r.tipoprecio, ''::character varying))::text || COALESCE((','::text || (r.cambio)::text), ''::text)) ||
                    CASE
                        WHEN ((r.tipoprecio)::text = 'M'::text) THEN ((COALESCE((' '::text || comun.a_texto(bp.precio)), ''::text) || COALESCE((' '::text || (bp.tipoprecio)::text), ''::text)) || COALESCE((' '::text || ba.valores), ''::text))
                        ELSE ''::text
                    END) ||
                    CASE
                        WHEN (pat.valorprincipal IS NOT NULL) THEN (' '::text || pat.valorprincipal)
                        ELSE ''::text
                    END)
                    ELSE NULL::text
                END ||
                CASE
                    WHEN (o.estado IS NOT NULL) THEN ((' '::text || (o.estado)::text) || 'Manual '::text)
                    ELSE ''::text
                END), ';'::text ORDER BY r.visita), ''::text)) AS periodo5_tipo,
            ((COALESCE(string_agg(
                CASE
                    WHEN (pe.nroperiodo = 5) THEN r.comentariosrelpre
                    ELSE NULL::text
                END, ';'::text ORDER BY r.visita), ''::text) ||
                CASE
                    WHEN (COALESCE(string_agg(
                    CASE
                        WHEN (pe.nroperiodo = 5) THEN r.comentariosrelpre
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita), ''::text) <> ''::text) THEN '/'::text
                    ELSE ''::text
                END) || min(
                CASE
                    WHEN (pe.nroperiodo = 5) THEN (((v.encuestador)::text || ':'::text) || (per.apellido)::text)
                    ELSE NULL::text
                END)) AS periodo5_enc,
            replace((
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 5) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN round(((((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 6) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) / avg(
                    CASE
                        WHEN ((pe.nroperiodo = 5) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END)) * (100)::double precision) - (100)::double precision))::numeric, 1)
                    ELSE NULL::numeric
                END)::text, '.'::text, '.'::text) AS periodo5_var,
                CASE
                    WHEN (avg(
                    CASE
                        WHEN ((pe.nroperiodo = 6) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END) > (0)::double precision) THEN (max(
                    CASE
                        WHEN ((pe.nroperiodo = 6) AND (substr((o.estado)::text, 1, 1) = 'B'::text)) THEN ((o.estado)::text || 'Manual '::text)
                        ELSE ''::text
                    END) || replace((avg(
                    CASE
                        WHEN ((pe.nroperiodo = 6) AND (c.antiguedadincluido > 0)) THEN c.promobs
                        ELSE NULL::double precision
                    END))::text, '.'::text, '.'::text))
                    ELSE ((max(
                    CASE
                        WHEN ((pe.nroperiodo = 6) AND (c.antiguedadexcluido > 0)) THEN 'X '::text
                        ELSE ''::text
                    END) || max(
                    CASE
                        WHEN (pe.nroperiodo = 6) THEN (substr((o.estado)::text, 1, 1) || ' '::text)
                        ELSE ''::text
                    END)) || string_agg(
                    CASE
                        WHEN ((pe.nroperiodo = 6) AND (c.antiguedadexcluido > 0)) THEN replace(substr(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), 1, (strpos(comun.a_texto((round((r.precionormalizado)::numeric, 6))::double precision), '.'::text) + 6)), '.'::text, '.'::text)
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita))
                END AS periodo6_pr,
            (max(
                CASE
                    WHEN (pe.nroperiodo = 6) THEN
                    CASE
                        WHEN (c.antiguedadincluido > 0) THEN ((COALESCE(c.impobs, ''::character varying))::text || ':'::text)
                        ELSE 'X:'::text
                    END
                    ELSE NULL::text
                END) || COALESCE(string_agg((
                CASE
                    WHEN (pe.nroperiodo = 6) THEN ((((COALESCE(r.tipoprecio, ''::character varying))::text || COALESCE((','::text || (r.cambio)::text), ''::text)) ||
                    CASE
                        WHEN ((r.tipoprecio)::text = 'M'::text) THEN ((COALESCE((' '::text || comun.a_texto(bp.precio)), ''::text) || COALESCE((' '::text || (bp.tipoprecio)::text), ''::text)) || COALESCE((' '::text || ba.valores), ''::text))
                        ELSE ''::text
                    END) ||
                    CASE
                        WHEN (pat.valorprincipal IS NOT NULL) THEN (' '::text || pat.valorprincipal)
                        ELSE ''::text
                    END)
                    ELSE NULL::text
                END ||
                CASE
                    WHEN (o.estado IS NOT NULL) THEN ((' '::text || (o.estado)::text) || 'Manual '::text)
                    ELSE ''::text
                END), ';'::text ORDER BY r.visita), ''::text)) AS periodo6_tipo,
            ((COALESCE(string_agg(
                CASE
                    WHEN (pe.nroperiodo = 6) THEN r.comentariosrelpre
                    ELSE NULL::text
                END, ';'::text ORDER BY r.visita), ''::text) ||
                CASE
                    WHEN (COALESCE(string_agg(
                    CASE
                        WHEN (pe.nroperiodo = 6) THEN r.comentariosrelpre
                        ELSE NULL::text
                    END, ';'::text ORDER BY r.visita), ''::text) <> ''::text) THEN '/'::text
                    ELSE ''::text
                END) || min(
                CASE
                    WHEN (pe.nroperiodo = 6) THEN (((v.encuestador)::text || ':'::text) || (per.apellido)::text)
                    ELSE NULL::text
                END)) AS periodo6_enc
           FROM ((((((((cvp.calobs c
             LEFT JOIN ( SELECT (row_number() OVER (ORDER BY p.periodo))::integer AS nroperiodo,
                    p.periodo
                   FROM ( SELECT calculos.periodo
                           FROM cvp.calculos
                          WHERE (calculos.calculo = 0)
                          ORDER BY calculos.periodo DESC
                         LIMIT 6) p) pe ON (((c.periodo)::text = (pe.periodo)::text)))
             LEFT JOIN cvp.relpre r ON (((r.informante = c.informante) AND ((r.producto)::text = (c.producto)::text) AND ((r.periodo)::text = (c.periodo)::text) AND (r.observacion = c.observacion))))
             LEFT JOIN cvp.relvis v ON (((v.informante = r.informante) AND ((v.periodo)::text = (r.periodo)::text) AND (v.visita = r.visita) AND (v.formulario = r.formulario))))
             LEFT JOIN cvp.blapre bp ON (((r.informante = bp.informante) AND ((r.producto)::text = (bp.producto)::text) AND ((r.periodo)::text = (bp.periodo)::text) AND (r.observacion = bp.observacion) AND (r.visita = bp.visita))))
             LEFT JOIN ( SELECT blaatr.periodo,
                    blaatr.producto,
                    blaatr.informante,
                    blaatr.observacion,
                    blaatr.visita,
                    string_agg((blaatr.valor)::text, ','::text ORDER BY blaatr.atributo) AS valores
                   FROM cvp.blaatr
                  WHERE (blaatr.valor IS NOT NULL)
                  GROUP BY blaatr.periodo, blaatr.producto, blaatr.informante, blaatr.observacion, blaatr.visita) ba ON (((r.informante = ba.informante) AND ((r.producto)::text = (ba.producto)::text) AND ((r.periodo)::text = (ba.periodo)::text) AND (r.observacion = ba.observacion) AND (r.visita = ba.visita))))
             LEFT JOIN ( SELECT x_1.periodo,
                    x_1.producto,
                    x_1.informante,
                    x_1.observacion,
                    x_1.visita,
                    string_agg(((COALESCE(x_1.valor, ''::character varying))::text || (COALESCE(a.unidaddemedida, ''::character varying))::text), ';'::text ORDER BY x_1.atributo) AS valorprincipal
                   FROM ((cvp.relatr x_1
                     LEFT JOIN cvp.prodatr y ON ((((x_1.producto)::text = (y.producto)::text) AND (x_1.atributo = y.atributo))))
                     LEFT JOIN cvp.atributos a ON ((y.atributo = a.atributo)))
                  WHERE ((y.esprincipal)::text = 'S'::text)
                  GROUP BY x_1.periodo, x_1.producto, x_1.informante, x_1.observacion, x_1.visita) pat ON (((r.informante = pat.informante) AND ((r.producto)::text = (pat.producto)::text) AND ((r.periodo)::text = (pat.periodo)::text) AND (r.observacion = pat.observacion) AND (r.visita = pat.visita))))
             LEFT JOIN cvp.personal per ON (((v.encuestador)::text = (per.persona)::text)))
             LEFT JOIN cvp.novobs o ON ((((c.periodo)::text = (o.periodo)::text) AND (c.calculo = o.calculo) AND ((c.producto)::text = (o.producto)::text) AND (c.informante = o.informante) AND (c.observacion = o.observacion)))),
            cvp.revisor_parametros rr
          WHERE ((c.calculo = 0) AND ((rr.versionexigida <= 'V170111'::text) AND (rr.versionbase >= 'V130417'::text)))
          GROUP BY c.producto, c.division, c.informante, c.observacion) x
  ORDER BY x.producto, x.division, x.informante, x.observacion;


--
-- Name: rubfor; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.rubfor (
    formulario integer NOT NULL,
    rubro integer NOT NULL
);


--
-- Name: selprod; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.selprod (
    producto character varying(8) NOT NULL,
    sel_nro integer NOT NULL,
    descripcion character varying(500),
    rubro character varying(50),
    proveedor character varying(250),
    cantidad character varying(50),
    observaciones character varying(250),
    especificacion character varying(250),
    valordesde double precision,
    valorhasta double precision,
    excluir character varying(250),
    CONSTRAINT "texto invalido en cantidad de tabla selprod" CHECK (comun.cadena_valida((cantidad)::text, 'extendido'::text)),
    CONSTRAINT "texto invalido en descripcion de tabla selprod" CHECK (comun.cadena_valida((descripcion)::text, 'castellano'::text)),
    CONSTRAINT "texto invalido en especificacion de tabla selprod" CHECK (comun.cadena_valida((especificacion)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en excluir de tabla selprod" CHECK (comun.cadena_valida((excluir)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en observaciones de tabla selprod" CHECK (comun.cadena_valida((observaciones)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en proveedor de tabla selprod" CHECK (comun.cadena_valida((proveedor)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en rubro de tabla selprod" CHECK (comun.cadena_valida((rubro)::text, 'castellano'::text))
);


--
-- Name: selprodatr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.selprodatr (
    producto character varying(8) NOT NULL,
    sel_nro integer NOT NULL,
    atributo integer NOT NULL,
    valor character varying(250),
    valorsinsimplificar character varying(250),
    CONSTRAINT "texto invalido en valor de tabla selprodatr" CHECK (comun.cadena_valida((valor)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en valorsinsimplificar de tabla selprodatr" CHECK (comun.cadena_valida((valorsinsimplificar)::text, 'amplio'::text))
);


--
-- Name: tipoinf; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.tipoinf (
    tipoinformante character varying(1) NOT NULL,
    otrotipoinformante character varying(1) NOT NULL,
    nombretipoinformante character varying(30),
    CONSTRAINT "texto invalido en nombretipoinformante de tabla tipoinf" CHECK (comun.cadena_valida((nombretipoinformante)::text, 'castellano'::text))
);


--
-- Name: tokens; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.tokens (
    token text NOT NULL,
    date timestamp without time zone NOT NULL,
    username text NOT NULL,
    useragent jsonb NOT NULL,
    CONSTRAINT "token<>''" CHECK ((token <> ''::text)),
    CONSTRAINT "username<>''" CHECK ((username <> ''::text))
);


--
-- Name: transf_info; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.transf_info (
    operativo text NOT NULL,
    agrupacion text NOT NULL,
    grupo text NOT NULL
);


--
-- Name: transf_data; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.transf_data AS
 SELECT c.periodo,
    c.agrupacion,
    c.grupo,
    round((c.valorgru)::numeric, 2) AS valorgruredondeado,
    round((c.valorgrupromedio)::numeric, 2) AS valorgrupromedioredondeado
   FROM ((cvp.calgru_promedios c
     JOIN cvp.transf_info t ON (((t.operativo = 'val_can'::text) AND ((c.agrupacion)::text = t.agrupacion) AND ((c.grupo)::text = t.grupo))))
     JOIN cvp.calculos cal ON (((cal.calculo = c.calculo) AND ((cal.periodo)::text = (c.periodo)::text) AND ((cal.transmitir_canastas)::text = 'S'::text))))
  ORDER BY c.periodo, c.agrupacion, c.grupo, (round((c.valorgru)::numeric, 2)), (round((c.valorgrupromedio)::numeric, 2));


--
-- Name: transf_data_orig; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.transf_data_orig AS
 SELECT c.periodo,
    c.agrupacion,
    c.grupo,
    round((c.valorgru)::numeric, 2) AS valorgruredondeado
   FROM ((cvp.calgru c
     JOIN cvp.transf_info t ON (((t.operativo = 'val_can'::text) AND ((c.agrupacion)::text = t.agrupacion) AND ((c.grupo)::text = t.grupo))))
     JOIN cvp.calculos cal ON (((cal.calculo = c.calculo) AND ((cal.periodo)::text = (c.periodo)::text) AND ((cal.transmitir_canastas)::text = 'S'::text))))
  ORDER BY c.periodo, c.agrupacion, c.grupo, (round((c.valorgru)::numeric, 2));


--
-- Name: unidades; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.unidades (
    unidad character varying(25) NOT NULL,
    magnitud character varying(12) NOT NULL,
    factor double precision,
    morfologia character varying(20),
    abreviaturaestandar character varying(20),
    CONSTRAINT "texto invalido en abreviaturaestandar de tabla unidades" CHECK (comun.cadena_valida((abreviaturaestandar)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en magnitud de tabla unidades" CHECK (comun.cadena_valida((magnitud)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en morfologia de tabla unidades" CHECK (comun.cadena_valida((morfologia)::text, 'amplio'::text)),
    CONSTRAINT "texto invalido en unidad de tabla unidades" CHECK (comun.cadena_valida((unidad)::text, 'castellano'::text))
);


--
-- Name: users; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.users (
    username text NOT NULL,
    md5pass text,
    active_until date,
    locked_since date,
    rol text
);


--
-- Name: valorizacion_canasta; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.valorizacion_canasta AS
 SELECT h.periodo,
    h.calculo,
    h.hogar,
    h.agrupacion,
    h.grupo,
    h.valorhoggru,
    c.nivel,
    c.grupopadre,
    substr((h.grupo)::text, 1, 2) AS grupo_n2
   FROM (cvp.calgru c
     JOIN cvp.calhoggru h ON ((((c.periodo)::text = (h.periodo)::text) AND (c.calculo = h.calculo) AND ((c.agrupacion)::text = (h.agrupacion)::text) AND ((c.grupo)::text = (h.grupo)::text))))
  WHERE (((c.nivel = 2) AND ((c.grupopadre)::text <> 'A1'::text) AND ((h.grupo)::text <> ALL (ARRAY['B11'::text, 'D11'::text]))) OR ((c.nivel = 3) AND ((c.grupopadre)::text = ANY (ARRAY[('B11'::character varying)::text, ('D11'::character varying)::text]))))
UNION
 SELECT calhogsubtotales.periodo,
    calhogsubtotales.calculo,
    calhogsubtotales.hogar,
    calhogsubtotales.agrupacion,
    calhogsubtotales.grupo,
    calhogsubtotales.valorhogsub AS valorhoggru,
    NULL::integer AS nivel,
    NULL::character varying AS grupopadre,
    substr((calhogsubtotales.grupo)::text, 1, 2) AS grupo_n2
   FROM cvp.calhogsubtotales
  ORDER BY 9, 7 DESC, 5;


--
-- Name: valorizacion_canasta_cuadros; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.valorizacion_canasta_cuadros AS
 SELECT v.periodo,
    v.calculo,
    v.hogar,
    v.agrupacion,
        CASE
            WHEN ((v.grupo)::text = 'B118'::text) THEN 'B117'::character varying
            WHEN ((v.grupo)::text = 'B119'::text) THEN 'B118'::character varying
            ELSE v.grupo
        END AS grupo,
    sum(v.valorhoggru) AS valorhoggru,
    COALESCE(v.nivel, 1) AS nivel,
    v.grupopadre,
    v.grupo_n2,
        CASE
            WHEN (((g.nombregrupo)::text ~~ 'Bebidas%'::text) AND ((v.agrupacion)::text <> 'D'::text)) THEN 'Bebidas'::character varying
            ELSE g.nombregrupo
        END AS nombregrupo,
    g.nombrecanasta
   FROM (cvp.valorizacion_canasta v
     LEFT JOIN cvp.grupos g ON ((((v.agrupacion)::text = (g.agrupacion)::text) AND ((v.grupo)::text = (g.grupo)::text))))
  GROUP BY v.periodo, v.calculo, v.hogar, v.agrupacion,
        CASE
            WHEN ((v.grupo)::text = 'B118'::text) THEN 'B117'::character varying
            WHEN ((v.grupo)::text = 'B119'::text) THEN 'B118'::character varying
            ELSE v.grupo
        END, COALESCE(v.nivel, 1), v.grupopadre, v.grupo_n2,
        CASE
            WHEN (((g.nombregrupo)::text ~~ 'Bebidas%'::text) AND ((v.agrupacion)::text <> 'D'::text)) THEN 'Bebidas'::character varying
            ELSE g.nombregrupo
        END, g.nombrecanasta;


--
-- Name: valvalatr; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.valvalatr (
    producto character varying(8) NOT NULL,
    atributo integer NOT NULL,
    valor character varying(250) NOT NULL,
    validar boolean DEFAULT true NOT NULL,
    ponderadoratr double precision,
    CONSTRAINT "El valor del campo validar debe ser siempre TRUE" CHECK (validar),
    CONSTRAINT "texto invalido en valor de tabla valvalatr" CHECK (comun.cadena_valida((valor)::text, 'amplio'::text))
);


--
-- Name: variaciones_maximas_vw; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.variaciones_maximas_vw AS
 SELECT a.periodo,
    a.producto,
    a.nombreproducto,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 1) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 1))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion1,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 2) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 2))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion2,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 3) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 3))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion3,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 4) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 4))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion4,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 5) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 5))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion5,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 6) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 6))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion6,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 7) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 7))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion7,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 8) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 8))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion8,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 9) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 9))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion9,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 10) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 10))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion10,
    NULLIF(split_part(m.informantes, ';'::text, 1), ''::text) AS informantes1,
    NULLIF(split_part(m.informantes, ';'::text, 2), ''::text) AS informantes2,
    NULLIF(split_part(m.informantes, ';'::text, 3), ''::text) AS informantes3,
    NULLIF(split_part(m.informantes, ';'::text, 4), ''::text) AS informantes4,
    NULLIF(split_part(m.informantes, ';'::text, 5), ''::text) AS informantes5,
    NULLIF(split_part(m.informantes, ';'::text, 6), ''::text) AS informantes6,
    NULLIF(split_part(m.informantes, ';'::text, 7), ''::text) AS informantes7,
    NULLIF(split_part(m.informantes, ';'::text, 8), ''::text) AS informantes8,
    NULLIF(split_part(m.informantes, ';'::text, 9), ''::text) AS informantes9,
    NULLIF(split_part(m.informantes, ';'::text, 10), ''::text) AS informantes10
   FROM (( SELECT pe.periodo,
            pr.producto,
            pr.nombreproducto
           FROM (( SELECT periodos.periodo
                   FROM cvp.periodos
                  ORDER BY periodos.periodo DESC
                 LIMIT 12) pe
             JOIN ( SELECT productos.producto,
                    productos.nombreproducto
                   FROM cvp.productos
                  WHERE ((productos.nombreproducto)::text !~~ '%orrar%'::text)) pr ON (true))) a
     LEFT JOIN cvp.periodo_maximas_variaciones(10) m(periodo, producto, nombreproducto, variaciones, informantes) ON ((((a.periodo)::text = (m.periodo)::text) AND ((a.producto)::text = (m.producto)::text) AND ((a.nombreproducto)::text = (m.nombreproducto)::text))))
  ORDER BY a.periodo, a.producto, a.nombreproducto;


--
-- Name: variaciones_minimas_vw; Type: VIEW; Schema: cvp; Owner: -
--

CREATE VIEW cvp.variaciones_minimas_vw AS
 SELECT a.periodo,
    a.producto,
    a.nombreproducto,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 1) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 1))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion1,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 2) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 2))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion2,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 3) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 3))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion3,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 4) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 4))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion4,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 5) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 5))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion5,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 6) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 6))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion6,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 7) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 7))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion7,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 8) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 8))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion8,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 9) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 9))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion9,
        CASE
            WHEN (split_part(m.variaciones, '|'::text, 10) <> ''::text) THEN round((split_part(m.variaciones, '|'::text, 10))::numeric, 2)
            ELSE NULL::numeric
        END AS variacion10,
    NULLIF(split_part(m.informantes, ';'::text, 1), ''::text) AS informantes1,
    NULLIF(split_part(m.informantes, ';'::text, 2), ''::text) AS informantes2,
    NULLIF(split_part(m.informantes, ';'::text, 3), ''::text) AS informantes3,
    NULLIF(split_part(m.informantes, ';'::text, 4), ''::text) AS informantes4,
    NULLIF(split_part(m.informantes, ';'::text, 5), ''::text) AS informantes5,
    NULLIF(split_part(m.informantes, ';'::text, 6), ''::text) AS informantes6,
    NULLIF(split_part(m.informantes, ';'::text, 7), ''::text) AS informantes7,
    NULLIF(split_part(m.informantes, ';'::text, 8), ''::text) AS informantes8,
    NULLIF(split_part(m.informantes, ';'::text, 9), ''::text) AS informantes9,
    NULLIF(split_part(m.informantes, ';'::text, 10), ''::text) AS informantes10
   FROM (( SELECT pe.periodo,
            pr.producto,
            pr.nombreproducto
           FROM (( SELECT periodos.periodo
                   FROM cvp.periodos
                  ORDER BY periodos.periodo DESC
                 LIMIT 12) pe
             JOIN ( SELECT productos.producto,
                    productos.nombreproducto
                   FROM cvp.productos
                  WHERE ((productos.nombreproducto)::text !~~ '%orrar%'::text)) pr ON (true))) a
     LEFT JOIN cvp.periodo_minimas_variaciones(10) m(periodo, producto, nombreproducto, variaciones, informantes) ON ((((a.periodo)::text = (m.periodo)::text) AND ((a.producto)::text = (m.producto)::text) AND ((a.nombreproducto)::text = (m.nombreproducto)::text))))
  ORDER BY a.periodo, a.producto, a.nombreproducto;


--
-- Name: variedades; Type: TABLE; Schema: cvp; Owner: -
--

CREATE TABLE cvp.variedades (
    producto character varying(8) NOT NULL,
    especificacion integer NOT NULL,
    variedad integer NOT NULL,
    nombrevariedad character varying(250),
    tamanno double precision,
    unidad character varying(250),
    codigovariedad character varying(12),
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


--
-- Name: his_campos_cvp; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.his_campos_cvp (
    esquema text NOT NULL,
    tabla text NOT NULL,
    campo text NOT NULL,
    operacion character varying(1) NOT NULL,
    momento timestamp without time zone DEFAULT statement_timestamp() NOT NULL,
    usuario text DEFAULT "session_user"(),
    concated_pk text NOT NULL,
    change_value text,
    old_text text,
    new_text text,
    old_number double precision,
    new_number double precision,
    old_datetime timestamp without time zone,
    new_datetime timestamp without time zone,
    old_bool boolean,
    new_bool boolean,
    pk_number_1 double precision,
    pk_text_1 text,
    pk_number_2 double precision,
    pk_text_2 text,
    pk_number_3 double precision,
    pk_text_3 text,
    pk_number_4 double precision,
    pk_text_4 text,
    pk_number_5 double precision,
    pk_text_5 text,
    pk_number_6 double precision,
    pk_text_6 text,
    pk_bool_1 boolean
);


--
-- Name: modificaciones; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.modificaciones (
    mdf_mdf integer NOT NULL,
    mdf_tabla character varying(50) NOT NULL,
    mdf_operacion character varying(1) NOT NULL,
    mdf_pk character varying(2000) NOT NULL,
    mdf_campo character varying(2000) NOT NULL,
    mdf_actual text,
    mdf_anterior text,
    mdf_tlg bigint
);


--
-- Name: modificaciones_mdf_mdf_seq; Type: SEQUENCE; Schema: his; Owner: -
--

CREATE SEQUENCE his.modificaciones_mdf_mdf_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: modificaciones_mdf_mdf_seq; Type: SEQUENCE OWNED BY; Schema: his; Owner: -
--

ALTER SEQUENCE his.modificaciones_mdf_mdf_seq OWNED BY his.modificaciones.mdf_mdf;


SET default_with_oids = true;

--
-- Name: novespinf; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.novespinf (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    especificacion integer NOT NULL,
    informante integer NOT NULL,
    estado character varying(18),
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


--
-- Name: novobs; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.novobs (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    informante integer NOT NULL,
    observacion integer NOT NULL,
    estado character varying(18),
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    usuario character varying(30),
    revisar_recep boolean DEFAULT false,
    comentarios text,
    comentarios_recep text
);


SET default_with_oids = false;

--
-- Name: novpre; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.novpre (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    visita integer DEFAULT 1 NOT NULL,
    confirma boolean DEFAULT true NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentarios character varying(200),
    usuario character varying(30),
    revisar_recep boolean DEFAULT false,
    comentarios_recep text
);


SET default_with_oids = true;

--
-- Name: novprod; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.novprod (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    calculo integer NOT NULL,
    producto character varying(8) NOT NULL,
    promedioext double precision NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    variacion double precision
);


SET default_with_oids = false;

--
-- Name: prerep; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.prerep (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    informante integer NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


--
-- Name: productos_activos; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.productos_activos (
    producto character varying(8)
);


SET default_with_oids = true;

--
-- Name: relatr; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.relatr (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    atributo integer NOT NULL,
    valor character varying(250),
    visita integer DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    validar_con_valvalatr boolean
);


SET default_with_oids = false;

--
-- Name: relenc; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.relenc (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(10) NOT NULL,
    panel integer NOT NULL,
    tarea integer NOT NULL,
    encuestador character varying(10) NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


--
-- Name: relinf; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.relinf (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    informante integer NOT NULL,
    visita integer NOT NULL,
    observaciones text,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    panel integer,
    tarea integer
);


--
-- Name: relmon; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.relmon (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    moneda character varying(10) NOT NULL,
    valor_pesos double precision,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


SET default_with_oids = true;

--
-- Name: relpan; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.relpan (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(10) NOT NULL,
    panel integer NOT NULL,
    fechasalida date,
    fechageneracionpanel timestamp without time zone,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    periodoparapanelrotativo character varying(11),
    generacionsupervisiones timestamp without time zone
);


--
-- Name: relpre; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.relpre (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    producto character varying(8) NOT NULL,
    observacion integer NOT NULL,
    informante integer NOT NULL,
    formulario integer NOT NULL,
    precio double precision,
    tipoprecio character varying(10),
    visita integer DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentariosrelpre text,
    cambio character varying(1),
    precionormalizado double precision,
    especificacion integer,
    ultima_visita boolean,
    observaciones text,
    esvisiblecomentarioendm boolean DEFAULT false
);


SET default_with_oids = false;

--
-- Name: relsup; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.relsup (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(10) NOT NULL,
    panel integer NOT NULL,
    supervisor character varying(10) NOT NULL,
    disponible cvp.sino_dom,
    motivonodisponible character varying(200),
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1)
);


--
-- Name: reltar; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.reltar (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    panel integer NOT NULL,
    tarea integer NOT NULL,
    supervisor character varying(10),
    encuestador character varying(10),
    realizada cvp.sino_dom,
    resultado text,
    observaciones text,
    puntos integer,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    cargado timestamp without time zone,
    descargado timestamp without time zone,
    vencimiento_sincronizacion timestamp without time zone,
    id_instalacion integer
);


SET default_with_oids = true;

--
-- Name: relvis; Type: TABLE; Schema: his; Owner: -
--

CREATE TABLE his.relvis (
    nue_usu character varying(30),
    nue_ope character varying(1),
    periodo character varying(11) NOT NULL,
    informante integer NOT NULL,
    formulario integer NOT NULL,
    panel integer NOT NULL,
    tarea integer NOT NULL,
    fechasalida date,
    fechaingreso date,
    ingresador character varying(250),
    razon integer,
    fechageneracion timestamp without time zone,
    visita integer DEFAULT 1 NOT NULL,
    ultimavisita integer DEFAULT 1 NOT NULL,
    modi_usu character varying(30),
    modi_fec timestamp without time zone,
    modi_ope character varying(1),
    comentarios character varying(1000),
    encuestador character varying(10),
    supervisor character varying(10),
    recepcionista character varying(10),
    informantereemplazante integer,
    ultima_visita boolean,
    verificado_rec cvp.sino_dom DEFAULT 'N'::character varying
);


--
-- Name: conjuntomuestral conjuntomuestral; Type: DEFAULT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.conjuntomuestral ALTER COLUMN conjuntomuestral SET DEFAULT nextval('cvp.conjuntomuestral_conjuntomuestral_seq'::regclass);


--
-- Name: modificaciones mdf_mdf; Type: DEFAULT; Schema: his; Owner: -
--

ALTER TABLE ONLY his.modificaciones ALTER COLUMN mdf_mdf SET DEFAULT nextval('his.modificaciones_mdf_mdf_seq'::regclass);


--
-- Name: proddiv Puede existir solo una division sin tipo de informante; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.proddiv
    ADD CONSTRAINT "Puede existir solo una division sin tipo de informante" UNIQUE (producto, sindividir);


--
-- Name: agrupaciones agrupaciones_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.agrupaciones
    ADD CONSTRAINT agrupaciones_pkey PRIMARY KEY (agrupacion);


--
-- Name: atributos atributos_es_vigencia_key; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.atributos
    ADD CONSTRAINT atributos_es_vigencia_key UNIQUE (es_vigencia);


--
-- Name: atributos atributos_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.atributos
    ADD CONSTRAINT atributos_pkey PRIMARY KEY (atributo);


--
-- Name: blaatr blaatr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blaatr
    ADD CONSTRAINT blaatr_pkey PRIMARY KEY (periodo, producto, observacion, informante, visita, atributo);


--
-- Name: blapre blapre_periodo_producto_observacion_informante_ultima_visit_key; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blapre
    ADD CONSTRAINT blapre_periodo_producto_observacion_informante_ultima_visit_key UNIQUE (periodo, producto, observacion, informante, ultima_visita);


--
-- Name: blapre blapre_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blapre
    ADD CONSTRAINT blapre_pkey PRIMARY KEY (periodo, producto, observacion, informante, visita);


--
-- Name: cal_mensajes cal_mensajes_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.cal_mensajes
    ADD CONSTRAINT cal_mensajes_pkey PRIMARY KEY (periodo, calculo, corrida, paso, renglon);


--
-- Name: calbase_div calbase_div_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_div
    ADD CONSTRAINT calbase_div_pkey PRIMARY KEY (producto, calculo, division);


--
-- Name: calbase_obs calbase_obs_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_obs
    ADD CONSTRAINT calbase_obs_pkey PRIMARY KEY (calculo, producto, informante, observacion);


--
-- Name: calbase_prod calbase_prod_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_prod
    ADD CONSTRAINT calbase_prod_pkey PRIMARY KEY (producto, calculo);


--
-- Name: calculos_def calculos_def_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos_def
    ADD CONSTRAINT calculos_def_pkey PRIMARY KEY (calculo);


--
-- Name: calculos_def calculos_def_principal_key; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos_def
    ADD CONSTRAINT calculos_def_principal_key UNIQUE (principal);


--
-- Name: calculos calculos_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos
    ADD CONSTRAINT calculos_pkey PRIMARY KEY (periodo, calculo);


--
-- Name: calgru calgru_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calgru
    ADD CONSTRAINT calgru_pkey PRIMARY KEY (periodo, calculo, agrupacion, grupo);


--
-- Name: calhoggru calhoggru_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhoggru
    ADD CONSTRAINT calhoggru_pkey PRIMARY KEY (periodo, calculo, hogar, agrupacion, grupo);


--
-- Name: calhogsubtotales calhogsubtotales_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhogsubtotales
    ADD CONSTRAINT calhogsubtotales_pkey PRIMARY KEY (periodo, calculo, hogar, agrupacion, grupo);


--
-- Name: calobs calobs_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calobs
    ADD CONSTRAINT calobs_pkey PRIMARY KEY (periodo, calculo, producto, informante, observacion);


--
-- Name: calprod calprod_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprod
    ADD CONSTRAINT calprod_pkey PRIMARY KEY (periodo, calculo, producto);


--
-- Name: calprodagr calprodagr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodagr
    ADD CONSTRAINT calprodagr_pkey PRIMARY KEY (periodo, calculo, producto, agrupacion);


--
-- Name: calprodresp calprodresp_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodresp
    ADD CONSTRAINT calprodresp_pkey PRIMARY KEY (periodo, calculo, producto);


--
-- Name: caldiv caltipoinf_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.caldiv
    ADD CONSTRAINT caltipoinf_pkey PRIMARY KEY (periodo, calculo, producto, division);


--
-- Name: conjuntomuestral conjuntomuestral_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.conjuntomuestral
    ADD CONSTRAINT conjuntomuestral_pkey PRIMARY KEY (conjuntomuestral);


--
-- Name: cuadros_funciones cuadros_funciones_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.cuadros_funciones
    ADD CONSTRAINT cuadros_funciones_pkey PRIMARY KEY (funcion);


--
-- Name: cuadros cuadros_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.cuadros
    ADD CONSTRAINT cuadros_pkey PRIMARY KEY (cuadro);


--
-- Name: cuagru cuagru_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.cuagru
    ADD CONSTRAINT cuagru_pkey PRIMARY KEY (cuadro, agrupacion, grupo);


--
-- Name: dicprodatr dicprodatr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.dicprodatr
    ADD CONSTRAINT dicprodatr_pkey PRIMARY KEY (producto, atributo, origen);


--
-- Name: divisiones divisiones_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.divisiones
    ADD CONSTRAINT divisiones_pkey PRIMARY KEY (division);


--
-- Name: divisiones divisiones_sindividir_key; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.divisiones
    ADD CONSTRAINT divisiones_sindividir_key UNIQUE (sindividir);


--
-- Name: especificaciones especificaciones_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.especificaciones
    ADD CONSTRAINT especificaciones_pkey PRIMARY KEY (producto, especificacion);


--
-- Name: forinf forinf_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.forinf
    ADD CONSTRAINT forinf_pkey PRIMARY KEY (formulario, informante);


--
-- Name: formularios formularios_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.formularios
    ADD CONSTRAINT formularios_pkey PRIMARY KEY (formulario);


--
-- Name: formulariosimportados formulariosimportados_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.formulariosimportados
    ADD CONSTRAINT formulariosimportados_pkey PRIMARY KEY (ano, mes, informante, producto, observacion, atributo);


--
-- Name: forprod forprod_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.forprod
    ADD CONSTRAINT forprod_pkey PRIMARY KEY (formulario, producto);


--
-- Name: grupos grupos_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.grupos
    ADD CONSTRAINT grupos_pkey PRIMARY KEY (agrupacion, grupo);


--
-- Name: divisiones hay una division por cada combinacion de tipos de informante in; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.divisiones
    ADD CONSTRAINT "hay una division por cada combinacion de tipos de informante in" UNIQUE (incluye_supermercados, incluye_tradicionales);


--
-- Name: hogares hogares_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.hogares
    ADD CONSTRAINT hogares_pkey PRIMARY KEY (hogar);


--
-- Name: hogparagr hogparagr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.hogparagr
    ADD CONSTRAINT hogparagr_pkey PRIMARY KEY (parametro, hogar, agrupacion);


--
-- Name: infoextvalor infoext_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.infoextvalor
    ADD CONSTRAINT infoext_pkey PRIMARY KEY (periodo, calculo, producto);


--
-- Name: infoextprod infoextprod_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.infoextprod
    ADD CONSTRAINT infoextprod_pkey PRIMARY KEY (producto);


--
-- Name: informantes informantes_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.informantes
    ADD CONSTRAINT informantes_pkey PRIMARY KEY (informante);


--
-- Name: infreemp infreemp_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.infreemp
    ADD CONSTRAINT infreemp_pkey PRIMARY KEY (id_informante_reemplazante);


--
-- Name: instalaciones instalaciones_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.instalaciones
    ADD CONSTRAINT instalaciones_pkey PRIMARY KEY (id_instalacion);


--
-- Name: locks locks_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.locks
    ADD CONSTRAINT locks_pkey PRIMARY KEY (table_name, record_pk);


--
-- Name: magnitudes magnitudes_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.magnitudes
    ADD CONSTRAINT magnitudes_pkey PRIMARY KEY (magnitud);


--
-- Name: modulos modulos_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.modulos
    ADD CONSTRAINT modulos_pkey PRIMARY KEY (formulario, zona, nombre);


--
-- Name: modulosusuarios modulosusuarios_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.modulosusuarios
    ADD CONSTRAINT modulosusuarios_pkey PRIMARY KEY (formulario, zona, nombre, username);


--
-- Name: monedas monedas_es_nacional_key; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.monedas
    ADD CONSTRAINT monedas_es_nacional_key UNIQUE (es_nacional);


--
-- Name: monedas monedas_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.monedas
    ADD CONSTRAINT monedas_pkey PRIMARY KEY (moneda);


--
-- Name: muestras muestras_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.muestras
    ADD CONSTRAINT muestras_pkey PRIMARY KEY (muestra);


--
-- Name: novdelobs novdelobs_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novdelobs
    ADD CONSTRAINT novdelobs_pkey PRIMARY KEY (periodo, producto, observacion, informante, visita);


--
-- Name: novdelvis novdelvis_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novdelvis
    ADD CONSTRAINT novdelvis_pkey PRIMARY KEY (periodo, informante, visita, formulario);


--
-- Name: novespinf novespinf_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novespinf
    ADD CONSTRAINT novespinf_pkey PRIMARY KEY (periodo, calculo, producto, especificacion, informante);


--
-- Name: novext novext_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novext
    ADD CONSTRAINT novext_pkey PRIMARY KEY (periodo, calculo, producto);


--
-- Name: novobs_base novobs_base_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novobs_base
    ADD CONSTRAINT novobs_base_pkey PRIMARY KEY (producto, informante, observacion);


--
-- Name: novobs novobs_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novobs
    ADD CONSTRAINT novobs_pkey PRIMARY KEY (periodo, calculo, producto, informante, observacion);


--
-- Name: novpre novpre_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novpre
    ADD CONSTRAINT novpre_pkey PRIMARY KEY (periodo, producto, observacion, informante, visita);


--
-- Name: novprod novprod_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novprod
    ADD CONSTRAINT novprod_pkey PRIMARY KEY (periodo, calculo, producto);


--
-- Name: numeros numeros_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.numeros
    ADD CONSTRAINT numeros_pkey PRIMARY KEY (numero);


--
-- Name: pantar pantar_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pantar
    ADD CONSTRAINT pantar_pkey PRIMARY KEY (panel, tarea);


--
-- Name: pantar pantar_tarea_key; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pantar
    ADD CONSTRAINT pantar_tarea_key UNIQUE (tarea, grupozonal, panel2009);


--
-- Name: parametros parametros_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.parametros
    ADD CONSTRAINT parametros_pkey PRIMARY KEY (unicoregistro);


--
-- Name: parhog parhog_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.parhog
    ADD CONSTRAINT parhog_pkey PRIMARY KEY (parametro);


--
-- Name: parhoggru parhoggru_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.parhoggru
    ADD CONSTRAINT parhoggru_pkey PRIMARY KEY (parametro, agrupacion, grupo);


--
-- Name: pasoatraves pasoatraves_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pasoatraves
    ADD CONSTRAINT pasoatraves_pkey PRIMARY KEY (unicoregistro);


--
-- Name: pb_calculos_reglas pb_calculos_reglas_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pb_calculos_reglas
    ADD CONSTRAINT pb_calculos_reglas_pkey PRIMARY KEY (calculo, tipo_regla, num_regla);


--
-- Name: pb_externos pb_externos_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pb_externos
    ADD CONSTRAINT pb_externos_pkey PRIMARY KEY (producto, periodo);


--
-- Name: periodos periodos_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.periodos
    ADD CONSTRAINT periodos_pkey PRIMARY KEY (periodo);


--
-- Name: personal persona_pk; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.personal
    ADD CONSTRAINT persona_pk PRIMARY KEY (persona);


--
-- Name: personal personal_username_uk; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.personal
    ADD CONSTRAINT personal_username_uk UNIQUE (username);


--
-- Name: prerep prerep_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prerep
    ADD CONSTRAINT prerep_pkey PRIMARY KEY (periodo, producto, informante);


--
-- Name: prodagr prodagr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodagr
    ADD CONSTRAINT prodagr_pkey PRIMARY KEY (producto, agrupacion);


--
-- Name: prodatr prodatr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodatr
    ADD CONSTRAINT prodatr_pkey PRIMARY KEY (producto, atributo);


--
-- Name: prodatrval prodatrval_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodatrval
    ADD CONSTRAINT prodatrval_pkey PRIMARY KEY (producto, atributo, valor);


--
-- Name: proddiv proddiv_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.proddiv
    ADD CONSTRAINT proddiv_pkey PRIMARY KEY (producto, division);


--
-- Name: proddivestimac proddivestimac_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.proddivestimac
    ADD CONSTRAINT proddivestimac_pkey PRIMARY KEY (producto, division, estimacion);


--
-- Name: productos productos_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.productos
    ADD CONSTRAINT productos_pkey PRIMARY KEY (producto);


--
-- Name: razones razones_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.razones
    ADD CONSTRAINT razones_pkey PRIMARY KEY (razon);


--
-- Name: divisiones redundancia para garantizar la exclusion de divisiones no compa; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.divisiones
    ADD CONSTRAINT "redundancia para garantizar la exclusion de divisiones no compa" UNIQUE (division, incluye_supermercados, incluye_tradicionales);


--
-- Name: relatr relatr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relatr
    ADD CONSTRAINT relatr_pkey PRIMARY KEY (periodo, producto, observacion, informante, visita, atributo);


--
-- Name: relenc relenc_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relenc
    ADD CONSTRAINT relenc_pkey PRIMARY KEY (periodo, panel, tarea);


--
-- Name: relinf relinf_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relinf
    ADD CONSTRAINT relinf_pkey PRIMARY KEY (periodo, informante, visita, panel, tarea);


--
-- Name: relmon relmon_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relmon
    ADD CONSTRAINT relmon_pkey PRIMARY KEY (periodo, moneda);


--
-- Name: relpan relpan_pk; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpan
    ADD CONSTRAINT relpan_pk PRIMARY KEY (periodo, panel);


--
-- Name: relpre relpre_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpre
    ADD CONSTRAINT relpre_pkey PRIMARY KEY (periodo, producto, observacion, informante, visita);


--
-- Name: relpre relpre_ukey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpre
    ADD CONSTRAINT relpre_ukey UNIQUE (periodo, producto, observacion, informante, ultima_visita);


--
-- Name: relpresemaforo relpresemaforo_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpresemaforo
    ADD CONSTRAINT relpresemaforo_pkey PRIMARY KEY (periodo, producto, observacion, informante, visita);


--
-- Name: relsup relsup_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relsup
    ADD CONSTRAINT relsup_pkey PRIMARY KEY (periodo, panel, supervisor);


--
-- Name: reltar reltar_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.reltar
    ADD CONSTRAINT reltar_pkey PRIMARY KEY (periodo, panel, tarea);


--
-- Name: relvis relvis_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_pkey PRIMARY KEY (periodo, informante, visita, formulario);


--
-- Name: relvis relvis_ukey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_ukey UNIQUE (periodo, informante, formulario, ultima_visita);


--
-- Name: rubfor rubfor_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.rubfor
    ADD CONSTRAINT rubfor_pkey PRIMARY KEY (formulario, rubro);


--
-- Name: rubros rubros_pk; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.rubros
    ADD CONSTRAINT rubros_pk PRIMARY KEY (rubro);


--
-- Name: selprod selprod_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.selprod
    ADD CONSTRAINT selprod_pkey PRIMARY KEY (producto, sel_nro);


--
-- Name: selprodatr selprodatr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.selprodatr
    ADD CONSTRAINT selprodatr_pkey PRIMARY KEY (producto, sel_nro, atributo);


--
-- Name: tareas tarea_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.tareas
    ADD CONSTRAINT tarea_pkey PRIMARY KEY (tarea);


--
-- Name: tipoinf tipoinf_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.tipoinf
    ADD CONSTRAINT tipoinf_pkey PRIMARY KEY (tipoinformante);


--
-- Name: tipopre tipopre_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.tipopre
    ADD CONSTRAINT tipopre_pkey PRIMARY KEY (tipoprecio);


--
-- Name: tokens tokens_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.tokens
    ADD CONSTRAINT tokens_pkey PRIMARY KEY (token);


--
-- Name: transf_info transf_info_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.transf_info
    ADD CONSTRAINT transf_info_pkey PRIMARY KEY (operativo, agrupacion, grupo);


--
-- Name: proddiv unica division que incluye supermercados; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.proddiv
    ADD CONSTRAINT "unica division que incluye supermercados" UNIQUE (producto, incluye_supermercados);


--
-- Name: proddiv unica division que incluye tradicionales; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.proddiv
    ADD CONSTRAINT "unica division que incluye tradicionales" UNIQUE (producto, incluye_tradicionales);


--
-- Name: unidades unidades_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.unidades
    ADD CONSTRAINT unidades_pkey PRIMARY KEY (unidad);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (username);


--
-- Name: valvalatr valvalatr_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.valvalatr
    ADD CONSTRAINT valvalatr_pkey PRIMARY KEY (producto, atributo, valor);


--
-- Name: valvalatr valvalatr_uk; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.valvalatr
    ADD CONSTRAINT valvalatr_uk UNIQUE (producto, atributo, valor, validar);


--
-- Name: variedades variedades_pkey; Type: CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.variedades
    ADD CONSTRAINT variedades_pkey PRIMARY KEY (producto, especificacion, variedad);


--
-- Name: his_campos_cvp his_campos_cvp_pkey; Type: CONSTRAINT; Schema: his; Owner: -
--

ALTER TABLE ONLY his.his_campos_cvp
    ADD CONSTRAINT his_campos_cvp_pkey PRIMARY KEY (esquema, tabla, campo, momento, operacion, concated_pk);


--
-- Name: modificaciones modificaciones_pkey; Type: CONSTRAINT; Schema: his; Owner: -
--

ALTER TABLE ONLY his.modificaciones
    ADD CONSTRAINT modificaciones_pkey PRIMARY KEY (mdf_mdf);


--
-- Name: blaatr_producto_observacion_informante_atr_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX blaatr_producto_observacion_informante_atr_idx ON cvp.blaatr USING btree (producto, observacion, informante, atributo);


--
-- Name: blapre_producto_observacion_informante_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX blapre_producto_observacion_informante_idx ON cvp.blapre USING btree (producto, observacion, informante);


--
-- Name: blapre_relvis_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX blapre_relvis_idx ON cvp.blapre USING btree (informante, periodo, formulario, visita);


--
-- Name: calculos_ant_i; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX calculos_ant_i ON cvp.calculos USING btree (periodoanterior, calculo);


--
-- Name: calobs_producto_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX calobs_producto_idx ON cvp.calobs USING btree (producto);


--
-- Name: encuestador 4 instalaciones IDX; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX "encuestador 4 instalaciones IDX" ON cvp.instalaciones USING btree (encuestador);


--
-- Name: encuestador_i; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX encuestador_i ON cvp.tareas USING btree (encuestador);


--
-- Name: fki_periodo_ant; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX fki_periodo_ant ON cvp.periodos USING btree (periodoanterior);


--
-- Name: grupos_ag_padres_i; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX grupos_ag_padres_i ON cvp.grupos USING btree (agrupacion, grupo, grupopadre);


--
-- Name: grupos_nivel_i; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX grupos_nivel_i ON cvp.grupos USING btree (nivel);


--
-- Name: grupos_padres_i; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX grupos_padres_i ON cvp.grupos USING btree (agrupacion, grupopadre);


--
-- Name: prodatr_normalizable_valornormal_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX prodatr_normalizable_valornormal_idx ON cvp.prodatr USING btree (normalizable, valornormal);


--
-- Name: relatr_producto_observacion_informante_atr_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX relatr_producto_observacion_informante_atr_idx ON cvp.relatr USING btree (producto, observacion, informante, atributo);


--
-- Name: relpre_producto_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX relpre_producto_idx ON cvp.relpre USING btree (producto);


--
-- Name: relpre_producto_observacion_informante_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX relpre_producto_observacion_informante_idx ON cvp.relpre USING btree (producto, observacion, informante);


--
-- Name: relpre_relvis_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE INDEX relpre_relvis_idx ON cvp.relpre USING btree (informante, periodo, formulario, visita);


--
-- Name: reltar_persona_habilitada_idx; Type: INDEX; Schema: cvp; Owner: -
--

CREATE UNIQUE INDEX reltar_persona_habilitada_idx ON cvp.reltar USING btree (encuestador, ((vencimiento_sincronizacion IS NOT NULL))) WHERE (vencimiento_sincronizacion IS NOT NULL);


--
-- Name: relenc actualizar_enc; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER actualizar_enc BEFORE INSERT OR UPDATE ON cvp.relenc FOR EACH ROW EXECUTE PROCEDURE cvp.actualizar_enc_trg();


--
-- Name: agrupaciones agrupaciones_fijas_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER agrupaciones_fijas_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.agrupaciones FOR EACH ROW EXECUTE PROCEDURE cvp.agrupaciones_fijas_trg();


--
-- Name: grupos agrupaciones_fijas_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER agrupaciones_fijas_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.grupos FOR EACH ROW EXECUTE PROCEDURE cvp.agrupaciones_fijas_trg();


--
-- Name: informantes altamanualdeinformantes_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER altamanualdeinformantes_trg BEFORE UPDATE ON cvp.informantes FOR EACH ROW EXECUTE PROCEDURE cvp.altamanualdeinformantes_trg();


--
-- Name: cal_mensajes cal_mensajes_setear_renglon_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER cal_mensajes_setear_renglon_trg BEFORE INSERT ON cvp.cal_mensajes FOR EACH ROW EXECUTE PROCEDURE cvp.setear_renglon_de_cal_mensajes_trg();


--
-- Name: calculos calculos_controlar_abrir_cerrar_calculo_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER calculos_controlar_abrir_cerrar_calculo_trg BEFORE UPDATE ON cvp.calculos FOR EACH ROW EXECUTE PROCEDURE cvp.validar_abrir_cerrar_calculo_trg();


--
-- Name: calculos calculos_controlar_transmitir_canastas_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER calculos_controlar_transmitir_canastas_trg BEFORE UPDATE ON cvp.calculos FOR EACH ROW EXECUTE PROCEDURE cvp.validar_transmitir_canasta_trg();


--
-- Name: calculos calculos_ext_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER calculos_ext_trg BEFORE UPDATE ON cvp.calculos FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_generar_externos();


--
-- Name: calculos calculos_lan_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER calculos_lan_trg BEFORE INSERT OR UPDATE ON cvp.calculos FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_lanzamiento_calculo();


--
-- Name: calculos calculos_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER calculos_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.calculos FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: calprodresp calprodresp_controlar_revision_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER calprodresp_controlar_revision_trg BEFORE UPDATE ON cvp.calprodresp FOR EACH ROW EXECUTE PROCEDURE cvp.controlar_revision_trg();


--
-- Name: especificaciones especificaciones_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER especificaciones_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.especificaciones FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: grupos grupos_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER grupos_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.grupos FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: formulariosimportados hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.formulariosimportados FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_formulariosimportados_trg();


--
-- Name: agrupaciones hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.agrupaciones FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_agrupaciones_trg();


--
-- Name: calculos hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.calculos FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_calculos_trg();


--
-- Name: forinf hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.forinf FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_forinf_trg();


--
-- Name: grupos hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.grupos FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_grupos_trg();


--
-- Name: novespinf hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novespinf FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_novespinf_trg();


--
-- Name: novext hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novext FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_novext_trg();


--
-- Name: prodatr hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.prodatr FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_prodatr_trg();


--
-- Name: variedades hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.variedades FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_variedades_trg();


--
-- Name: parametros hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.parametros FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_parametros_trg();


--
-- Name: pasoatraves hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.pasoatraves FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_pasoatraves_trg();


--
-- Name: tipopre hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.tipopre FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_tipopre_trg();


--
-- Name: personal hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.personal FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_personal_trg();


--
-- Name: tareas hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.tareas FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_tareas_trg();


--
-- Name: conjuntomuestral hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.conjuntomuestral FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_conjuntomuestral_trg();


--
-- Name: razones hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.razones FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_razones_trg();


--
-- Name: rubros hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.rubros FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_rubros_trg();


--
-- Name: pantar hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.pantar FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_pantar_trg();


--
-- Name: relatr hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_relatr_trg();


--
-- Name: relvis hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_relvis_trg();


--
-- Name: relpan hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relpan FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_relpan_trg();


--
-- Name: periodos hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.periodos FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_periodos_trg();


--
-- Name: productos hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.productos FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_productos_trg();


--
-- Name: atributos hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.atributos FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_atributos_trg();


--
-- Name: tipoinf hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.tipoinf FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_tipoinf_trg();


--
-- Name: especificaciones hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.especificaciones FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_especificaciones_trg();


--
-- Name: informantes hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.informantes FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_informantes_trg();


--
-- Name: relpre hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_relpre_trg();


--
-- Name: formularios hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.formularios FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_formularios_trg();


--
-- Name: numeros hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.numeros FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_numeros_trg();


--
-- Name: novprod hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novprod FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_novprod_trg();


--
-- Name: novobs hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novobs FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_novobs_trg();


--
-- Name: valvalatr hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.valvalatr FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_valvalatr_trg();


--
-- Name: pb_externos hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.pb_externos FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_pb_externos_trg();


--
-- Name: reltar hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.reltar FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_reltar_trg();


--
-- Name: relsup hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relsup FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_relsup_trg();


--
-- Name: relmon hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relmon FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_relmon_trg();


--
-- Name: novpre hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novpre FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_novpre_trg();


--
-- Name: relenc hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relenc FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_relenc_trg();


--
-- Name: prerep hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.prerep FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_prerep_trg();


--
-- Name: relinf hisc_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER hisc_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relinf FOR EACH ROW EXECUTE PROCEDURE cvp.hisc_relinf_trg();


--
-- Name: informantes informantes_direccion_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER informantes_direccion_trg BEFORE INSERT OR UPDATE ON cvp.informantes FOR EACH ROW EXECUTE PROCEDURE cvp.generar_direccion_informante_trg();


--
-- Name: informantes informantes_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER informantes_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.informantes FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: novdelobs novdelobs_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novdelobs_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novdelobs FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: novdelobs novdelobs_borrar_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novdelobs_borrar_trg BEFORE UPDATE ON cvp.novdelobs FOR EACH ROW EXECUTE PROCEDURE cvp.borrar_precios_trg();


--
-- Name: novdelobs novdelobs_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novdelobs_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novdelobs FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: novdelvis novdelvis_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novdelvis_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novdelvis FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: novdelvis novdelvis_borrar_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novdelvis_borrar_trg BEFORE UPDATE ON cvp.novdelvis FOR EACH ROW EXECUTE PROCEDURE cvp.borrar_visita_trg();


--
-- Name: novdelvis novdelvis_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novdelvis_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novdelvis FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: novespinf novespinf_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novespinf_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novespinf FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: novespinf novespinf_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novespinf_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novespinf FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: novext novext_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novext_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novext FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: novext novext_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novext_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novext FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: novobs novobs_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novobs_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novobs FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: novobs novobs_existe_observacion_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novobs_existe_observacion_trg BEFORE INSERT ON cvp.novobs FOR EACH ROW EXECUTE PROCEDURE cvp.novobs_validacion_trg();


--
-- Name: novobs novobs_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novobs_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novobs FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: novpre novpre_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novpre_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novpre FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: novpre novpre_blanquea_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novpre_blanquea_trg BEFORE UPDATE ON cvp.novpre FOR EACH ROW EXECUTE PROCEDURE cvp.blanquear_precios_trg();


--
-- Name: novpre novpre_cambio_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novpre_cambio_trg AFTER INSERT ON cvp.novpre FOR EACH ROW EXECUTE PROCEDURE cvp.revisar_cambio_trg();


--
-- Name: novpre novpre_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novpre_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novpre FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: novprod novprod_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novprod_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novprod FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: novprod novprod_act_promedio_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novprod_act_promedio_trg BEFORE INSERT OR UPDATE ON cvp.novprod FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_act_promedio();


--
-- Name: novprod novprod_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER novprod_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.novprod FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: pasoatraves pasoatraves_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER pasoatraves_trg BEFORE UPDATE ON cvp.pasoatraves FOR EACH ROW EXECUTE PROCEDURE cvp.pasoatraves_trg();


--
-- Name: periodos periodos_controlar_habilitado_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER periodos_controlar_habilitado_trg BEFORE UPDATE ON cvp.periodos FOR EACH ROW EXECUTE PROCEDURE cvp.validar_habilitado_trg();


--
-- Name: periodos periodos_controlar_ingresando_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER periodos_controlar_ingresando_trg BEFORE UPDATE ON cvp.periodos FOR EACH ROW EXECUTE PROCEDURE cvp.validar_ingresando_trg();


--
-- Name: periodos periodos_gen_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER periodos_gen_trg BEFORE INSERT OR UPDATE ON cvp.periodos FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_generar_periodo();


--
-- Name: periodos periodos_prerep_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER periodos_prerep_trg BEFORE INSERT OR UPDATE ON cvp.periodos FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_calcularprerep();


--
-- Name: prerep prerep_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER prerep_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.prerep FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: prodatr prodatr_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER prodatr_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.prodatr FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: prodatr prodatr_valornormal_mod_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER prodatr_valornormal_mod_trg BEFORE UPDATE ON cvp.prodatr FOR EACH ROW EXECUTE PROCEDURE cvp.prodatr_validamod_valornormal_trg();


--
-- Name: proddiv proddiv_ins_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER proddiv_ins_trg BEFORE INSERT OR UPDATE ON cvp.proddiv FOR EACH ROW EXECUTE PROCEDURE cvp.proddiv_ins_trg();


--
-- Name: productos productos_imputacon_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER productos_imputacon_trg BEFORE INSERT OR UPDATE ON cvp.productos FOR EACH ROW EXECUTE PROCEDURE cvp.validar_imputacon_trg();


--
-- Name: relatr relatr_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: relatr relatr_act_datos_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_act_datos_trg BEFORE UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.controlar_actualizacion_datos_trg();


--
-- Name: relatr relatr_actualizar_valor_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_actualizar_valor_trg BEFORE UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.permitir_actualizar_valor_trg();


--
-- Name: relatr relatr_dm_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_dm_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_cargado_dm();


--
-- Name: relatr relatr_esmoneda_valor_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_esmoneda_valor_trg BEFORE INSERT OR UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.relatr_valor_valida_moneda_trg();


--
-- Name: relatr relatr_esnumerico_valor_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_esnumerico_valor_trg BEFORE INSERT OR UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.relatr_valor_valida_numerico_trg();


--
-- Name: relatr relatr_existe_visita_1_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_existe_visita_1_trg BEFORE INSERT ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.controlar_existencia_visita_1_trg();


--
-- Name: relatr relatr_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: relatr relatr_normaliza_precio_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relatr_normaliza_precio_trg AFTER UPDATE ON cvp.relatr FOR EACH ROW EXECUTE PROCEDURE cvp.calcular_precionormaliz_relatr_trg();


--
-- Name: relenc relenc_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relenc_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relenc FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: relenc relenc_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relenc_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relenc FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: relinf relinf_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relinf_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relinf FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: relinf relinf_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relinf_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relinf FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: relmon relmon_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relmon_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relmon FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: relmon relmon_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relmon_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relmon FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: relmon relmon_moneda_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relmon_moneda_trg BEFORE UPDATE ON cvp.relmon FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_valor_pesos_trg();


--
-- Name: relmon relmon_normaliza_moneda_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relmon_normaliza_moneda_trg AFTER UPDATE ON cvp.relmon FOR EACH ROW EXECUTE PROCEDURE cvp.correr_normalizacion_moneda_trg();


--
-- Name: relpan relpan_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpan_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relpan FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: relpan relpan_gen_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpan_gen_trg BEFORE INSERT OR UPDATE ON cvp.relpan FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_generar_panel();


--
-- Name: relpan relpan_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpan_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relpan FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: relpre relpre_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: relpre relpre_act_datos_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_act_datos_trg BEFORE UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.controlar_actualizacion_datos_trg();


--
-- Name: relpre relpre_actualiza_ultima_visita_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_actualiza_ultima_visita_trg BEFORE UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_insercion_ultima_visita_trg();


--
-- Name: relpre relpre_desp_actualiza_ultima_visita_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_desp_actualiza_ultima_visita_trg AFTER UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.desp_actualizar_ultima_visita_trg();


--
-- Name: relpre relpre_dm_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_dm_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_cargado_dm();


--
-- Name: relpre relpre_existe_visita_1_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_existe_visita_1_trg BEFORE INSERT ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.controlar_existencia_visita_1_trg();


--
-- Name: relpre relpre_inserta_atributos_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_inserta_atributos_trg AFTER INSERT ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.insertar_atributos_trg();


--
-- Name: relpre relpre_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: relpre relpre_restaura_atributos_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_restaura_atributos_trg BEFORE UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.restaurar_atributos_trg();


--
-- Name: relpre relpre_senormaliza_precio_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_senormaliza_precio_trg BEFORE UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.calcular_precionormaliz_relpre_trg();


--
-- Name: relpre relpre_valida_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relpre_valida_trg BEFORE INSERT OR UPDATE ON cvp.relpre FOR EACH ROW EXECUTE PROCEDURE cvp.relpre_validacion_trg();


--
-- Name: relsup relsup_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relsup_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relsup FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: relsup relsup_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relsup_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relsup FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: reltar reltar_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER reltar_abi_trg BEFORE INSERT OR DELETE OR UPDATE OF supervisor, encuestador, realizada, resultado, observaciones, puntos, cargado, descargado, id_instalacion ON cvp.reltar FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: reltar reltar_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER reltar_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.reltar FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: reltar reltar_verificar_sincronizacion; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER reltar_verificar_sincronizacion BEFORE UPDATE OF vencimiento_sincronizacion ON cvp.reltar FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_sincronizacion();


--
-- Name: relvis relvis_abi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_abi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_ingresando();


--
-- Name: relvis relvis_actualiza_encuestador_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_actualiza_encuestador_trg BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.actualizar_tarea_encuestador_trg();


--
-- Name: relvis relvis_actualiza_estado_informante_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_actualiza_estado_informante_trg BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.actualizar_estado_informante_trg();


--
-- Name: relvis relvis_actualiza_periodo_panelrotativo; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_actualiza_periodo_panelrotativo BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.actualizar_periodo_panelrotativo_trg();


--
-- Name: relvis relvis_cambio_panel_tarea_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_cambio_panel_tarea_trg BEFORE UPDATE OF panel, tarea ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.cambio_panel_tarea_trg();


--
-- Name: relvis relvis_cambios_razon_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_cambios_razon_trg BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.cambios_razon_trg();


--
-- Name: relvis relvis_controlar_recepcion_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_controlar_recepcion_trg BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.validar_recepcion_trg();


--
-- Name: relvis relvis_dm_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_dm_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_cargado_dm();


--
-- Name: relvis relvis_existe_visita_1_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_existe_visita_1_trg BEFORE INSERT ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.controlar_existencia_visita_1_trg();


--
-- Name: relvis relvis_fechas_visita_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_fechas_visita_trg BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.validar_fechas_visita_trg();

ALTER TABLE cvp.relvis DISABLE TRIGGER relvis_fechas_visita_trg;


--
-- Name: relvis relvis_gen_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_gen_trg BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.verificar_generar_formulario();


--
-- Name: relvis relvis_genera_reemplazante; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_genera_reemplazante BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.generar_visitas_reemplazo_trg();


--
-- Name: relvis relvis_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: relvis relvis_personal_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_personal_trg BEFORE INSERT OR UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.validar_personal_trg();


--
-- Name: relvis relvis_razon_cierre_definitivo_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_razon_cierre_definitivo_trg BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.razon_cierre_definitivo_trg();


--
-- Name: relvis relvis_razon_cierre_temporal_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_razon_cierre_temporal_trg BEFORE UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.razon_cierre_temporal_trg();


--
-- Name: relvis relvis_valida_tarea_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER relvis_valida_tarea_trg BEFORE INSERT OR UPDATE ON cvp.relvis FOR EACH ROW EXECUTE PROCEDURE cvp.relvis_tarea_trg();


--
-- Name: variedades variedades_modi_trg; Type: TRIGGER; Schema: cvp; Owner: -
--

CREATE TRIGGER variedades_modi_trg BEFORE INSERT OR DELETE OR UPDATE ON cvp.variedades FOR EACH ROW EXECUTE PROCEDURE cvp.modi_trg();


--
-- Name: atributos atributos_unidaddemedida_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.atributos
    ADD CONSTRAINT atributos_unidaddemedida_fkey FOREIGN KEY (unidaddemedida) REFERENCES cvp.unidades(unidad);


--
-- Name: blaatr blaatr_atributo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blaatr
    ADD CONSTRAINT blaatr_atributo_fkey FOREIGN KEY (atributo) REFERENCES cvp.atributos(atributo);


--
-- Name: blaatr blaatr_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blaatr
    ADD CONSTRAINT blaatr_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: blaatr blaatr_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blaatr
    ADD CONSTRAINT blaatr_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: blaatr blaatr_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blaatr
    ADD CONSTRAINT blaatr_periodo_fkey1 FOREIGN KEY (periodo, producto, observacion, informante, visita) REFERENCES cvp.relpre(periodo, producto, observacion, informante, visita);


--
-- Name: blaatr blaatr_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blaatr
    ADD CONSTRAINT blaatr_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: blaatr blaatr_producto_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blaatr
    ADD CONSTRAINT blaatr_producto_fkey1 FOREIGN KEY (producto, atributo, valor, validar_con_valvalatr) REFERENCES cvp.valvalatr(producto, atributo, valor, validar);


--
-- Name: blapre blapre_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blapre
    ADD CONSTRAINT blapre_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: blapre blapre_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blapre
    ADD CONSTRAINT blapre_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: blapre blapre_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blapre
    ADD CONSTRAINT blapre_periodo_fkey1 FOREIGN KEY (periodo, informante, visita, formulario) REFERENCES cvp.relvis(periodo, informante, visita, formulario);


--
-- Name: blapre blapre_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blapre
    ADD CONSTRAINT blapre_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: blapre blapre_tipoprecio_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.blapre
    ADD CONSTRAINT blapre_tipoprecio_fkey FOREIGN KEY (tipoprecio) REFERENCES cvp.tipopre(tipoprecio);


--
-- Name: cal_mensajes cal_mensajes_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.cal_mensajes
    ADD CONSTRAINT cal_mensajes_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calbase_div calbase_div_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_div
    ADD CONSTRAINT calbase_div_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo);


--
-- Name: calbase_div calbase_div_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_div
    ADD CONSTRAINT calbase_div_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto);


--
-- Name: calbase_obs calbase_obs_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_obs
    ADD CONSTRAINT calbase_obs_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo);


--
-- Name: calbase_obs calbase_obs_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_obs
    ADD CONSTRAINT calbase_obs_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: calbase_obs calbase_obs_periodo_aparicion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_obs
    ADD CONSTRAINT calbase_obs_periodo_aparicion_fkey FOREIGN KEY (periodo_aparicion) REFERENCES cvp.periodos(periodo);


--
-- Name: calbase_obs calbase_obs_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_obs
    ADD CONSTRAINT calbase_obs_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto);


--
-- Name: calbase_prod calbase_prod_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_prod
    ADD CONSTRAINT calbase_prod_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo);


--
-- Name: calbase_prod calbase_prod_mes_inicio_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_prod
    ADD CONSTRAINT calbase_prod_mes_inicio_fkey FOREIGN KEY (mes_inicio) REFERENCES cvp.periodos(periodo);


--
-- Name: calbase_prod calbase_prod_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calbase_prod
    ADD CONSTRAINT calbase_prod_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto);


--
-- Name: calculos calculos_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos
    ADD CONSTRAINT calculos_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo) ON UPDATE CASCADE;


--
-- Name: calculos_def calculos_def_basado_en_extraccion_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos_def
    ADD CONSTRAINT calculos_def_basado_en_extraccion_calculo_fkey FOREIGN KEY (basado_en_extraccion_calculo) REFERENCES cvp.calculos_def(calculo) ON UPDATE CASCADE;


--
-- Name: calculos_def calculos_def_basado_en_extraccion_muestra_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos_def
    ADD CONSTRAINT calculos_def_basado_en_extraccion_muestra_fkey FOREIGN KEY (basado_en_extraccion_muestra) REFERENCES cvp.muestras(muestra);


--
-- Name: calculos calculos_pb_calculobase_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos
    ADD CONSTRAINT calculos_pb_calculobase_fkey FOREIGN KEY (pb_calculobase) REFERENCES cvp.calculos_def(calculo) ON UPDATE CASCADE;


--
-- Name: calculos calculos_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos
    ADD CONSTRAINT calculos_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calculos calculos_periodoanterior_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calculos
    ADD CONSTRAINT calculos_periodoanterior_fkey FOREIGN KEY (periodoanterior, calculoanterior) REFERENCES cvp.calculos(periodo, calculo) ON UPDATE CASCADE;


--
-- Name: caldiv caldiv_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.caldiv
    ADD CONSTRAINT caldiv_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo);


--
-- Name: calgru calgru_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calgru
    ADD CONSTRAINT calgru_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo);


--
-- Name: calgru calgru_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calgru
    ADD CONSTRAINT calgru_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calgru calgru_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calgru
    ADD CONSTRAINT calgru_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo) ON UPDATE CASCADE;


--
-- Name: calhoggru calhoggru_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhoggru
    ADD CONSTRAINT calhoggru_agrupacion_fkey FOREIGN KEY (agrupacion, grupo) REFERENCES cvp.grupos(agrupacion, grupo);


--
-- Name: calhoggru calhoggru_hogar_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhoggru
    ADD CONSTRAINT calhoggru_hogar_fkey FOREIGN KEY (hogar) REFERENCES cvp.hogares(hogar);


--
-- Name: calhoggru calhoggru_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhoggru
    ADD CONSTRAINT calhoggru_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calhoggru calhoggru_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhoggru
    ADD CONSTRAINT calhoggru_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo) ON UPDATE CASCADE;


--
-- Name: calhogsubtotales calhogsubtotales_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhogsubtotales
    ADD CONSTRAINT calhogsubtotales_agrupacion_fkey FOREIGN KEY (agrupacion, grupo) REFERENCES cvp.grupos(agrupacion, grupo);


--
-- Name: calhogsubtotales calhogsubtotales_hogar_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhogsubtotales
    ADD CONSTRAINT calhogsubtotales_hogar_fkey FOREIGN KEY (hogar) REFERENCES cvp.hogares(hogar);


--
-- Name: calhogsubtotales calhogsubtotales_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhogsubtotales
    ADD CONSTRAINT calhogsubtotales_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calhogsubtotales calhogsubtotales_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calhogsubtotales
    ADD CONSTRAINT calhogsubtotales_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo) ON UPDATE CASCADE;


--
-- Name: calobs calobs_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calobs
    ADD CONSTRAINT calobs_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo);


--
-- Name: calobs calobs_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calobs
    ADD CONSTRAINT calobs_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: calobs calobs_muestra_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calobs
    ADD CONSTRAINT calobs_muestra_fkey FOREIGN KEY (muestra) REFERENCES cvp.muestras(muestra);


--
-- Name: calobs calobs_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calobs
    ADD CONSTRAINT calobs_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calobs calobs_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calobs
    ADD CONSTRAINT calobs_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo) ON UPDATE CASCADE;


--
-- Name: calobs calobs_productos_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calobs
    ADD CONSTRAINT calobs_productos_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: calprod calprod_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprod
    ADD CONSTRAINT calprod_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo);


--
-- Name: calprod calprod_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprod
    ADD CONSTRAINT calprod_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calprod calprod_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprod
    ADD CONSTRAINT calprod_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo) ON UPDATE CASCADE;


--
-- Name: calprod calprod_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprod
    ADD CONSTRAINT calprod_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: calprodagr calprodagr_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodagr
    ADD CONSTRAINT calprodagr_agrupacion_fkey FOREIGN KEY (agrupacion) REFERENCES cvp.agrupaciones(agrupacion);


--
-- Name: calprodagr calprodagr_calculo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodagr
    ADD CONSTRAINT calprodagr_calculo_fkey FOREIGN KEY (calculo) REFERENCES cvp.calculos_def(calculo);


--
-- Name: calprodagr calprodagr_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodagr
    ADD CONSTRAINT calprodagr_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calprodagr calprodagr_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodagr
    ADD CONSTRAINT calprodagr_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo);


--
-- Name: calprodagr calprodagr_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodagr
    ADD CONSTRAINT calprodagr_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto);


--
-- Name: calprodresp calprodresp_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodresp
    ADD CONSTRAINT calprodresp_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: calprodresp calprodresp_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodresp
    ADD CONSTRAINT calprodresp_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo);


--
-- Name: calprodresp calprodresp_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.calprodresp
    ADD CONSTRAINT calprodresp_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto);


--
-- Name: caldiv caltipoinf_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.caldiv
    ADD CONSTRAINT caltipoinf_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: caldiv caltipoinf_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.caldiv
    ADD CONSTRAINT caltipoinf_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo) ON UPDATE CASCADE;


--
-- Name: caldiv caltipoinf_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.caldiv
    ADD CONSTRAINT caltipoinf_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: cuagru cuagru_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.cuagru
    ADD CONSTRAINT cuagru_agrupacion_fkey FOREIGN KEY (agrupacion, grupo) REFERENCES cvp.grupos(agrupacion, grupo);


--
-- Name: cuagru cuagru_cuadro_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.cuagru
    ADD CONSTRAINT cuagru_cuadro_fkey FOREIGN KEY (cuadro) REFERENCES cvp.cuadros(cuadro);


--
-- Name: dicprodatr dicprodatr_prodatr_fk; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.dicprodatr
    ADD CONSTRAINT dicprodatr_prodatr_fk FOREIGN KEY (producto, atributo) REFERENCES cvp.prodatr(producto, atributo);


--
-- Name: especificaciones especificaciones_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.especificaciones
    ADD CONSTRAINT especificaciones_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: especificaciones especificaciones_unidaddemedida_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.especificaciones
    ADD CONSTRAINT especificaciones_unidaddemedida_fkey FOREIGN KEY (unidaddemedida) REFERENCES cvp.unidades(unidad);


--
-- Name: forinf forinf_altamanualperiodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.forinf
    ADD CONSTRAINT forinf_altamanualperiodo_fkey FOREIGN KEY (altamanualperiodo) REFERENCES cvp.periodos(periodo);


--
-- Name: forinf forinf_formulario_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.forinf
    ADD CONSTRAINT forinf_formulario_fkey FOREIGN KEY (formulario) REFERENCES cvp.formularios(formulario);


--
-- Name: forinf forinf_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.forinf
    ADD CONSTRAINT forinf_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: formularios formulario_tipoinf_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.formularios
    ADD CONSTRAINT formulario_tipoinf_fkey FOREIGN KEY (soloparatipo) REFERENCES cvp.tipoinf(tipoinformante);


--
-- Name: forprod forprod_formulario_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.forprod
    ADD CONSTRAINT forprod_formulario_fkey FOREIGN KEY (formulario) REFERENCES cvp.formularios(formulario);


--
-- Name: forprod forprod_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.forprod
    ADD CONSTRAINT forprod_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: grupos grupos_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.grupos
    ADD CONSTRAINT grupos_agrupacion_fkey FOREIGN KEY (agrupacion) REFERENCES cvp.agrupaciones(agrupacion);


--
-- Name: grupos grupos_agrupacion_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.grupos
    ADD CONSTRAINT grupos_agrupacion_fkey1 FOREIGN KEY (agrupacion, grupopadre) REFERENCES cvp.grupos(agrupacion, grupo);


--
-- Name: grupos grupos_agrupacionorigen_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.grupos
    ADD CONSTRAINT grupos_agrupacionorigen_fkey FOREIGN KEY (agrupacionorigen) REFERENCES cvp.agrupaciones(agrupacion);


--
-- Name: grupos grupos_agrupacionorigen_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.grupos
    ADD CONSTRAINT grupos_agrupacionorigen_fkey1 FOREIGN KEY (agrupacionorigen, grupo) REFERENCES cvp.grupos(agrupacion, grupo);


--
-- Name: hogparagr hogpar_hogar_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.hogparagr
    ADD CONSTRAINT hogpar_hogar_fkey FOREIGN KEY (hogar) REFERENCES cvp.hogares(hogar);


--
-- Name: hogparagr hogpar_parametro_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.hogparagr
    ADD CONSTRAINT hogpar_parametro_fkey FOREIGN KEY (parametro) REFERENCES cvp.parhog(parametro);


--
-- Name: hogparagr hogparagr_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.hogparagr
    ADD CONSTRAINT hogparagr_agrupacion_fkey FOREIGN KEY (agrupacion) REFERENCES cvp.agrupaciones(agrupacion);


--
-- Name: infoextprod infoextprod_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.infoextprod
    ADD CONSTRAINT infoextprod_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: informantes informante_conjuntomuestral_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.informantes
    ADD CONSTRAINT informante_conjuntomuestral_fkey FOREIGN KEY (conjuntomuestral) REFERENCES cvp.conjuntomuestral(conjuntomuestral);


--
-- Name: informantes informante_rubro_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.informantes
    ADD CONSTRAINT informante_rubro_fkey FOREIGN KEY (rubro) REFERENCES cvp.rubros(rubro);


--
-- Name: informantes informantes_muestra_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.informantes
    ADD CONSTRAINT informantes_muestra_fkey FOREIGN KEY (muestra) REFERENCES cvp.muestras(muestra);


--
-- Name: informantes informantes_tipoinformante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.informantes
    ADD CONSTRAINT informantes_tipoinformante_fkey FOREIGN KEY (tipoinformante) REFERENCES cvp.tipoinf(tipoinformante);


--
-- Name: infreemp infreemp_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.infreemp
    ADD CONSTRAINT infreemp_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: instalaciones instalaciones personal REL; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.instalaciones
    ADD CONSTRAINT "instalaciones personal REL" FOREIGN KEY (encuestador) REFERENCES cvp.personal(persona) ON UPDATE CASCADE;


--
-- Name: locks locks tokens REL; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.locks
    ADD CONSTRAINT "locks tokens REL" FOREIGN KEY (token) REFERENCES cvp.tokens(token) ON UPDATE CASCADE;


--
-- Name: modulosusuarios modulosusuarios_formulario_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.modulosusuarios
    ADD CONSTRAINT modulosusuarios_formulario_fkey FOREIGN KEY (formulario, zona, nombre) REFERENCES cvp.modulos(formulario, zona, nombre);


--
-- Name: modulosusuarios modulosusuarios_username_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.modulosusuarios
    ADD CONSTRAINT modulosusuarios_username_fkey FOREIGN KEY (username) REFERENCES cvp.personal(username);


--
-- Name: muestras muestras_alta_inmediata_hasta_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.muestras
    ADD CONSTRAINT muestras_alta_inmediata_hasta_periodo_fkey FOREIGN KEY (alta_inmediata_hasta_periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: novespinf novespinf_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novespinf
    ADD CONSTRAINT novespinf_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: novespinf novespinf_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novespinf
    ADD CONSTRAINT novespinf_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: novespinf novespinf_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novespinf
    ADD CONSTRAINT novespinf_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo);


--
-- Name: novespinf novespinf_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novespinf
    ADD CONSTRAINT novespinf_producto_fkey FOREIGN KEY (producto, especificacion) REFERENCES cvp.especificaciones(producto, especificacion) ON UPDATE CASCADE;


--
-- Name: novext novext_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novext
    ADD CONSTRAINT novext_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: novext novext_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novext
    ADD CONSTRAINT novext_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo);


--
-- Name: novobs_base novobs_base_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novobs_base
    ADD CONSTRAINT novobs_base_periodo_fkey FOREIGN KEY (hasta_periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: novobs_base novobs_base_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novobs_base
    ADD CONSTRAINT novobs_base_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: novobs novobs_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novobs
    ADD CONSTRAINT novobs_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: novobs novobs_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novobs
    ADD CONSTRAINT novobs_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: novobs novobs_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novobs
    ADD CONSTRAINT novobs_periodo_fkey1 FOREIGN KEY (periodo, calculo) REFERENCES cvp.calculos(periodo, calculo) ON UPDATE CASCADE;


--
-- Name: novobs novobs_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novobs
    ADD CONSTRAINT novobs_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: novpre novpre_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novpre
    ADD CONSTRAINT novpre_periodo_fkey FOREIGN KEY (periodo, producto, observacion, informante, visita) REFERENCES cvp.relpre(periodo, producto, observacion, informante, visita);


--
-- Name: novprod novprod_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novprod
    ADD CONSTRAINT novprod_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: novprod novprod_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.novprod
    ADD CONSTRAINT novprod_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: parhoggru parhoggru_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.parhoggru
    ADD CONSTRAINT parhoggru_agrupacion_fkey FOREIGN KEY (agrupacion, grupo) REFERENCES cvp.grupos(agrupacion, grupo);


--
-- Name: parhoggru parhoggru_parametro_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.parhoggru
    ADD CONSTRAINT parhoggru_parametro_fkey FOREIGN KEY (parametro) REFERENCES cvp.parhog(parametro);


--
-- Name: pb_calculos_reglas pb_calculos_reglas_desde_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pb_calculos_reglas
    ADD CONSTRAINT pb_calculos_reglas_desde_fkey FOREIGN KEY (desde) REFERENCES cvp.periodos(periodo);


--
-- Name: pb_calculos_reglas pb_calculos_reglas_hasta_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pb_calculos_reglas
    ADD CONSTRAINT pb_calculos_reglas_hasta_fkey FOREIGN KEY (hasta) REFERENCES cvp.periodos(periodo);


--
-- Name: pb_externos pb_externos_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pb_externos
    ADD CONSTRAINT pb_externos_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: pb_externos pb_externos_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.pb_externos
    ADD CONSTRAINT pb_externos_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: periodos periodo_ant; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.periodos
    ADD CONSTRAINT periodo_ant FOREIGN KEY (periodoanterior) REFERENCES cvp.periodos(periodo);


--
-- Name: personal personal_id_instalacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.personal
    ADD CONSTRAINT personal_id_instalacion_fkey FOREIGN KEY (id_instalacion) REFERENCES cvp.instalaciones(id_instalacion);


--
-- Name: prerep prerep_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prerep
    ADD CONSTRAINT prerep_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: prodagr prodagr_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodagr
    ADD CONSTRAINT prodagr_agrupacion_fkey FOREIGN KEY (agrupacion) REFERENCES cvp.agrupaciones(agrupacion);


--
-- Name: prodagr prodagr_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodagr
    ADD CONSTRAINT prodagr_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto);


--
-- Name: prodatr prodatr_atributo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodatr
    ADD CONSTRAINT prodatr_atributo_fkey FOREIGN KEY (atributo) REFERENCES cvp.atributos(atributo);


--
-- Name: prodatr prodatr_otraunidaddemedida_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodatr
    ADD CONSTRAINT prodatr_otraunidaddemedida_fkey FOREIGN KEY (otraunidaddemedida) REFERENCES cvp.unidades(unidad);


--
-- Name: prodatr prodatr_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodatr
    ADD CONSTRAINT prodatr_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: prodatrval prodatrval_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.prodatrval
    ADD CONSTRAINT prodatrval_producto_fkey FOREIGN KEY (producto, atributo) REFERENCES cvp.prodatr(producto, atributo);


--
-- Name: proddiv proddiv_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.proddiv
    ADD CONSTRAINT proddiv_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: proddivestimac proddivestimac_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.proddivestimac
    ADD CONSTRAINT proddivestimac_producto_fkey FOREIGN KEY (producto, division) REFERENCES cvp.proddiv(producto, division);


--
-- Name: productos productos_unidadmedidaporunidcons_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.productos
    ADD CONSTRAINT productos_unidadmedidaporunidcons_fkey FOREIGN KEY (unidadmedidaporunidcons) REFERENCES cvp.unidades(unidad);


--
-- Name: proddiv redundancia para garantizar la exclusion de divisiones no compa; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.proddiv
    ADD CONSTRAINT "redundancia para garantizar la exclusion de divisiones no compa" FOREIGN KEY (division, incluye_supermercados, incluye_tradicionales) REFERENCES cvp.divisiones(division, incluye_supermercados, incluye_tradicionales);


--
-- Name: relatr relatr_atributo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relatr
    ADD CONSTRAINT relatr_atributo_fkey FOREIGN KEY (atributo) REFERENCES cvp.atributos(atributo);


--
-- Name: relatr relatr_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relatr
    ADD CONSTRAINT relatr_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: relatr relatr_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relatr
    ADD CONSTRAINT relatr_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: relatr relatr_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relatr
    ADD CONSTRAINT relatr_periodo_fkey1 FOREIGN KEY (periodo, producto, observacion, informante, visita) REFERENCES cvp.relpre(periodo, producto, observacion, informante, visita);


--
-- Name: relatr relatr_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relatr
    ADD CONSTRAINT relatr_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: relatr relatr_valvalatr_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relatr
    ADD CONSTRAINT relatr_valvalatr_fkey FOREIGN KEY (producto, atributo, valor, validar_con_valvalatr) REFERENCES cvp.valvalatr(producto, atributo, valor, validar);


--
-- Name: relenc relenc_encuestador_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relenc
    ADD CONSTRAINT relenc_encuestador_fkey FOREIGN KEY (encuestador) REFERENCES cvp.personal(persona);


--
-- Name: relenc relenc_panel_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relenc
    ADD CONSTRAINT relenc_panel_fkey FOREIGN KEY (panel, tarea) REFERENCES cvp.pantar(panel, tarea);


--
-- Name: relenc relenc_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relenc
    ADD CONSTRAINT relenc_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: relinf relinf_inf_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relinf
    ADD CONSTRAINT relinf_inf_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: relinf relinf_per_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relinf
    ADD CONSTRAINT relinf_per_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: relmon relmon_monedas_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relmon
    ADD CONSTRAINT relmon_monedas_fkey FOREIGN KEY (moneda) REFERENCES cvp.monedas(moneda);


--
-- Name: relmon relmon_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relmon
    ADD CONSTRAINT relmon_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: relpan relpan_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpan
    ADD CONSTRAINT relpan_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: relpre relpre_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpre
    ADD CONSTRAINT relpre_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: relpre relpre_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpre
    ADD CONSTRAINT relpre_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: relpre relpre_periodo_fkey1; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpre
    ADD CONSTRAINT relpre_periodo_fkey1 FOREIGN KEY (periodo, informante, visita, formulario) REFERENCES cvp.relvis(periodo, informante, visita, formulario);


--
-- Name: relpre relpre_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpre
    ADD CONSTRAINT relpre_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto) ON UPDATE CASCADE;


--
-- Name: relpre relpre_tipopre_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpre
    ADD CONSTRAINT relpre_tipopre_fkey FOREIGN KEY (tipoprecio) REFERENCES cvp.tipopre(tipoprecio);


--
-- Name: relpresemaforo relpresemaforo_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpresemaforo
    ADD CONSTRAINT relpresemaforo_producto_fkey FOREIGN KEY (producto) REFERENCES cvp.productos(producto);


--
-- Name: relpresemaforo relpresemaforo_relpre_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relpresemaforo
    ADD CONSTRAINT relpresemaforo_relpre_fkey FOREIGN KEY (periodo, producto, observacion, informante, visita) REFERENCES cvp.relpre(periodo, producto, observacion, informante, visita);


--
-- Name: relsup relsup_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relsup
    ADD CONSTRAINT relsup_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: relsup relsup_personal_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relsup
    ADD CONSTRAINT relsup_personal_fkey FOREIGN KEY (supervisor) REFERENCES cvp.personal(persona);


--
-- Name: relsup relsup_relpan_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relsup
    ADD CONSTRAINT relsup_relpan_fkey FOREIGN KEY (periodo, panel) REFERENCES cvp.relpan(periodo, panel);


--
-- Name: reltar reltar_enc_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.reltar
    ADD CONSTRAINT reltar_enc_fkey FOREIGN KEY (encuestador) REFERENCES cvp.personal(persona);


--
-- Name: reltar reltar_id_instalacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.reltar
    ADD CONSTRAINT reltar_id_instalacion_fkey FOREIGN KEY (id_instalacion) REFERENCES cvp.instalaciones(id_instalacion);


--
-- Name: reltar reltar_relpan_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.reltar
    ADD CONSTRAINT reltar_relpan_fkey FOREIGN KEY (periodo, panel) REFERENCES cvp.relpan(periodo, panel);


--
-- Name: reltar reltar_sup_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.reltar
    ADD CONSTRAINT reltar_sup_fkey FOREIGN KEY (supervisor) REFERENCES cvp.personal(persona);


--
-- Name: reltar reltar_tarea_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.reltar
    ADD CONSTRAINT reltar_tarea_fkey FOREIGN KEY (tarea) REFERENCES cvp.tareas(tarea);


--
-- Name: relvis relvis_formulario_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_formulario_fkey FOREIGN KEY (formulario) REFERENCES cvp.formularios(formulario);


--
-- Name: relvis relvis_informante_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_informante_fkey FOREIGN KEY (informante) REFERENCES cvp.informantes(informante);


--
-- Name: relvis relvis_periodo_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_periodo_fkey FOREIGN KEY (periodo) REFERENCES cvp.periodos(periodo);


--
-- Name: relvis relvis_personalenc_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_personalenc_fkey FOREIGN KEY (encuestador) REFERENCES cvp.personal(persona);


--
-- Name: relvis relvis_personaling_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_personaling_fkey FOREIGN KEY (ingresador) REFERENCES cvp.personal(persona);


--
-- Name: relvis relvis_personalrec_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_personalrec_fkey FOREIGN KEY (recepcionista) REFERENCES cvp.personal(persona);


--
-- Name: relvis relvis_personalsup_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_personalsup_fkey FOREIGN KEY (supervisor) REFERENCES cvp.personal(persona);


--
-- Name: relvis relvis_razones_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_razones_fkey FOREIGN KEY (razon) REFERENCES cvp.razones(razon);


--
-- Name: relvis relvis_relpan_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.relvis
    ADD CONSTRAINT relvis_relpan_fkey FOREIGN KEY (periodo, panel) REFERENCES cvp.relpan(periodo, panel);


--
-- Name: rubfor rubfor_formulario_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.rubfor
    ADD CONSTRAINT rubfor_formulario_fkey FOREIGN KEY (formulario) REFERENCES cvp.formularios(formulario);


--
-- Name: rubfor rubfor_rubro_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.rubfor
    ADD CONSTRAINT rubfor_rubro_fkey FOREIGN KEY (rubro) REFERENCES cvp.rubros(rubro);


--
-- Name: rubros rubros_tipoinf_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.rubros
    ADD CONSTRAINT rubros_tipoinf_fkey FOREIGN KEY (tipoinformante) REFERENCES cvp.tipoinf(tipoinformante);


--
-- Name: selprod selprod_productos_fk; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.selprod
    ADD CONSTRAINT selprod_productos_fk FOREIGN KEY (producto) REFERENCES cvp.productos(producto);


--
-- Name: selprodatr selprodatr_prodatr_fk; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.selprodatr
    ADD CONSTRAINT selprodatr_prodatr_fk FOREIGN KEY (producto, atributo) REFERENCES cvp.prodatr(producto, atributo);


--
-- Name: selprodatr selprodatr_selprod_fk; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.selprodatr
    ADD CONSTRAINT selprodatr_selprod_fk FOREIGN KEY (producto, sel_nro) REFERENCES cvp.selprod(producto, sel_nro);


--
-- Name: tareas tareas_encuestador_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.tareas
    ADD CONSTRAINT tareas_encuestador_fkey FOREIGN KEY (encuestador) REFERENCES cvp.personal(persona);
--
-- Name: transf_info transf_info_agrupacion_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.transf_info
    ADD CONSTRAINT transf_info_agrupacion_fkey FOREIGN KEY (agrupacion, grupo) REFERENCES cvp.grupos(agrupacion, grupo);


--
-- Name: unidades unidades_magnitud_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.unidades
    ADD CONSTRAINT unidades_magnitud_fkey FOREIGN KEY (magnitud) REFERENCES cvp.magnitudes(magnitud);


--
-- Name: valvalatr valvalatr_prodatr_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.valvalatr
    ADD CONSTRAINT valvalatr_prodatr_fkey FOREIGN KEY (producto, atributo) REFERENCES cvp.prodatr(producto, atributo);


--
-- Name: variedades variedades_producto_fkey; Type: FK CONSTRAINT; Schema: cvp; Owner: -
--

ALTER TABLE ONLY cvp.variedades
    ADD CONSTRAINT variedades_producto_fkey FOREIGN KEY (producto, especificacion) REFERENCES cvp.especificaciones(producto, especificacion) ON UPDATE CASCADE;


--
-- PostgreSQL database dump complete
--

